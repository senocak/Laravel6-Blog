[
    {"id":"1","baslik":"PHP 8.0 nelerle geliyor?","url":"php-8.0-nelerle-geliyor","icerik":"<p>Bu yazıda PHP 8.0 hakkında kesinleşen ve tartışılan yeni &ouml;zellikler hakkında bilgiler vereceğim. PHP 7.0&rsquo;ın &ccedil;ıkışı &ouml;zellikle performans iyileştirmeleriyle dikkatleri &uuml;zerine &ccedil;ekmiş, ve hatta Facebook&rsquo;un yayınladığı performans odaklı HHVM isimli PHP motoruna olan talebi de azaltmıştı. PHP 8.0 da en az PHP 7.0 kadar konuşulacak yeni &ouml;zelliklerle geliyor.<\/p>\r\n\r\n<p>PHP8&rsquo;de beklenen en b&uuml;y&uuml;k yenilik JIT derlemesi. Yaklaşık iki ay &ouml;nce, PHP&rsquo;nin JIT&nbsp;<a href=\"https:\/\/wiki.php.net\/rfc\/jit\" rel=\"nofollow\" target=\"_blank\">taslağı<\/a>, PHP geliştiricileri tarafından oylandı ve kabul edildi. Buna g&ouml;re PHP8&rsquo;e JIT&rsquo;in uygulanacak olması kesinleşti. PHP&rsquo;nin geliştiricisi Zend firması, halihazırda PHP8&rsquo;e ve yeni JIT motorununun geliştirmesine başladı bile.<\/p>\r\n\r\n<p>Şimdi bu yeni JIT &ouml;zelliğinden bahsedelim. JIT, bazı programlama dillerinde de kullanılan bir &ccedil;alıştırma y&ouml;ntemidir. Normalde PHP&rsquo;nin mevcut (mesela 7.0) s&uuml;r&uuml;m&uuml;n&uuml;n bir yorumlayıcı programı olur ve verilen kaynak kodunu okuduktan sonra bunu PHP motorunun anlayabileceği bir bytecode&rsquo;a &ccedil;evirir ardından bunu da yorumlayarak &ccedil;ıktısını verir. Ancak JIT ile her defasında aynı işlemin yapılması yerine, yorumlanması i&ccedil;in oluşturulmuş olan mevcut bytecode&rsquo;u Assembly&rsquo;e yani işlemcinin anlayacağı dile &ccedil;evirir ve kaynak kodun tekrar okunmasına gerek duyulmadığı s&uuml;re boyunca aynı makine kodunun &ccedil;ıktısını vermeye devam eder. Bu sayede bir kodun yorumlanması i&ccedil;in gereken bu s&uuml;re&ccedil; i&ccedil;erisinde t&uuml;ketilen sistem kaynaklarından tasarruf edilmiş olur ve tabiki kodun &ccedil;alışma s&uuml;resi azaltılır.<\/p>\r\n\r\n<p>PHP&rsquo;nin temellerini atan iki geliştiriciden biri olan Zeev Suraski, PHP 7.0 ile PHP 8.0&rsquo;ın bir karşılaştırmasını yaptığı video hazırlamış. Buradan ikisi arasındaki performansı daha iyi anlayabilirsiniz.<\/p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/dWH65pmnsrI\" width=\"560\"><\/iframe><\/p>\r\n\r\n<p>PHP 8.0&rsquo;a JIT dışında beklenen yeni deprecation&rsquo;lar ve d&uuml;zenlemeler şunlar:<\/p>\r\n\r\n<ul>\r\n\t<li>G&uuml;n&uuml;m&uuml;zde pek fazla kullanılmayan &ouml;zellik olan PHP short tags (kısa PHP etiketleri), PHP 8.0 ile birlikte tamamen kaldırılacak.<\/li>\r\n\t<li>&Uuml;&ccedil;l&uuml; karşılaştırma operat&ouml;rlerinden (ifade ? bir : iki) parantezsiz olarak fazladan ifade eklenimi kaldırılacak.&nbsp;<code>ifade ? bir : iki ? &uuml;&ccedil; : d&ouml;rt<\/code>&nbsp;yerine yalnızca parantezli kullanımına izin verilecek&nbsp;<code>ifade ? bir : (iki ? &uuml;&ccedil; : d&ouml;rt)<\/code>; bu sayede olası yanlış anlaşılmaların &ouml;n&uuml;ne ge&ccedil;ilecek ve kodun okunabilirliği artacak.<\/li>\r\n\t<li>Kullanıcı fonksiyonlarındaki&nbsp;<code>TypeError<\/code>, dahili fonksiyonlar i&ccedil;in de ge&ccedil;erli olacak. Daha &ouml;nce dahili fonksiyonlarından t&uuml;r hatası yerine null ya da sadece uyarı mesajı d&ouml;nd&uuml;r&uuml;l&uuml;yordu.<\/li>\r\n\t<li>Birleşme operat&ouml;r&uuml;n&uuml;n &ouml;nceliği değiştiriliyor. Mevcut davranışta soldan sağa iken, yeni davranışında toplama ve &ccedil;ıkarma işlemi daha y&uuml;ksek &ouml;nceliğe sahip olacak. &Ouml;rneğin&nbsp;<code>&quot;3&quot; . &quot;5&quot; + 7<\/code>&nbsp;ifadesi&nbsp;<code>42<\/code>&nbsp;yerine&nbsp;<code>&quot;312&quot;<\/code>&nbsp;değerine eşit olacak.<\/li>\r\n\t<li>Birden fazla t&uuml;r belirtimi desteği (Union Types) gelecek. &Ouml;rneğin bir class i&ccedil;erisinde&nbsp;<code>int $number<\/code>&nbsp;tanımladığımızı varsaydığımız değişkeni isterseniz&nbsp;<code>int|float $number<\/code>&nbsp;olarak da tanımlayabilirsiniz. B&ouml;ylece bu değişkene hem&nbsp;<code>int<\/code>&nbsp;hem&nbsp;<code>float<\/code>&nbsp;t&uuml;r&uuml;nde değer tanımlanabilir.<\/li>\r\n\t<li>Diziler (array) negatif index ile başlatılabilecek. &Ouml;rneğin:&nbsp;<code>$coord[-4] = ...<\/code><\/li>\r\n<\/ul>\r\n\r\n<p>PHP&rsquo;nin gelişimi s&uuml;rd&uuml;k&ccedil;e, PHP 8.0 i&ccedil;in planlanan yeni &ouml;zellikler tartışılmaya ve &ccedil;ıkartılmaya başlanacaktır. &Ccedil;ıkış tarihi hen&uuml;z kesinleşmiş olmasa da 2021&rsquo;den &ouml;nce &ccedil;ıkmayacağı a&ccedil;ıklandı. Yeni gelişmeler olduk&ccedil;a yazıyı g&uuml;ncellemeye devam edeceğim. Şimdilik bu kadar.<\/p>","kategori_id":"1","etiketler":"php,php8,jit","aktif":"1","sira":"28","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:37","updated_at":"2020-01-13 15:04:37"},
    {"id":"2","baslik":"Temiz Kod Yazımı","url":"temiz_kod_yazimi","icerik":"<h3><strong>Mantıklı ve anlamlı değişken isimleri kullanın.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$ymdstr = $moment-&gt;format('y-m-d');<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$currentDate = $moment-&gt;format('y-m-d');<\/code><\/pre>\r\n\r\n<h3><strong>Aynı değişken t&uuml;rleri i&ccedil;in aynı kelime hazinesi kullanın.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">getUserInfo();\r\ngetUserData();\r\ngetUserRecord();\r\ngetUserProfile();<\/code><\/pre>\r\n\r\n<ol>\r\n<\/ol>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">getUser();<\/code><\/pre>\r\n\r\n<h3><strong>Aranabilen isimler kullanın.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$result = $serializer-&gt;serialize($data, 448); \/\/ What the heck is 448 for?<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$json = $serializer-&gt;serialize($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);<\/code><\/pre>\r\n\r\n<p>-----<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">if ($user-&gt;access &amp; 4) {\r\n    \/\/ What the heck is 4 for?\r\n}<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class User{\r\n    const ACCESS_READ = 1;\r\n    const ACCESS_CREATE = 2;\r\n    const ACCESS_UPDATE = 4;\r\n    const ACCESS_DELETE = 8;\r\n}\r\nif ($user-&gt;access &amp; User::ACCESS_UPDATE) {\r\n    \/\/ do edit ...\r\n}<\/code><\/pre>\r\n\r\n<h3><strong>Gereksiz i&ccedil;erikleri ekleme.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nclass Car{\r\n    public $carMake;\r\n    public $carModel;\r\n    public $carColor;\r\n\r\n    \/\/...\r\n}\r\n<\/code><\/pre>\r\n\r\n<h4>yerine,<\/h4>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nclass Car{\r\n    public $make;\r\n    public $model;\r\n    public $color;\r\n\r\n    \/\/...\r\n}\r\n<\/code><\/pre>\r\n\r\n<h3><strong>2 veya daha az fonksiyon parametresi kullanın.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nfunction createMenu($title, $body, $buttonText, $cancellable) {\r\n    \/\/ ...\r\n}\r\n<\/code><\/pre>\r\n\r\n<h4>yerine,<\/h4>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nclass MenuConfig{\r\n    public $title;\r\n    public $body;\r\n    public $buttonText;\r\n    public $cancellable = false;\r\n}\r\n\r\n$config = new MenuConfig();\r\n$config-&gt;title = 'Foo';\r\n$config-&gt;body = 'Bar';\r\n$config-&gt;buttonText = 'Baz';\r\n$config-&gt;cancellable = true;\r\n\r\nfunction createMenu(MenuConfig $config) {\r\n    \/\/ ...\r\n}\r\n<\/code><\/pre>\r\n\r\n<h3><strong>Fonksiyonalr tek birşey olmalıdır.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nfunction emailClients($clients) {\r\n    foreach ($clients as $client) {\r\n        $clientRecord = $db-&gt;find($client);\r\n        if ($clientRecord-&gt;isActive()) {\r\n            email($client);\r\n        }\r\n    }\r\n}\r\n<\/code><\/pre>\r\n\r\n<h4>yerine,<\/h4>\r\n\r\n<pre>\r\n<code class=\"language-php\">function emailClients($clients) {\r\n    $activeClients = activeClients($clients);\r\n    array_walk($activeClients, 'email');\r\n}\r\n\r\nfunction activeClients($clients) {\r\n    return array_filter($clients, 'isClientActive');\r\n}\r\n\r\nfunction isClientActive($client) {\r\n    $clientRecord = $db-&gt;find($client);\r\n    return $clientRecord-&gt;isActive();\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Daha fazla detay ve i&ccedil;erik i&ccedil;in;&nbsp;<a href=\"https:\/\/github.com\/jupeter\/clean-code-php\/blob\/master\/README.md\" target=\"_blank\">clean-code<\/a><\/p>\r\n","kategori_id":"1","etiketler":"laravel,php,mvc,composer,framework","aktif":"1","sira":"30","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:37","updated_at":"2020-01-13 15:04:37"},
    {"id":"3","baslik":"20 Laravel Eloquent İpuçları","url":"20-laravel-eloquent-ipuclari","icerik":"<h3>1. Increments ve Decrements<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$article = Article::find($article_id);\r\n$article-&gt;read_count++;\r\n$article-&gt;save();\r\n<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$article = Article::find($article_id);\r\n$article-&gt;increment('read_count');\r\n<\/code><\/pre>\r\n\r\n<p>veya<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Article::find($article_id)-&gt;increment('read_count');\r\nArticle::find($article_id)-&gt;increment('read_count', 10); \/\/ +10\r\nProduct::find($produce_id)-&gt;decrement('stock'); \/\/ -1\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>2. XorY metodları<\/h3>\r\n\r\n<p>Eloquent iki metodu birleştiren bika&ccedil; metodu var.<\/p>\r\n\r\n<p><strong>&Ouml;rnek 1<\/strong>&nbsp;&ndash;&nbsp;<code>findOrFail()<\/code>:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::find($id);\r\nif (!$user) { abort (404); }\r\n<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::findOrFail($id);\r\n<\/code><\/pre>\r\n\r\n<p><strong>&Ouml;rnek 2<\/strong>&nbsp;&ndash;&nbsp;<code>firstOrCreate()<\/code>:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::where('email', $email)-&gt;first();\r\nif (!$user) {\r\n  User::create([\r\n    'email' =&gt; $email\r\n  ]);\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::firstOrCreate(['email' =&gt; $email]);\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>3. Model boot() metodu<\/h3>\r\n\r\n<p>Eloquent modelinde varsayılan davranışı değiştirmek i&ccedil;in&nbsp;<code>boot()<\/code>&nbsp;metodu vardır.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class User extends Model{\r\n    public static function boot(){\r\n        parent::boot();\r\n        static::updating(function($model){\r\n            \/\/ do some logging\r\n            \/\/ override some property like $model-&gt;something = transform($something);\r\n        });\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p><a href=\"https:\/\/github.com\/webpatser\/laravel-uuid\" target=\"_blank\">UUID field<\/a>&nbsp;alanını oluşturmak istediğimizi d&uuml;ş&uuml;nelim.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public static function boot(){\r\n  parent::boot();\r\n  self::creating(function ($model) {\r\n    $model-&gt;uuid = (string)Uuid::generate();\r\n  });\r\n}<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>4. Koşullu ilişkilendirme ve sıralama<\/h3>\r\n\r\n<p>İlişkiyi oluşturmanın tipik yolu,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function users() {\r\n    return $this-&gt;hasMany('App\\User');    \r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Bu noktada <em>where <\/em>ve <em>orderby <\/em>ifadelerini kullanabiliriz. &Ouml;rnek olarak kullanıcılar i&ccedil;in spesifik ilişki veya email&#39;e g&ouml;re sıralamak istiyorsak,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function approvedUsers() {\r\n    return $this-&gt;hasMany('App\\User')-&gt;where('approved', 1)-&gt;orderBy('email');\r\n}\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>5. Model &ouml;zellikleri: timestamps, appends vb.<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">class User extends Model {\r\n    protected $table = 'users';\r\n    protected $fillable = ['email', 'password']; \/\/ which fields can be filled with User::create()\r\n    protected $dates = ['created_at', 'deleted_at']; \/\/ which fields will be Carbon-ized\r\n    protected $appends = ['field1', 'field2']; \/\/ additional values returned in JSON\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>ve<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected $primaryKey = 'uuid'; \/\/ it doesn't have to be \"id\"\r\npublic $incrementing = false; \/\/ and it doesn't even have to be auto-incrementing!\r\nprotected $perPage = 25; \/\/ Yes, you can override pagination count PER MODEL (default 15)\r\nconst CREATED_AT = 'created_at';\r\nconst UPDATED_AT = 'updated_at'; \/\/ Yes, even those names can be overridden\r\npublic $timestamps = false; \/\/ or even not used at all\r\n<\/code><\/pre>\r\n\r\n<p><a href=\"https:\/\/github.com\/laravel\/framework\/blob\/5.6\/src\/Illuminate\/Database\/Eloquent\/Model.php\">Abstract Model class<\/a>&nbsp;adresinde daha fazlasını bulabilirsiniz.<\/p>\r\n\r\n<hr \/>\r\n<h3>6. &Ccedil;oklu kayıt bulma<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::find(1);\r\n<\/code><\/pre>\r\n\r\n<p><em>find <\/em>komutu i&ccedil;erisine birden fazla id g&ouml;nderebiliyoruz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = User::find([1,2,3]);\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>7. WhereX<\/h3>\r\n\r\n<p>Controller sınıfımızdan view dosyalarımıza bir değer g&ouml;ndermek istediğimiz zaman nasıl <em>with <\/em>komutu yerine <em>withDeger <\/em>komutunu kullanabiliyorsak aynı işlemi <em>where <\/em>i&ccedil;inde kullanabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = User::where('approved', 1)-&gt;get();\r\n<\/code><\/pre>\r\n\r\n<p>yerine<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = User::whereApproved(1)-&gt;get(); \r\n<\/code><\/pre>\r\n\r\n<p>Ayrıca, aynı yapıyı tarih işlemleri i&ccedil;inde yapabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">User::whereDate('created_at', date('Y-m-d'));\r\nUser::whereDay('created_at', date('d'));\r\nUser::whereMonth('created_at', date('m'));\r\nUser::whereYear('created_at', date('Y'));\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>8. Order by ilişkisi<\/h3>\r\n\r\n<p>&Ouml;rnek olarak db de en son g&uuml;ncellenen yazıları en &uuml;ste taşımak istersek bu yapıyı kullanabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function latestPost(){\r\n    return $this-&gt;hasOne(\\App\\Post::class)-&gt;latest();\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Controller dosyamızda,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = Topic::with('latestPost')-&gt;get()-&gt;sortByDesc('latestPost.created_at');\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>9. Eloquent::when() &ndash; no more if-else&rsquo;s<\/h3>\r\n\r\n<p>&Ccedil;oğumuz aşağıdaki gibi &ldquo;if-else&rdquo; sorgusu yazarız.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">if (request('filter_by') == 'likes') {\r\n    $query-&gt;where('likes', '&gt;', request('likes_amount', 0));\r\n}\r\nif (request('filter_by') == 'date') {\r\n    $query-&gt;orderBy('created_at', request('ordering_rule', 'desc'));\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Ama daha iyi bir yapı var;&nbsp;<code>when()<\/code>:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$query = Author::query();\r\n$query-&gt;when(request('filter_by') == 'likes', function ($q) {\r\n    return $q-&gt;where('likes', '&gt;', request('likes_amount', 0));\r\n});\r\n$query-&gt;when(request('filter_by') == 'date', function ($q) {\r\n    return $q-&gt;orderBy('created_at', request('ordering_rule', 'desc'));\r\n});\r\n<\/code><\/pre>\r\n\r\n<p>Daha kısa veya hoş g&ouml;r&uuml;lmeyebilir ama &ccedil;ok daha g&uuml;&ccedil;l&uuml; bir yapıdır.<\/p>\r\n\r\n<pre>\r\n<code>$query = User::query();\r\n$query-&gt;when(request('role', false), function ($q, $role) { \r\n    return $q-&gt;where('role_id', $role);\r\n});\r\n$authors = $query-&gt;get();\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>10. BelongsTo&nbsp;<\/h3>\r\n\r\n<p>&Ouml;rneğin Post ve Author tablomuz ilişkili,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">{{ $post-&gt;author-&gt;name }}\r\n<\/code><\/pre>\r\n\r\n<p>Peki ya Author silindi yada bir şekilde ayarlanmadı. &ldquo;<em>property of non-object<\/em>&rdquo; diye bir hata alırız. Bunu &ouml;n&uuml;ne ge&ccedil;ebiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">{{ $post-&gt;author-&gt;name ?? '' }}\r\n<\/code><\/pre>\r\n\r\n<p>Ama ilişki tanımlama sırasında bunu default olarak yapabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function author(){\r\n    return $this-&gt;belongsTo('App\\Author')-&gt;withDefault();\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Bu &ouml;rnekte, yazar eklenmemiş ise&nbsp;<code>author()<\/code>&nbsp;ilişkisi <code>App\\Author<\/code>&nbsp;modelinden boş gelecektir. B&ouml;ylece, varsayılan olarak author kısmını tanımlayabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function author(){\r\n    return $this-&gt;belongsTo('App\\Author')-&gt;withDefault([\r\n        'name' =&gt; 'Yazar Tanımlanmamış'\r\n    ]);\r\n}\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>11. Order by Mutator<\/h3>\r\n\r\n<p>B&ouml;yle bir kodumuz olduğunu d&uuml;ş&uuml;nelim.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">function getFullNameAttribute(){\r\n  return $this-&gt;attributes['first_name'] . ' ' . $this-&gt;attributes['last_name'];\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Şimdi de <code>full_name e&nbsp;<\/code>g&ouml;re sıralayalım? &Ccedil;alışmayacaktır.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$clients = Client::orderBy('full_name')-&gt;get(); \/\/ doesn't work\r\n<\/code><\/pre>\r\n\r\n<p>&Ccedil;&ouml;z&uuml;m basit, sıralamayı değerler bize d&ouml;nd&uuml;kten sonra yapalım.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$clients = Client::get()-&gt;sortBy('full_name'); \/\/ works!\r\n<\/code><\/pre>\r\n\r\n<p>Note: Fonksiyon ismine dikkat:&nbsp;<strong>orderBy<\/strong>&nbsp;değil&nbsp;<strong>sortBy<\/strong>.<\/p>\r\n\r\n<hr \/>\r\n<h3>12. K&uuml;resel kapsamda varsayılan sıralama<\/h3>\r\n\r\n<p><code>User::all()<\/code>&nbsp;kodunda varsayılan olarak <code>name<\/code>&nbsp;alanına g&ouml;re sıralama yapacaktır. <em><code>boot()<\/code><\/em>&nbsp;metoduna d&ouml;nelim ve;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected static function boot(){\r\n    parent::boot();\r\n    \/\/ Order by name ASC\r\n    static::addGlobalScope('order', function (Builder $builder) {\r\n        $builder-&gt;orderBy('name', 'asc');\r\n    });\r\n}\r\n<\/code><\/pre>\r\n\r\n<p><a href=\"https:\/\/laravel.com\/docs\/5.6\/eloquent#query-scopes\" target=\"_blank\">Daha fazlası i&ccedil;in,<\/a>.<\/p>\r\n\r\n<hr \/>\r\n<h3>13. Raw query methods<\/h3>\r\n\r\n<p>Bazen Eloquent&nbsp; durumlarımıza saf sorgular eklememiz gerekli olur şansımıza bunlar i&ccedil;in fonksiyonlar vardır.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/\/ whereRaw\r\n$orders = DB::table('orders')\r\n    -&gt;whereRaw('price &gt; IF(state = \"TX\", ?, 100)', [200])\r\n    -&gt;get();\r\n\r\n\/\/ havingRaw\r\nProduct::groupBy('category_id')-&gt;havingRaw('COUNT(*) &gt; 1')-&gt;get();\r\n\r\n\/\/ orderByRaw\r\nUser::where('created_at', '&gt;', '2016-01-01')\r\n  -&gt;orderByRaw('(updated_at - created_at) desc')\r\n  -&gt;get();\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>14. Replicate: Kopya oluşturma<\/h3>\r\n\r\n<p>Kısaca,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$task = Tasks::find(1);\r\n$newTask = $task-&gt;replicate();\r\n$newTask-&gt;save();\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>15. B&uuml;y&uuml;k tablolar i&ccedil;in chunk() metodu<\/h3>\r\n\r\n<p>K&uuml;&ccedil;&uuml;k par&ccedil;alara b&ouml;lerek &ccedil;alışabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = User::all();\r\nforeach ($users as $user) {\r\n    \/\/ ...\r\n<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">User::chunk(100, function ($users) {\r\n    foreach ($users as $user) {\r\n        \/\/ ...\r\n    }\r\n});\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>16. Create additional things when creating a model<\/h3>\r\n\r\n<p>Artisan komutunu biliyoruz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">php artisan make:model Company\r\n<\/code><\/pre>\r\n\r\n<p>Ama, ilişkili alanları oluşturmak i&ccedil;in 3 adet flag olduğunu biliyor muydunuz?<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">php artisan make:model Company -mcr\r\n<\/code><\/pre>\r\n\r\n<ul>\r\n\t<li>-m, <strong>migration<\/strong><\/li>\r\n\t<li>-c, <strong>controller<\/strong><\/li>\r\n\t<li>-r ,<strong>resourceful&nbsp;<\/strong>dosyalarımızı oluşturmaya yarar.<\/li>\r\n<\/ul>\r\n\r\n<hr \/>\r\n<h3>17. G&uuml;ncelleme yaptığımızda updated_at s&uuml;tunu&nbsp;override<\/h3>\r\n\r\n<p><em><code>-&gt;save()<\/code><\/em>&nbsp;metodun parametre alabiliyor.&nbsp;Sonu&ccedil; olarak, ilgili kısmı g&uuml;ncellememesi i&ccedil;in parametre olarak belirtebiliyoruz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$product = Product::find($id);\r\n$product-&gt;updated_at = '2019-01-01 10:00:00';\r\n$product-&gt;save(['timestamps' =&gt; false]);\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>18. update() &ccedil;ıktısı?<\/h3>\r\n\r\n<p>Hi&ccedil; d&uuml;ş&uuml;nd&uuml;n&uuml;z m&uuml; kod ger&ccedil;ekten hangi değerleri g&ouml;nderiyor.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$result = $products-&gt;whereNull('category_id')-&gt;update(['category_id' =&gt; 2]);\r\n<\/code><\/pre>\r\n\r\n<p>Cevap, etkilenen satırlardır. Dolayısıyla, ka&ccedil; satırın etkilendiğini kontrol etmeniz gerekiyorsa, başka bir şeyi aramanıza gerek yoktur; update () y&ouml;ntemi bu sayıyı sizin yerinize d&ouml;nd&uuml;r&uuml;r.<\/p>\r\n\r\n<hr \/>\r\n<h3>19. Parantezleri bir Eloquent sorgusuna d&ouml;n&uuml;şt&uuml;r&uuml;n<\/h3>\r\n\r\n<p>SQL sorgunuzda and-or kısımlarını karıştırabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">... WHERE (gender = 'Male' and age &gt;= 18) or (gender = 'Female' and age &gt;= 65)\r\n<\/code><\/pre>\r\n\r\n<p>Yanlış,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$q-&gt;where('gender', 'Male');\r\n$q-&gt;orWhere('age', '&gt;=', 18);\r\n$q-&gt;where('gender', 'Female');\r\n$q-&gt;orWhere('age', '&gt;=', 65);\r\n<\/code><\/pre>\r\n\r\n<p>Karışık olabilir ama doğrusu,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$q-&gt;where(function ($query) {\r\n    $query-&gt;where('gender', 'Male')\r\n        -&gt;where('age', '&gt;=', 18);\r\n})-&gt;orWhere(function($query) {\r\n    $query-&gt;where('gender', 'Female')\r\n        -&gt;where('age', '&gt;=', 65); \r\n})\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>20. &Ccedil;oklu parametreler ile&nbsp;orWhere<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$q-&gt;where('a', 1);\r\n$q-&gt;orWhere('b', 2);\r\n$q-&gt;orWhere('c', 3);\r\n<\/code><\/pre>\r\n\r\n<p>Bu şekilde de kullanabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$q-&gt;where('a', 1);\r\n$q-&gt;orWhere(['b' =&gt; 2, 'c' =&gt; 3]);\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>Ref :&nbsp;<a href=\"https:\/\/laravel-news.com\/eloquent-tips-tricks\" target=\"_blank\">laravel-news.com<\/a><\/p>","kategori_id":"2","etiketler":"php,laravel,Eloquent","aktif":"1","sira":"7","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:37","updated_at":"2020-01-16 12:18:33"},
    {"id":"4","baslik":"NodeJS Nedir?","url":"nodejs-nedir","icerik":"<p>Yazdığımız uygulamalar y&uuml;ksek ihtimalle &ccedil;ok kullanıcılı uygulamalardır. &Ccedil;oklu kullanıcılı uygulamalar genelde Sunucu(Server)\/İstemci(Client) mantığı ile yazılır. Sunucu yani &ccedil;evrim i&ccedil;i &ccedil;alışan, t&uuml;m verilerin tutulduğu merkezi bir sistem. İstemci yani bu merkezi sisteme bağlı &ccedil;alışan merkezi sisteme veri iletimi yapan, kullanıcıyla etkileşimi sağlayan yan program.<\/p>\r\n\r\n<p><img alt=\"serverside-clientside\" src=\"\/upload\/files\/serverside-clientside%20(1).png\" style=\"height:260px; width:916px\" \/><\/p>\r\n\r\n<p>G&uuml;n&uuml;m&uuml;z modern uygulamalar da bu istemci genelde tarayıcıdır(browser). Tarayıcı &uuml;zerinden kullanılan uygulamalar genelde Web Uygulaması olarak adlandırılır. Kullanıcı uygulamayı kullanmak istediğinde tarayıcıdan sunucuya bir istek g&ouml;nderir, sunucu isteğe g&ouml;re uygulama i&ccedil;erisinde kendi anlayacağı b&ouml;l&uuml;mleri işleyerek kullanıcıya uygun &ccedil;ıktıyı &uuml;retir ve tarayıcıya g&ouml;nderir. Tarayıcı aldığı &ccedil;ıktıyı kendi i&ccedil;erisinde yorumlar ve kullanıcıya uygun &ccedil;ıktıyı &uuml;retir. Sonra kullanıcı gerektiği yerde tekrar sunucuya istek g&ouml;nderir, tekrar cevap gelir&hellip; Genel olarak tarayıcı bazlı Sunucu\/İstemci mimarisi basit anlatımla bu şekilde &ccedil;alışır.<\/p>\r\n\r\n<p>Burada &ouml;nemli bir kısım sunucunun kendi anladığı kısımları yani sunucu tabanlı diller(C#, Java, Php, Python, Ruby&hellip;) ile yazılmış kısımları &ccedil;alıştırması, tarayıcının da kendi anladığı yani tarayıcı dilleri(HTML,Css,Javascript, Dart&hellip; ) ile yazılmış kısımları &ccedil;alıştırmasıdır. Sunucu tarafında &ccedil;alışan koda&nbsp;<strong>Backend<\/strong>, tarayıcı &uuml;zerinde &ccedil;alışan koda&nbsp;<strong>Frontend&nbsp;<\/strong>denir. Web uygulamarı yazarken Backend ve Frontend kodları aynı proje i&ccedil;erisinde kullanırız. Hangi iş mantığı hangi kısımda &ccedil;alışacaksa ona g&ouml;re ya Backend&rsquo;de yada Frontend&rsquo;de yazılır.<\/p>\r\n\r\n<h1>Javascript<\/h1>\r\n\r\n<p>Frontend dillerinden en &ouml;nemlilerinden bir tanesi Javascript&rsquo;tir. Web tarayıcılarının etkin bir şekilde kullanılması i&ccedil;in geliştirilmiştir. Kullanıcıyla etkileşimin artırılması, iş y&uuml;k&uuml;n&uuml;n sunuculardan istemcilere taşınması, daha g&ouml;rsel animasyonlu web siteleri\/ web uygulamaları geliştirilmesi gibi kullanım alanları vardır. 1995 yıllarında &ccedil;ıktı. Java diliyle isim benzerliği dışında hi&ccedil;bir alakası yoktur. Javasvript standartları Ecma International firması tarafından ECMASCRIPT standartlarıyla belirlenir. G&uuml;n&uuml;m&uuml;zde kullanılan ECMASCRIPT standardı 5.1 s&uuml;r&uuml;m&uuml;d&uuml;r. Ve bu standart Javascript 1.8.1 ile desteklenmektedir. Ancak şu aralar ECMASCRIPT 6 standardı &uuml;zerinde &ccedil;alışmalar devam etmektedir.<\/p>\r\n\r\n<p>Javascript prototip bazlı nesne y&ouml;nelimli programlama, fonksiyonel programlama, imparatif programlama paradigmalarını destekler. Genellikle tarayıcılarda kullanılır. Google&rsquo;ın Chrome tarayıcısını ve bu tarayıcı i&ccedil;erisindeki V8 Javascript motorunu geliştirmesiyle Javascript performansında ve gelişimde b&uuml;y&uuml;k y&uuml;kselişler oldu. Bu Javascript motorunun g&uuml;c&uuml; sayesinde daha &ouml;nce yapılamayan bir&ccedil;ok uygulama yapıldı. Ve ilk defa Javascript frontend&rsquo;den &ccedil;ıkarak Backend tarafına ge&ccedil;iş yaptı ve Nodejs doğdu.<\/p>\r\n\r\n<h1>NodeJS<\/h1>\r\n\r\n<p>NodeJs 2009 yılında Joyent firmasında &ccedil;alışan Ryan Dahl tarafından geliştirilen Javascript &Ccedil;alışma Ortamıdır.(Javascript Runtime Enviroment). Joyent firmasının desteği ve V8 motorunun g&uuml;c&uuml; ile Dahl Javascript&rsquo;i Backend kısmına taşıdı.<\/p>\r\n\r\n<blockquote>\r\n<p>&ldquo;Nodejs backend tarafında &ccedil;alışan, javascript tabanlı scriptleri yorumlanabilen ve &ccedil;alıştırabilen, hızlı, &ouml;l&ccedil;eklenebilir &nbsp;network uygulamaları geliştirmeyi sağlayan bir &ccedil;alışma zamanı ortamıdır(runtime enviroment).&rdquo;<\/p>\r\n<\/blockquote>\r\n\r\n<p>Javascript&rsquo;in backend&rsquo;e(server side) taşınması ile developerlar tek dil bilerek hem frontend hem backend kod yazabilir hale geldiler. Frontend de kullanılan javascript k&uuml;t&uuml;phanelerinden bazıları backend tarafında kullanılabilir hale geldi.<\/p>\r\n\r\n<p>Javascript&rsquo;in doğal Non Block mimarisi sayesinde backend tarafında &ouml;l&ccedil;eklenebilir uygulamalar daha kolay bir şekilde yazılabilir hale geldi. Nodejs&rsquo;in &ouml;l&ccedil;eklenebilir uygulamalardaki başarısı sayesinde kullanıcı sayısı milyonlarla ifade edilen b&uuml;y&uuml;k siteler nodejs kullanmaya başladı. &Uuml;stelik bunu single thread olarak yapabiliyor.<\/p>\r\n\r\n<blockquote>\r\n<p>&ldquo;&Ouml;l&ccedil;eklenebilirlik, bir uygulamanın aynı anda birden &ccedil;ok kullanıcıya takılmadan cevap verebilir halde olmasıdır.&rdquo;<\/p>\r\n<\/blockquote>\r\n\r\n<p>Peki bunu nasıl başarıyor? Nodejs olay bazlı(event-driven) Non-Blocking yapısını Event loop denilen bir mimariyle sağlıyor. (İlerde detayına gireceğiz.) Bu mimariyle tek bir thread(single thread) ile asenkron &ccedil;alışabilmektedir.<\/p>\r\n\r\n<p>Bunların dışında Nodejs&rsquo;in en b&uuml;y&uuml;k avantajlarından bir taneside mod&uuml;ler yapısı ve bu yapıyı destekleyen paket y&ouml;netim sistemi: npm(nodejs package manager). Nodejs npm ve npm yi destekleyen topluluk sayesinde hemen hemen her işimizi paketler sayesinde halledebiliyoruz. Şuan npm &uuml;zerindeki paket sayısı yaklaşık 250000 civarında. E okadar paket i&ccedil;erisinde mutlaka işimize yarayan bir paket vardır :). Tabi bu kadar paket Nodejs&rsquo;in arkasında &ccedil;ok b&uuml;y&uuml;k bir topluluğun olduğunuda g&ouml;steriyor. Bu kadar b&uuml;y&uuml;k bir topluluğun i&ccedil;erisinde sorunları &ccedil;&ouml;zmekte kolay.<\/p>","kategori_id":"3","etiketler":"nodejs,node,js","aktif":"1","sira":"32","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:37","updated_at":"2020-01-13 15:04:37"},
    {"id":"5","baslik":"PHP 7.4 İle Gelen Yenilikler","url":"php-7.4-ile-gelen-yenilikler","icerik":"<pre>\r\n<code class=\"language-ruby\">$arrayA = [1, 2, 3];\r\n\r\n$arrayB = [4, 5];\r\n\r\n$result = [0, ...$arrayA, ...$arrayB, 6 ,7];\r\n\r\n\/\/ [0, 1, 2, 3, 4, 5, 6, 7]<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"1","etiketler":"php,php7.4","aktif":"1","sira":"31","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:37","updated_at":"2020-01-13 15:04:37"},
    {"id":"6","baslik":"Kodunuzdaki Hataları Önleme, Algılama ve Düzeltme için 7 İpucu","url":"kodunuzdaki-hatalari-onleme-algilama-ve-duzeltme-icin-7-ipucu","icerik":"<p>Projelerimize eklediğimiz her kod satırıyla, karmaşıklıklarını ve uygunsuz zamanlarda ortaya &ccedil;ıkabilecek hataların ortaya &ccedil;ıkma olasılığını arttırıyoruz.&nbsp;Bu korkun&ccedil; durumları &ouml;nlemek i&ccedil;in, daha iyi kod yazmak i&ccedil;in yedi ipucunu g&ouml;zden ge&ccedil;irelim:<\/p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h2>Değişkenlerinize, fonksiyonlarınıza, parametrelerinize ve metotlarınıza a&ccedil;ıklayıcı adlar atayın:<\/h2>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Kod yalnızca bir kez yazılır, ancak diğer geliştiriciler ve siz tarafından bir&ccedil;ok kez okunur ve yorumlanır. Bu iki satırı karşılaştıralım. Hangisini anlamak daha kolay?<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$event-&gt;add($req-&gt;q);\r\n<\/code><\/pre>\r\n\r\n<pre>\r\n<code class=\"language-php\">$event-&gt;addTickets($request-&gt;quantity);\r\n<\/code><\/pre>\r\n\r\n<p>İlk satırda bir yazım hatası vardır, <code>add<\/code>&nbsp;methodu neyin eklendiği konusunda net değildir, <code>$req<\/code> değişkeni yeterince a&ccedil;ık değildir ve q&#39;nun ne anlama geldiğini anlamak zordur.<\/p>\r\n\r\n<p>İkinci &ouml;rnek, geliştirici olmayanlar i&ccedil;in bile anlaşılması kolay olabilir.<\/p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h2>PHP i&ccedil;in PSR-2 gibi bir standart kullanın<\/h2>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Kod yazmanın &ouml;nemini asla d&uuml;zenli ve tutarlı bir şekilde k&uuml;&ccedil;&uuml;msemeyin, &ccedil;&uuml;nk&uuml; bu sorunları daha hızlı tespit etmenizi sağlayacaktır. Aşağıdaki iki &ouml;rneği ele alalım:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function addTickets($quantity)\r\n{\r\n    foreach (range(1, $quantity) as $i){\r\n      $code = Code::generate();}\r\n    $this-&gt;tickets()-&gt;create(\r\n     [\r\n      'code' =&gt; $code,\r\n    ]);\r\n}\r\n<\/code><\/pre>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function addTickets($quantity){\r\n    foreach (range(1, $quantity) as $i) {\r\n        $code = Code::generate();\r\n    }\r\n    $this-&gt;tickets()-&gt;create([\r\n        'code' =&gt; $code,\r\n    ]);\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Her iki kod bloğu da aynı hataya sahiptir: Her ikisi de N&#39;yi oluşturmaları gerektiğinde sadece bir ticket oluştururlar. Ancak sorunu hangi blokta daha hızlı tespit ettiniz? Şimdi yanlış formatta karmaşık bir kodla uğraşmanın sonu&ccedil;larını hayal edin.<\/p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h2>Ge&ccedil;ici değişken sayısını azaltın<\/h2>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Algoritmalarda &ouml;ğrendiğimiz ilk kavramlardan biri, ge&ccedil;ici değişkenlerin nasıl bildirileceği ve kullanılacağı olsa da, kodu okumayı ve s&uuml;rd&uuml;rmeyi zorlaştırabilir: Aşağıdaki &ouml;rnekleri d&uuml;ş&uuml;n&uuml;n:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$contact                           = array();\r\n$contact['firstname']              = $user-&gt;first_name;\r\n$contact['surname']                = $user-&gt;last_name;\r\n$contact['id']                     = $user-&gt;id;\r\n$contact_emails                    = array();\r\n$contact_email                     = array();\r\n$contact_email['email']            = $user-&gt;email;\r\n$contact_emails[]                  = $contact_email;\r\n$contact['emails']                 = $contact_emails;\r\n\r\n$this-&gt;create('contact', $contact);\r\n<\/code><\/pre>\r\n\r\n<pre>\r\n<code class=\"language-php\">$contact = [\r\n    'id' =&gt; $user-&gt;id,\r\n    'firstname' =&gt; $user-&gt;first_name,\r\n    'surname' =&gt; $user-&gt;last_name,\r\n    'emails' =&gt; [\r\n        [\r\n            'email' =&gt; $user-&gt;email,\r\n        ],\r\n    ],\r\n];\r\n\r\n$this-&gt;create('contact', $contact);\r\n<\/code><\/pre>\r\n\r\n<p>Hangi &ouml;rneği anlamak daha kolay? Bu arada, eşit sembolleri hizalamak k&ouml;t&uuml; bir uygulamadır ve bu sadece PSR-2&#39;ye karşı değil; ayrıca kodun bakımını da zorlaştırabilir. Bu nedenle, bilet &ouml;rneğimize geri d&ouml;nersek, <code>code&nbsp;<\/code>değişkenini ortadan kaldırır ve bunun yerine kodu satır i&ccedil;ine alırsak &ouml;rnek geliştirilebilir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function addTickets($quantity){\r\n    foreach (range(1, $quantity) as $i) {\r\n        $this-&gt;tickets()-&gt;create([\r\n            'code' =&gt; Code::generate(6),\r\n        ]);\r\n    }\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Bununla birlikte, bazı senaryolarda, yerel değişkenlerin kullanılması kodun netliğini artırabilir, &ouml;rneğin:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">function calculateCode($price, $quantity, $deliveryCost){\r\n    $subtotal = $price * $quantity;\r\n    if ($subtotal &lt; 30) {\r\n        $subtotal += $deliveryCost;\r\n    }\r\n    return $subtotal;\r\n}<\/code><\/pre>\r\n\r\n<p>Daha net olması i&ccedil;in;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">function calculateTotal($price, $quantity, $deliveryCost){\r\n    if ($price * $quantity &lt; 30) {\r\n        return $price * $quantity + $deliveryCost;\r\n    }\r\n    return $price * $quantity;\r\n}<\/code><\/pre>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h2>&ldquo;Sihirli sayılar&rdquo; kullanmayın<\/h2>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>30 Lira&#39;nın&nbsp;altındaki siparişlerin teslimat maliyeti olacaksa, aşağıdaki gibi bir &ouml;zellik, sabit veya yapılandırma değişkenine sahip bilginin a&ccedil;ıklanması gerekir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">if ($subtotal &lt; DELIVERY_COST_THRESHOLD) {\r\n    $subtotal += $deliveryCost;\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Bu şekilde niyetlerimizi ortaya koyarız ve projenin diğer b&ouml;l&uuml;mlerindeki sabitleri de yeniden kullanabiliriz. Teslim eşiğini değiştirmemiz gerekirse, kodumuzda yalnızca bir satırı g&uuml;ncellememiz gerekecek, &ccedil;oğaltmayı azaltarak, daha &ouml;nce sihirli numarayı kullanan yerlerden birini g&uuml;ncellemeyi unutma olasılığını da azaltıyoruz.<\/p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h2>B&ouml;l ve fethet<\/h2>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Bir&ccedil;ok &ouml;rnek ve kod senaryosu, kodu her biri farklı bir sorumluluğa sahip k&uuml;&ccedil;&uuml;k y&ouml;ntemlerle ayırarak geliştirilebilir. &Ouml;rneğin: Yeni <code>getContactInfo<\/code>&nbsp;y&ouml;ntemi kullanıcıların iletişim bilgilerini i&ccedil;eren bir dizi d&ouml;nd&uuml;r&uuml;r:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$this-&gt;create('contact', $user-&gt;getContactInfo());\r\n<\/code><\/pre>\r\n\r\n<blockquote>\r\n<p>Nesneye y&ouml;nelik programlama, verileri ve işlevleri tek bir yerde (sınıflar) gruplandırmamızı ister. Diziyi iletişim bilgileriyle birlikte t&uuml;m kullanıcı bilgilerine (<code>User<\/code>&nbsp;modeli) sahip olduğumuz yerde bir araya getireceğiz.<\/p>\r\n<\/blockquote>\r\n\r\n<p>&nbsp;Başka bir &ouml;rnek;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$subtotal = $item-&gt;price * $quantity;\r\n$subtotal = $this-&gt;addDeliveryCost($subtotal);\r\n<\/code><\/pre>\r\n\r\n<p><code>addDeliveryCost<\/code>&nbsp;y&ouml;ntemi, tutarı teslimat maliyetiyle birlikte d&ouml;nd&uuml;r&uuml;r, ancak yalnızca tutar teslimat eşiğini aşmazsa, aksi takdirde orijinal tutarı d&ouml;nd&uuml;r&uuml;r. Şimdi yerel değişkeni silelim;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">return $this-&gt;addDeliveryCost($price * $quantity);\r\n<\/code><\/pre>\r\n\r\n<blockquote>\r\n<p>Bir&ccedil;ok k&uuml;&ccedil;&uuml;k y&ouml;ntemin bildirilmesi ve kullanılması, kodumuzdaki ge&ccedil;ici değişkenlere olan ihtiyacı azaltmanın harika bir yoludur.<\/p>\r\n<\/blockquote>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h2>Varsayılandan basit &ccedil;&ouml;z&uuml;mlere<\/h2>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Daha iyi kod yazacağınıza s&ouml;z veren bir&ccedil;ok &ouml;ğretici, aksi takdirde basit olabilecek kodun nasıl karmaşıklaştırılacağını a&ccedil;ıklar. Bu yazı Laravel ve Eloquent ile &ccedil;alışıyorsanız, bu kodu controllera koymanın yanlış olduğunu s&ouml;yler:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/\/UserController.php\r\nUser::create([\r\n    'name' =&gt; $request-&gt;name,\r\n    'email' =&gt; $request-&gt;email,\r\n    'password' =&gt; bcrypt($request-&gt;password),\r\n]);\r\n<\/code><\/pre>\r\n\r\n<p>Bunun yerine şu şekilde yazmalısınız:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/\/UserController.php\r\n$this-&gt;commandTransport-&gt;handleCommand(\r\n    new UserCreationCommand(\r\n        new UserNameField($request-&gt;name),\r\n        new UserEmailField($request-&gt;email),\r\n        new UserPasswordField(bcrypt($request-&gt;password)),\r\n    )\r\n);\r\n<\/code><\/pre>\r\n\r\n<p>&nbsp;Ve sonra, <code>UserCreationCommandHandler<\/code>&nbsp;sınıfının i&ccedil;inde, kullanıcıyı SOLID ilkelerine aykırı olacağı i&ccedil;in oluşturmazsınız. Bunun yerine bir depo kullanmalısınız:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class UserCreationCommandHandler{\r\n    \/\/...\r\n    public function handle(UserCreationCommand $command){\r\n        $this-&gt;userRepository-&gt;create(\r\n           $command-&gt;name,\r\n           $command-&gt;email,\r\n           $command-&gt;password,\r\n        );\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>&nbsp;Sonunda, <code>UserEloquentRepository&nbsp;<\/code>i&ccedil;inde <code>User::create;<\/code><\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class UserEloquentRepository implements UserRepository{\r\n    \/\/...\r\n    public function create(UserNameField $name, UserEmailField $email, UserPasswordField $password){\r\n      return User::create([\r\n        'name' =&gt; $name-&gt;getValue(),\r\n        'email' =&gt; $email-&gt;getValue(),\r\n        'password' =&gt; bcrypt($password-&gt;getValue()),\r\n      ]);\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>Yarım saatlik bir &ccedil;alışmanın ardından m&uuml;şteri sizi arar ve Kullanıcı modeline başka bir alan eklemenizi ister. Hangi &ouml;rneğin d&uuml;zeltilmesi daha uzun s&uuml;recek? Hangi durumda bir hata getirmeniz daha olasıdır? (bir alanı bir y&ouml;ntemden diğerine ge&ccedil;irmeyi unutmak gibi). Bir d&uuml;zine aray&uuml;z ve sınıf hata yapmanıza engel olmayacak. Her durumda, kodunuzu &ccedil;ok dikkatli bir şekilde test etmeniz gerekir ve testden bahsetmek gerekirse;<\/p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h2>Otomatik testler yazma<\/h2>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Muhasebeciler, t&uuml;m işlemlere iki kez girmelerini gerektiren bir y&ouml;ntem olan &ldquo;&Ccedil;ift girişli defter tutma&rdquo; adlı bir uygulamayı takip eder. Unit testleri yazmak, her testi tanımlamak i&ccedil;in bir tane olmak &uuml;zere kodu iki kez yazmamızı gerektirir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">function test_order_without_delivery_cost(){\r\n    $order = new Order;\r\n    $order-&gt;addItem(new Item(['price' =&gt; 20]), 5);\r\n\r\n    $expectedTotal = 20 * 5;\r\n    $this-&gt;assertSame($expectedTotal, $order-&gt;getTotal());\r\n}\r\nfunction test_order_with_delivery_cost(){\r\n    $order = new Order;\r\n    $order-&gt;addItem(new Item(['price' =&gt; 20]), 1);\r\n\r\n    $expectedTotal = 20 + DELIVERY_COST;\r\n    $this-&gt;assertSame($expectedTotal, $order-&gt;getTotal());\r\n}<\/code><\/pre>","kategori_id":"1","etiketler":"php,prevent,detect,fix,bugs","aktif":"1","sira":"29","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"7","baslik":"Laravel için 8 Timestamps İpucusu","url":"laravel-icin-8-timestamps-ipucusu","icerik":"<h2>1. Zaman Damgalarını Devre Dışı Bırak<\/h2>\r\n\r\n<p>DB tablonuzda bu alanlar yoksa ve <strong>Model::create($arrayOfValues);<\/strong> gibi bir şey yapmaya &ccedil;alışacaksınız; - SQL hatası alırsınız. Laravel, created_at\/updated_at dosyasını otomatik olarak doldurmaya &ccedil;alışır ve bulamaz. Bu otomatik zaman damgalarını devre dışı bırakmak i&ccedil;in, Mevcut Modelinizde bir property eklemeniz gerekir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Role extends Model{\r\n    public $timestamps = FALSE;\r\n}<\/code><\/pre>\r\n\r\n<h2>2. Zaman Damgası S&uuml;tun Adlarını Değiştirme<\/h2>\r\n\r\n<p>Laravel olmayan bir veritabanıyla &ccedil;alışıyorsanız ve zaman damgası s&uuml;tunlarınız farklı adlandırılırsa ne olur? Belki, <strong>create_time <\/strong>ve <strong>update_time <\/strong>var. Neyse ki, bunları modelde de belirleyebilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Rol extends Model{\r\n    const CREATED_AT = 'yaratma_zamanı';\r\n    const UPDATED_AT = 'guncelleme_zamanı'; \r\n}<\/code><\/pre>\r\n\r\n<h2>3. Zaman Damgası Tarih \/ Saat Bi&ccedil;imini Değiştir<\/h2>\r\n\r\n<p>Burada sadece resmi <a href=\"https:\/\/laravel.com\/docs\/master\/eloquent-mutators#date-mutators\" rel=\"noreferrer noopener\" target=\"_blank\">Laravel<\/a>&nbsp;belgelerini alıntılayacağım: Varsayılan olarak, zaman damgaları <code>&#39;Y-m-d H:i:s&#39;<\/code> olarak bi&ccedil;imlendirilir. Zaman damgası bi&ccedil;imini &ouml;zelleştirmeniz gerekiyorsa, modelinizde <code>$dateFormat<\/code>&nbsp;&ouml;zelliğini ayarlayın. Bu &ouml;zellik, tarih &ouml;zniteliklerinin veritabanında nasıl depolanacağını ve model bir diziye veya JSON&#39;a serileştirildiğinde bi&ccedil;imlerini belirler:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Flight extends Model{\r\n    protected $dateFormat = 'U';\r\n}<\/code><\/pre>\r\n\r\n<h2>4. Many-to-Many: Zaman Damgalı Pivot Tablo<\/h2>\r\n\r\n<p>Zaman damgaları otomasyonu i&ccedil;in biraz istisna, <strong>users<\/strong>&nbsp;ve <strong>roles<\/strong>&nbsp;tabloları arasındaki table <strong>role_user<\/strong>&nbsp;gibi, &ccedil;ok-&ccedil;ok ilişkide bir pivot tablo oluşturduğunuzdadır. Modelde, ilişkiyi ş&ouml;yle tanımlarsınız:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class User extends Model{\r\n    public function roles(){\r\n        return $this-&gt;belongsToMany(Role::class);\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>Ve sonra, bir kullanıcıya rol eklemek istediğinizde, ş&ouml;yle bir şey yaparsınız:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$roleID = 1;\r\n$user-&gt;roles()-&gt;attach($roleID);<\/code><\/pre>\r\n\r\n<p>Varsayılan olarak, bu pivot tablolarda <strong>zaman damgası bulunmaz<\/strong>. Ve Laravel bu durumda oluşturulan_at \/ updated_at dosyasını doldurmaya &ccedil;alışmaz. Ancak zaman damgalarını otomatik olarak kaydetmek istiyorsanız, bunları taşıma dosyasına eklemeniz ve ardından&nbsp;<strong>-&gt;withTimestamps()<\/strong> kullanmalısınız.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function roles(){\r\n    return $this-&gt;belongsToMany(Role::class)-&gt;withTimestamps();\r\n}\r\n<\/code><\/pre>\r\n\r\n<h2>5. latest() ve oldest() ile&nbsp;Order by Timestamp<\/h2>\r\n\r\n<p>Verileri zaman damgalarına g&ouml;re sıralamak i&ccedil;in iki &ldquo;shortcuts&rdquo; vardır. Onun yerine:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">User::orderBy('created_at', 'desc')-&gt;get();<\/code><\/pre>\r\n\r\n<p>&nbsp;yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">User::latest()-&gt;get();<\/code><\/pre>\r\n\r\n<p><strong>latest()<\/strong>&nbsp; &ouml;ğesi create_at tarafından artarak sıralanır.&nbsp;<strong>oldest()<\/strong>&nbsp;ise azalarak sıralanır.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">User::oldest()-&gt;get();<\/code><\/pre>\r\n\r\n<p>Ayrıca, sıralamak i&ccedil;in başka bir s&uuml;tun belirtebilirsiniz. &Ouml;rneğin, <strong>updated_at&nbsp;<\/strong>kullanmak istiyorsanız, bunu yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$lastUpdatedUser = User::newest('updated_at')-&gt;first();<\/code><\/pre>\r\n\r\n<h2>6. Updated_at &ouml;ğesine dokunmadan g&uuml;ncelleme<\/h2>\r\n\r\n<p>Eloquent kaydını her g&uuml;ncellediğinizde, ge&ccedil;erli zaman damgasını otomatik olarak <strong>updated_at&nbsp;<\/strong>s&uuml;tununa kaydeder ve bu harika bir &ouml;zelliktir. Ancak bazen bundan ka&ccedil;ınmak istersiniz, &ouml;rneğin bir miktar değeri arttırırsınız ve bunu &ldquo;tam kayıt g&uuml;ncellemesi&rdquo; olarak değerlendirmek istemezsiniz. Zaman damgalarını yalnızca bir kez devre dışı bırakmak i&ccedil;in:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::find(1);\r\n$user-&gt;profile_views_count = 123;\r\n$user-&gt;timestamps = false;\r\n$user-&gt;save();<\/code><\/pre>\r\n\r\n<h2>7. Touch ve Ebeveyn Touch<\/h2>\r\n\r\n<p>Son &ouml;rneğin tersine sadece&nbsp;<strong>updated_at<\/strong>&nbsp;s&uuml;tununa yeni bir değer ayarlamak ve diğerlerini değiştirmek istemeyebilirsiniz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user-&gt;update(['updated_at' =&gt; now()]);<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user-&gt;touch();<\/code><\/pre>\r\n\r\n<p>Başka bir durum, bazen sadece mevcut Eloquent modelinin <strong>updated_at<\/strong>&nbsp;değerini ayarlamakla kalmaz, aynı zamanda relationshipe g&ouml;re <strong>parent&#39;<\/strong>tır. &Ouml;rneğin, bazı <strong>yorumlar <\/strong>g&uuml;ncellendiğinde, g&ouml;nderi kaydının da yeni <strong>updated_at<\/strong> olması gerektiğini d&uuml;ş&uuml;nmek istersiniz. Ardından, Eloquent modelinde &ldquo;parent touches&rdquo; modellerini tanımlamanız gerekir.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Comment extends Model {\r\n    protected $touches = ['post'];\r\n    public function post(){\r\n        return $this-&gt;belongsTo('Post');\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<h2>8. Zaman Damgası Alanları Otomatik Olarak Carbon<\/h2>\r\n\r\n<p>Son &ldquo;bonus&rdquo; ipucu daha &ccedil;ok bir &ldquo;hatırlatma&rdquo; gibi, varsayılan olarak, <strong>created_at<\/strong>&nbsp;ve <strong>updated_at<\/strong>&nbsp;hem Eloquent modelinin <strong>$dates<\/strong>&nbsp;olarak yayınlanır, b&ouml;ylece Carbon &ouml;rneğine d&ouml;n&uuml;şt&uuml;rmeden Karbon işlemlerini ger&ccedil;ekleştirebilirsiniz. &Ouml;rneğin:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user-&gt;created_at-&gt;addDays(3);\r\nnow()-&gt;diffInDays($user-&gt;updated_at);<\/code><\/pre>","kategori_id":"2","etiketler":"php,laravel,Timestamps","aktif":"1","sira":"8","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-16 11:06:07"},
    {"id":"8","baslik":"Laravel Adlandırma Kuralları","url":"laravel-adlandirma-kurallari","icerik":"<p>Laravel her g&uuml;n binlerce geliştirici tarafından her t&uuml;rl&uuml; web sitesi ve uygulama oluşturmak i&ccedil;in kullanılıyor. Ancak neyse ki, Laravel projesinin değişkenlerini, y&ouml;ntemlerini ve işlevlerini adlandırırken bir&ccedil;ok geliştirici tarafından takip edilen &ccedil;ok yaygın kullanılan bazı adlandırma kuralları vardır. İşte Laravel i&ccedil;in en iyi adlandırma kuralları;<\/p>\r\n\r\n<h2>Controller Adlandırması<\/h2>\r\n\r\n<p>Controller tekil durumda olmalı, kelimeler arasında boşluk olmamalı ve &quot;Controller&quot; ile bitmelidir. Ayrıca, her kelimenin b&uuml;y&uuml;k harflerle yazılması gerekir (blogcontroller değil, BlogController).<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>BlogController<\/code>, <code>AuthController<\/code>, <code>UserController<\/code>.<\/p>\r\n\r\n<p>K&ouml;t&uuml; &ouml;rnekler: <code>UsersController<\/code>&nbsp;(&ccedil;oğul olduğu i&ccedil;in), <code>Users<\/code>&nbsp; (Denetleyici son eki eksik olduğu i&ccedil;in).<\/p>\r\n\r\n<h2>Veritabanı tablolarını adlandırma<\/h2>\r\n\r\n<p>DB tabloları k&uuml;&ccedil;&uuml;k harflerle, kelimeleri ayırmak i&ccedil;in alt &ccedil;izgi ile (snake_case) ve &ccedil;oğul bi&ccedil;imde olmalıdır.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>posts<\/code>, <code>project_tasks<\/code>, <code>uploaded_images<\/code>.<\/p>\r\n\r\n<p>K&ouml;t&uuml; &ouml;rnekler: <code>all_posts<\/code>,&nbsp;<code>Posts<\/code>,&nbsp;<code>post<\/code>,&nbsp;<code>blogPosts<\/code><\/p>\r\n\r\n<h2>Pivot tablolar<\/h2>\r\n\r\n<p>Pivot tabloların t&uuml;m&uuml; k&uuml;&ccedil;&uuml;k harf olmalı, her model alfabetik sırayla, alt &ccedil;izgi ile ayrılmış olmalıdır (snake_case).<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>post_user<\/code>, <code>task_user<\/code>&nbsp;vb.<\/p>\r\n\r\n<p>K&ouml;t&uuml; &ouml;rnekler: <code>users_posts<\/code>, <code>UsersPosts<\/code>.<\/p>\r\n\r\n<h2>Tablo s&uuml;tunlarının adları<\/h2>\r\n\r\n<p>Tablo s&uuml;tunu adları k&uuml;&ccedil;&uuml;k harf ve yılan_kolu (kelimeler arasında alt &ccedil;izgi) olmalıdır. Tablo adına başvurmamalısınız.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>post_body<\/code>, <code>id<\/code>, <code>created_at<\/code>.<\/p>\r\n\r\n<p>K&ouml;t&uuml; &ouml;rnekler: <code>blog_post_created_at<\/code>, <code>forum_thread_title<\/code>, <code>threadTitle<\/code>.<\/p>\r\n\r\n<h2>Birincil anahtar<\/h2>\r\n\r\n<p>Bu normalde <code>id&nbsp;<\/code>olmalıdır.<\/p>\r\n\r\n<h2>Yabancı anahtarlar<\/h2>\r\n\r\n<p>Yabancı anahtarlar model adı (tekil) olmalı ve buna &#39;_id&#39; eklenmiş olmalıdır (diğer tablodaki PK&#39;nin &#39;id&#39; olduğu varsayılarak).<\/p>\r\n\r\n<p>&Ouml;rneğin:&nbsp;&nbsp;<code>comment_id<\/code>,&nbsp;<code>user_id<\/code><\/p>\r\n\r\n<h2>Değişkenler<\/h2>\r\n\r\n<p>Normal değişkenler genellikle ilk karakter k&uuml;&ccedil;&uuml;k harf olacak şekilde olmalıdır.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>$users = ...<\/code>,&nbsp;<code>$bannedUsers = ...<\/code>.&nbsp;<\/p>\r\n\r\n<p>K&ouml;t&uuml; &ouml;rnekler: <code>$all_banned_users = ...<\/code>,&nbsp;<code>$Users=...<\/code>.<\/p>\r\n\r\n<p>Değişken, bir dizi veya birden &ccedil;ok &ouml;ğe koleksiyonu i&ccedil;eriyorsa, değişken adı &ccedil;oğul olmalıdır. Aksi takdirde, tekil formda olmalıdır.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>$users = User::all();<\/code> (bu birden &ccedil;ok Kullanıcı nesnesinin bir koleksiyonu olacağı i&ccedil;in), ancak <code>$user = User::first()<\/code> (bu yalnızca bir nesne olduğu i&ccedil;in)<\/p>\r\n\r\n<h2>Modeller i&ccedil;in Adlandırma Kuralları<\/h2>\r\n\r\n<p>Bir model tekil olmalı, kelimeler arasında boşluk olmamalı ve b&uuml;y&uuml;k harf kullanılmalıdır.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>User<\/code>&nbsp;(\\App\\User or \\App\\Models\\User, etc),&nbsp;<code>ForumThread<\/code>,&nbsp;<code>Comment<\/code>.<\/p>\r\n\r\n<p>K&ouml;t&uuml; &ouml;rnekler: <code>Users<\/code>,&nbsp;<code>ForumPosts<\/code>,&nbsp;<code>blogpost<\/code>,&nbsp;<code>blog_post<\/code>,&nbsp;<code>Blog_posts<\/code>.<br \/>\r\nGenel olarak, modelleriniz aşağıdaki y&ouml;ntemle hangi veritabanı tablosunu kullanması gerektiğini otomatik olarak &ccedil;&ouml;zebilmelidir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/**\r\n  * Get the table associated with the model.\r\n  * @return string\r\n*\/\r\npublic function getTable(){\r\n   if(! isset($this-&gt;table)) {\r\n       return str_replace('\\\\', '', Str::snake(Str::plural(class_basename($this))));\r\n   }\r\n   return $this-&gt;table;\r\n}<\/code><\/pre>\r\n\r\n<p>Ancak elbette, modelinizde <code>$this-&gt;table <\/code>olarak ayarlayabilirsiniz.&nbsp;<code>php artisan make:model -m ForumPost<\/code> &ccedil;alıştırarak aynı anda model ve migration oluşturmanızı &ouml;neririz. Bu, migration dosyasını otomatik olarak oluşturur (bu durumda, &#39;forum_posts&#39; DB tablo adı i&ccedil;in).<\/p>\r\n\r\n<h2>Model &ouml;zellikleri<\/h2>\r\n\r\n<p>Bunlar k&uuml;&ccedil;&uuml;k harf olmalıdır, snake_case. Ayrıca, tablo s&uuml;tunu adlarıyla aynı kuralları izlemelidirler.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>$this-&gt;updated_at<\/code>,&nbsp;<code>$this-&gt;title<\/code>.<\/p>\r\n\r\n<p>K&ouml;t&uuml; &ouml;rnekler: <code>$this-&gt;UpdatedAt<\/code>,&nbsp;<code>$this-&gt;blogTitle<\/code>.<\/p>\r\n\r\n<h2>Model Y&ouml;ntemleri<\/h2>\r\n\r\n<p>Laravel projelerindeki modellerinizdeki y&ouml;ntemler, Laravel projelerinizdeki t&uuml;m y&ouml;ntemler gibi ilk karakter k&uuml;&ccedil;&uuml;k harf olmalıdır.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>public function get()<\/code>,&nbsp;<code>public function getAll()<\/code>.<\/p>\r\n\r\n<p>K&ouml;t&uuml; &ouml;rnekler: <code>public function GetPosts()<\/code>,&nbsp;<code>public function get_posts()<\/code>.<\/p>\r\n\r\n<h2>İlişkiler<\/h2>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h3>hasOne veya belongsTo&nbsp;(one to many)<\/h3>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Bunlar tekil formda olmalı ve normal model y&ouml;ntemlerle aynı adlandırma kurallarına uymalıdır.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>public function postAuthor()<\/code>,&nbsp;<code>public function phone()<\/code>.<\/p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h3>hasMany, belongsToMany, hasManyThrough (one to many)<\/h3>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Bunlar bir&ccedil;ok adlandırma kuralınınkiyle aynı olmalıdır, ancak &ccedil;oğul olmalıdır.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>public function comments()<\/code>,&nbsp;<code>public function roles()<\/code>.<\/p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<h3>Polimorfik ilişkiler<\/h3>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>İsimlendirmeyi doğru yapmak i&ccedil;in bunlar biraz garip olabilir. İdeal olarak, b&ouml;yle bir y&ouml;nteme sahip olmak istersiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function category(){\r\n    return $this-&gt;morphMany('App\\Category', 'categoryable');\r\n}<\/code><\/pre>\r\n\r\n<p>Laravel varsayılan olarak bir categoryable_id ve categoryable_type olduğunu varsayar.<\/p>\r\n\r\n<p>Ancak varsayılanları değiştirmek i&ccedil;in <code>morphMany<\/code>&nbsp; (<code>public function morphMany($related, $name, $type = null, $id = null, $localKey = null))<\/code> i&ccedil;in diğer isteğe bağlı parametreleri kullanabilirsiniz.<\/p>\r\n\r\n<h2>Controllerda isimlendirme<\/h2>\r\n\r\n<p>Bunlar model y&ouml;ntemleriyle aynı kurallara uymalıdır.&nbsp; Ayrıca, normal CRUD işlemleri i&ccedil;in, aşağıdaki y&ouml;ntem adlarından birini kullanmaları gerekir.<\/p>\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Verb<\/th>\r\n\t\t\t<th>URI<\/th>\r\n\t\t\t<th>Typical Method Name<\/th>\r\n\t\t\t<th>Route Name<\/th>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>GET<\/td>\r\n\t\t\t<td><code>\/photos<\/code><\/td>\r\n\t\t\t<td><code>index()<\/code><\/td>\r\n\t\t\t<td>photos.index<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>GET<\/td>\r\n\t\t\t<td><code>\/photos\/create<\/code><\/td>\r\n\t\t\t<td><code>create()<\/code><\/td>\r\n\t\t\t<td>photos.create<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>POST<\/td>\r\n\t\t\t<td><code>\/photos<\/code><\/td>\r\n\t\t\t<td><code>store()<\/code><\/td>\r\n\t\t\t<td>photos.store<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>GET<\/td>\r\n\t\t\t<td><code>\/photos\/{photo}<\/code><\/td>\r\n\t\t\t<td><code>show()<\/code><\/td>\r\n\t\t\t<td>photos.show<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>GET<\/td>\r\n\t\t\t<td><code>\/photos\/{photo}\/edit<\/code><\/td>\r\n\t\t\t<td><code>edit()<\/code><\/td>\r\n\t\t\t<td>photos.edit<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>PUT\/PATCH<\/td>\r\n\t\t\t<td><code>\/photos\/{photo}<\/code><\/td>\r\n\t\t\t<td><code>update()<\/code><\/td>\r\n\t\t\t<td>photos.update<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>DELETE<\/td>\r\n\t\t\t<td><code>\/photos\/{photo}<\/code><\/td>\r\n\t\t\t<td><code>destroy()<\/code><\/td>\r\n\t\t\t<td>photos.destroy<\/td>\r\n\t\t<\/tr>\r\n\t<\/thead>\r\n<\/table>\r\n\r\n<h2>Traits<\/h2>\r\n\r\n<p><span style=\"font-size:13px\">Traits <\/span>sıfat kelimeler olmalıdır.<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>Notifiable<\/code>,&nbsp;<code>Dispatchable<\/code>, etc.<\/p>\r\n\r\n<h2>Blade g&ouml;r&uuml;n&uuml;m dosyaları<\/h2>\r\n\r\n<p>Blade dosyaları k&uuml;&ccedil;&uuml;k harf olmalıdır, snake_case (kelimeler arasında alt &ccedil;izgi).<\/p>\r\n\r\n<p>&Ouml;rneğin: <code>all.blade.php<\/code>,&nbsp;<code>all_posts.blade.php<\/code>, etc<\/p>","kategori_id":"2","etiketler":"php,laravel,isimlendirme","aktif":"1","sira":"10","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 18:53:57"},
    {"id":"9","baslik":"Bilmediğiniz Laravel ipuçları\/püf noktaları-1","url":"bilmediginiz-laravel-ipuclari-puf-noktalari-1","icerik":"<p>Laravel uygulamasını kapatmak i&ccedil;in <code>artisan down<\/code> komutunu kullanın, ancak belirli IP&#39;lere erişime izin verin<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan down --allow=123.123.123.123<\/code><\/pre>\r\n\r\n<p><code>php artisan down<\/code> komutu, Laravel sitenizi bakım i&ccedil;in kaldırmanız gerektiğinde veya sistemi y&uuml;kseltirken kullanmak i&ccedil;in kullanışlıdır. Ancak, <code>--allow<\/code> se&ccedil;eneğini kullanmadan normal kullanıcı olarak test etmenin ger&ccedil;ek bir yolu yoktur. Bu sorunu aşmak i&ccedil;in izin verilecek IP adreslerinin bir beyaz listesini sağlayabilirsiniz.<\/p>\r\n\r\n<p>Ayrıca birden fazla IP adresi ve hatta IP aralıkları da sağlayabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan down --allow=127.0.0.1 --allow=192.168.0.0\/16<\/code><\/pre>\r\n\r\n<p><code>down<\/code>&nbsp;komutu i&ccedil;in diğer bazı yararlı se&ccedil;enekler şunlardır:&nbsp;<\/p>\r\n\r\n<p><img alt=\"\" src=\"\/upload\/files\/laravel_down.jpg\" style=\"float:left; height:136px; width:200px\" \/><code>--message = &quot;mesajınız buraya&quot;&nbsp;<\/code>se&ccedil;eneğini kullanarak kullanıcıları g&ouml;stermek i&ccedil;in &ouml;zel bir mesaj sağlayabilirsiniz. Bu, site kapalıyken bu iletiyi kullanıcılarınıza g&ouml;sterecektir. 503.blade.php dosyasını g&ouml;r&uuml;n&uuml;m dizininize kopyalayarak daha fazla değiştirebilirsiniz. Varsayılan mesaj &#39;&Uuml;zg&uuml;n&uuml;z, biraz bakım yapıyoruz. L&uuml;tfen kısa s&uuml;re sonra tekrar kontrol edin. &#39;&#39;<\/p>\r\n\r\n<p><code>php artisan down --message=&quot;You can write anything here&quot;<\/code><\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan down --retry=60<\/code><\/pre>\r\n\r\n<p><code>--retry&nbsp;<\/code>Yeniden Deneme Sonrası HTTP &uuml;stbilgisi değeri i&ccedil;in kullanılacak yeniden deneme değerini ayarlayabilirsiniz.<\/p>\r\n\r\n<hr \/>\r\n<p>Bir ka&ccedil; s&uuml;tun &uuml;zerinde sorgu oluşturucu &#39;<code>where<\/code>&#39; sorgusu yapmanız mı gerekiyor? Aşağıdaki SQL sorgusunu yapmak istediğinizi varsayalım:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">SELECT * FROM `users` WHERE `name` = 'Lorem' AND `email` = 'lorem@ipsum.com' LIMIT 1<\/code><\/pre>\r\n\r\n<p>Bunu bir &#39;<code>where<\/code>&#39; y&ouml;ntemi &ccedil;ağrısı ile başarabilirsiniz. Eloquent, ortadaki &quot;<code>and<\/code>&quot; ifadesinin iki ayrı yerde yan t&uuml;mceleri anlamına geldiğini anlayacaktır:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\\App\\User::whereNameAndEmail('some_name','some@email')-&gt;first();\r\n\/\/ the above has the exact same result as:\r\n\\App\\User::where('name', 'some_name')-&gt;where('email', 'som@_email')-&gt;first();\r\n\/\/ also same as:\r\n\\App\\User::where(['name' =&gt; 'some_name', 'email' =&gt; 'some@email'])-&gt;first();<\/code><\/pre>\r\n\r\n<p>(Ad ve E-postayı gerektiği gibi değiştirin - &ouml;nemli olan, aralarındaki &#39;<code>and<\/code>&#39;dir. Laravel, &#39;<code>where<\/code>&#39; ifadenizin ifade ettiği s&uuml;tunları otomatik olarak &ccedil;alışacaktır)<\/p>\r\n\r\n<p>Ayrıca &#39;<code>and<\/code>&#39; nin yanı sıra ş&ouml;yle bir &#39;<code>or<\/code>&#39; de yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">\\App\\User::whereFooOrBar('foo value','bar value')-&gt;first();<\/code><\/pre>\r\n\r\n<p>Hangi aşağıdaki SQL sorgusu &uuml;retecek:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">SELECT * FROM `users` WHERE `foo` = 'foo value' OR `bar` = 'bar value' LIMIT 1<\/code><\/pre>\r\n\r\n<hr \/>\r\n<p>Eloquent&#39;te<code>find()&nbsp;<\/code>birden &ccedil;ok satırı kabul edebilir.&nbsp;Sorgu oluşturucunun <code>find()<\/code> y&ouml;ntemini aşağıdaki şekilde kullanabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$rows = SomeEloquentModel::find([1,4,6,11]);<\/code><\/pre>\r\n\r\n<p><code>find()&nbsp;<\/code>bir dizi olarak değer alırsa, bu kimlikleri i&ccedil;eren bir Eloquent model satırı koleksiyonu d&ouml;nd&uuml;r&uuml;r (elbette, bu satırlar varsa ...).<\/p>\r\n\r\n<p><code>findOrFail()<\/code> i&ccedil;in de ge&ccedil;erlidir. Her ikisi de (sonunda) bulmak i&ccedil;in bir dizi kimlik ge&ccedil;tiyse <code>findMany()&nbsp;<\/code>&ouml;ğesini &ccedil;ağırır.<\/p>\r\n\r\n<hr \/>\r\n<p>İlişki null değerini d&ouml;nd&uuml;r&uuml;rse, <code>belongsTo&nbsp;<\/code>gibi ilişkilerin varsayılan bir model sağlayabileceğini biliyor muydunuz? Bir ilişkiniz varsa (<code>belongsTo<\/code>, <code>MorphOne<\/code>&nbsp;veya <code>HasOne<\/code>), bazen null d&ouml;nd&uuml;rebilir. Bu durumda, <code>withDefault()<\/code> y&ouml;ntemiyle bir varsayılan değer sağlayabilirsiniz. Hangi t&uuml;r nesnelerin d&ouml;nd&uuml;r&uuml;leceğini otomatik olarak hesaplar, ancak bazı varsayılan nitelikleri de ayarlayabilirsiniz.<\/p>\r\n\r\n<p>İşte birka&ccedil; &ouml;rnek:<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function user(){\r\n    return $this-&gt;belongsTo('App\\User')-&gt;withDefault();\r\n}\r\n\/\/or\r\npublic function user(){\r\n    return $this-&gt;belongsTo('App\\User')-&gt;withDefault([\r\n        'name' =&gt; 'Guest Author',\r\n    ]);\r\n}\r\n\/\/or\r\npublic function user(){\r\n    return $this-&gt;belongsTo('App\\User')-&gt;withDefault(function ($user) {\r\n        $user-&gt;name = 'Guest Author';\r\n    });\r\n}<\/code><\/pre>\r\n\r\n<p>Detaylar i&ccedil;in <code>SupportsDefaultModels.php<\/code>&nbsp;dosyasına bakabilirsiniz.<\/p>\r\n\r\n<hr \/>\r\n<p>Kullanıcıya HTTP yanıtı oluşturmak i&ccedil;in &ouml;zel durumlar&#39;da <code>render()<\/code> y&ouml;ntemini kullanın. Aşağıdaki komutu &ccedil;alıştırırsanız:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan make:exception --render İstisnaİsmi<\/code><\/pre>\r\n\r\n<p>Boş <code>render($request, Exception $exception)<\/code> metodu ile, istisnalar dizininizde yeni bir istisna sınıfı oluşturur.<\/p>\r\n\r\n<p>Hata meydana gelirse <code>app\/Exceptions\/Handler.php<\/code> dosyası <code>method_exists($exception, &#39;render&#39;)<\/code> &ouml;ğesini kontrol eder ve yakalar&nbsp;Varsa, bu y&ouml;ntemi istisna olarak &ccedil;ağırır ve kullanıcıya geri d&ouml;nd&uuml;r&uuml;r. Aşağıda, bir g&ouml;r&uuml;n&uuml;m yanıtı d&ouml;nd&uuml;recek bir &ouml;zel durumdaki <code>render()<\/code>&nbsp;y&ouml;ntemi &ouml;rneği verilmiştir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/**\r\n* Render the exception into an HTTP response.\r\n* @param    \\Illuminate\\Http\\Request\r\n* @return  \\Illuminate\\Http\\Response\r\n*\/\r\npublic function render($request){\r\n    response()-&gt;view('errors.custom.myexception', [], 500);\r\n}<\/code><\/pre>\r\n\r\n<p>Bu y&ouml;ntemi, kullanıcıya g&ouml;r&uuml;nt&uuml;lenecek bir yanıt d&ouml;nd&uuml;rmek i&ccedil;in kullanabilirsiniz.<\/p>\r\n\r\n<hr \/>\r\n<p>&nbsp;<\/p>\r\n\r\n<p><code>rememberForever($key, function() { return &#39;something&#39;; })<\/code> işlevi, &Ouml;nbellek &ouml;zelliğini kullanırsanız, neredeyse kesinlikle b&ouml;yle bir şey yapıyorsunuz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$value = Cache::remember('users', $minutes, function () {\r\n   return DB::table('users')-&gt;get();\r\n});<\/code><\/pre>\r\n\r\n<p>Ama bunu da yapabileceğini biliyor muydunuz?<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$value = Cache::rememberForever('users', function () {\r\n  return DB::table('users')-&gt;get();\r\n});<\/code><\/pre>\r\n\r\n<p>Bu, &ouml;nbellekten bir &ouml;ğe alır veya varsayılan değeri sonsuza kadar saklar.<\/p>\r\n\r\n<hr \/>\r\n<p>Bir dosyayı rotanıza eklemek i&ccedil;in route dosyasınıza&nbsp;<code>group()&nbsp;<\/code>g&ouml;nderebilirsiniz. Route dosyanız biraz dağınıksa, bunları kendi dosyalarına yapıştırabilir ve dosyayı <code>group()<\/code> &ccedil;ağrısına dahil edebilirsiniz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::middleware(SomeMiddleware::class)-&gt;group(__DIR__\"\/SomeGroup.php\")<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"2","etiketler":"php,laravel","aktif":"1","sira":"10","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-16 11:06:07"},
    {"id":"10","baslik":"Bilmediğiniz Laravel ipuçları\/püf noktaları-2","url":"bilmediginiz-laravel-ipuclari-puf-noktalari-2","icerik":"<h1><span style=\"font-size:24px\">Eloquent: ge&ccedil;erli modelin yeni bir s&uuml;r&uuml;m&uuml;n&uuml; (<code><strong>fresh()<\/strong><\/code>) ve yinelenen satırları alın (<\/span><code><strong>replicate()<\/strong><\/code><span style=\"font-size:24px\">)<\/span><\/h1>\r\n\r\n<p>Veritabanını sorgulamak ve ge&ccedil;erli &ouml;ğenin yeni bir s&uuml;r&uuml;m&uuml;n&uuml; almak i&ccedil;in -&gt;<code>fresh()<\/code> kullanın.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = \\App\\User::first();\r\n$user-&gt;name = \"Bişeyler burada\";\r\n$user = $user-&gt;fresh(); \/\/ yeni değeri döndürür, şu anki modeli etkilemez.\r\ndump($user-&gt;name); \/\/ 'Bişeyler burada'<\/code><\/pre>\r\n\r\n<p>Mevcut modeli yeniden nemlendirmek istiyorsanız <code>refresh()&nbsp;<\/code>kullanın:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$flight = App\\Flight::where('number', 'TR 900')-&gt;first();\r\n$flight-&gt;number = 'TR 456';\r\n$flight-&gt;refresh();\r\n$flight-&gt;number; \/\/ \"TR 900\"<\/code><\/pre>\r\n\r\n<p>Bir Eloquent nesnesini &ccedil;oğaltmanız gerekirse, şunu kullanın:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$new = SomeModel::first()-&gt;replicate();\r\n$new-&gt;save()<\/code><\/pre>\r\n\r\n<p>Replicate y&ouml;ntemi, &ccedil;oğaltırken g&ouml;z ardı etmesi gereken bir dizi &ouml;zellik sağlamanıza izin verir (<code>$except=[]<\/code>), &ouml;rneğin:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$new = User::first()-&gt;replicate(['password']); \/\/ APART FROM ile password alanını kopyalayın\r\n$new-&gt;save(); \/\/ $new, tüm kullanıcılara ilk User satırı olarak sahip olacaktır, ancak 'password' özelliği orada olmayacaktır.<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>Az kullanılan bazı statik y&ouml;nlendirme&nbsp;metotları<\/h2>\r\n\r\n<p>6 &#39;ana&#39; y&ouml;nlendirme y&ouml;ntemi vardır;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::get($uri, $callback);\r\nRoute::post($uri, $callback);\r\nRoute::put($uri, $callback);\r\nRoute::patch($uri, $callback);\r\nRoute::delete($uri, $callback);\r\nRoute::options($uri, $callback); \/\/ nadiren kullanılır<\/code><\/pre>\r\n\r\n<p>Ayrıca aşağıdakiler olduk&ccedil;a yaygın olarak kullanılmaktadır:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::match(['get', 'post'], '\/', $callback); \/\/Aynı url için farklı HTTP metotları için kullanılır.\r\nRoute::any('foo', $callback); \/\/ Tüm route'lar iççin kullanılır.<\/code><\/pre>\r\n\r\n<p>Yukarıdakilerin hepsi, ayrıca <code>Route::group(...)<\/code> gibi birka&ccedil; tane olduk&ccedil;a yaygındır. Ancak, &ccedil;ok sık farketmeme eğiliminde olduğum bir s&uuml;r&uuml; başka yararlı y&ouml;nlendirme y&ouml;ntemi var. Bunlar aşağıdakileri i&ccedil;erir:<\/p>\r\n\r\n<h3>URL&#39;leri routes dosyanızdan y&ouml;nlendirme (web.php)<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/\/ birisi \/sayfa'yı ziyaret ederse, \/sayfa2'ye yönlendirilir.\r\nRoute::redirect('\/sayfa', '\/sayfa2', 301); \/\/ 301 Moved Permanently<\/code><\/pre>\r\n\r\n<blockquote>\r\n<p>Not: &uuml;&ccedil;&uuml;nc&uuml; parametre isteğe bağlıdır ve varsayılan olarak 302 (ge&ccedil;ici) y&ouml;nlendirmeye ge&ccedil;er.<\/p>\r\n<\/blockquote>\r\n\r\n<p>Controller bir view d&ouml;nd&uuml;r&uuml;yor mu? Controller&#39;ı atla, view&#39;i route dosyasından d&ouml;nd&uuml;r ...<br \/>\r\nDenetleyicinizin y&ouml;ntemi ger&ccedil;ekten basitse ve yalnızca bir g&ouml;r&uuml;n&uuml;m d&ouml;nd&uuml;r&uuml;yorsa, aşağıdakileri kullanabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::view('\/welcome', 'welcome'); \/\/ Controller da view(\"welcome\") ile aynıdır.\r\nRoute::view('\/welcome', 'pages.welcome', ['name' =&gt; 'LoremIpsum']); \/\/ Controller da  view(\"pages.welcome\")-&gt;withName(\"LoremIpsum\") ile aynıdır.<\/code><\/pre>\r\n\r\n<h3>Rota adı &ouml;nekleri<\/h3>\r\n\r\n<p>Eğer bir s&uuml;r&uuml; routes varsa, muhtemelen her birine aşağıdaki gibi adlar verebilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::get(\"\/\",\"BlogController@show\")-&gt;name(\"blog.show\");<\/code><\/pre>\r\n\r\n<p>&quot;Blog&quot; &ouml;n ekini eklemek zorunda kalmazsınız. Route &ouml;neklerini kullanarak her isme &ouml;nek ekler.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::name('blog.')-&gt;group(function () {\r\n   Route::get('show', function () {\r\n      \/\/ İsim atanmış route 'blog.show'\r\n   })-&gt;name('show');\r\n});<\/code><\/pre>\r\n\r\n<h3>Fallback Rotalar<\/h3>\r\n\r\n<p>Eşleşen başka bir rota yoksa kullanılacak <code>Route::fallback(...)<\/code> y&ouml;ntemini kullanabilirsiniz. Bu normalde bir 404 hatası g&ouml;stermek i&ccedil;in kullanılır, ancak diğer durumlarda da yararlı olabilir.<\/p>\r\n\r\n<hr \/>\r\n<p>&nbsp;<\/p>\r\n\r\n<h3>Ge&ccedil;erli rota i&ccedil;in wildcard(*) kontrollerini kullan<\/h3>\r\n\r\n<p>Bir t&uuml;r navigasyonunuz varsa ve bir <code>class=&#39;active&#39;<\/code> eklemek istiyorsanız;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">if( request()-&gt;is('control-panel') || request()-&gt;is('control-panel\/change-email') || request()-&gt;is('control-panel\/edit-profile') { ... }<\/code><\/pre>\r\n\r\n<p>Ancak, wildcard karakter kullanabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">if (request()-&gt;is(\"control-panel*\")) { ... }<\/code><\/pre>\r\n\r\n<p><code>routeIs()<\/code> y&ouml;ntemini benzer şekilde, ancak yol adıyla kullanabilirsiniz.<\/p>\r\n\r\n<hr \/>\r\n<p><span style=\"font-size:22px\"><code>Auth::user()-&gt;id<\/code> yerine <code>Auth::id()<\/code><\/span><\/p>\r\n\r\n<p>Her zaman <code>Auth::user()-&gt;id<\/code> g&ouml;r&uuml;yorum, ancak ID almak i&ccedil;in &ccedil;ok daha hızlı olan&nbsp;<code>Auth::id()<\/code> kodunu kullanın.<\/p>\r\n\r\n<p>Reddit&#39;te belirtildiği gibi, <code>\\Auth::user()<\/code> yapmak yerine, sadece <code>auth()<\/code> yapabilir ve auth helper işlevini kullanabilirsiniz. (Tam &ouml;rnek: <code>auth()-&gt;id()<\/code>)<\/p>\r\n\r\n<hr \/>\r\n<h3>Basit Sayfalandırma<\/h3>\r\n\r\n<p>Normal sayfalama, toplam ka&ccedil; satır olduğunu sayar ve maksimum sayfa sayısını hesaplar. B&uuml;y&uuml;k veri k&uuml;melerinde bu iyi bir fikir değildir. Basit sayfalama se&ccedil;eneği yalnızca &ouml;nceki ve sonraki bağlantıyı g&ouml;r&uuml;nt&uuml;ler ve veritabanınızda &ccedil;ok daha hızlı bir sorgu yapar. Bunu normal Laravel sayfalama ile aynı şekilde kullanırsınız, ancak <code>paginate()<\/code> yerine <code>simplePaginate()<\/code> &ouml;ğesini &ccedil;ağırmanız yeterlidir.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = DB::table('users')-&gt;simplePaginate(15);<\/code><\/pre>\r\n\r\n<p>Ayrıca tam sayfalama verileriyle JSON &ccedil;ıktısı alabileceğini biliyor muydunuz?<\/p>\r\n\r\n<pre>\r\n<code class=\"language-json\">{\r\n    \"total\": 50,\r\n    \"per_page\": 15,\r\n    \"current_page\": 1,\r\n    \"last_page\": 4,\r\n    \"first_page_url\": \"http:\/\/127.0.0.1:8000\/?page=1\",\r\n    \"last_page_url\": \"http:\/\/127.0.0.1:8000\/?page=4\",\r\n    \"next_page_url\": \"http:\/\/127.0.0.1:8000\/?page=2\",\r\n    \"prev_page_url\": null,\r\n    \"path\": \"http:\/\/127.0.0.1:8000\/\",\r\n    \"from\": 1,\r\n    \"to\": 15,\r\n    \"data\":[...]\r\n}<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"2","etiketler":"laravel,php","aktif":"1","sira":"10","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-16 10:14:20"},
    {"id":"11","baslik":"Bilmediğiniz Laravel ipuçları\/püf noktaları-3","url":"bilmediginiz-laravel-ipuclari-puf-noktalari-3","icerik":"<h2>Laravel&#39;in <code>tap()<\/code> y&ouml;ntemi<\/h2>\r\n\r\n<p>Bu yardımcı fonksiyonun biraz kullanıldığını fark etsem de, az kullanıldığını d&uuml;ş&uuml;n&uuml;yorum. <code>tap($val, $callable)<\/code> işlevi normalde <code>$callable<\/code> işlevini <code>$val<\/code> değeriyle &ccedil;alıştırmanıza izin verecek şekilde kullanılır (yani <code>$callable($val)<\/code> &ccedil;alıştıracaktır). Ardından, <code>$callable<\/code> d&ouml;nd&uuml;r&uuml;len değeri ne olursa olsun, <code>$value&nbsp;<\/code>d&ouml;nd&uuml;r&uuml;r.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/**\r\n* @param  mixed $value\r\n* @param  callable|null $callback\r\n* @return  mixed\r\n*\/\r\nfunction tap($value, $callback = null){\r\n  if(is_null($callback)) {\r\n      return new HigherOrderTapProxy($value);\r\n  }\r\n  $callback($value);\r\n  return $value;\r\n}<\/code><\/pre>\r\n\r\n<p>(HigherOrderTapProxy b&ouml;l&uuml;m&uuml; Laravel&#39;in daha yeni bir s&uuml;r&uuml;m&uuml;ne eklendi - harika bir a&ccedil;ıklama videosu i&ccedil;in bu <a href=\"https:\/\/laracasts.com\/series\/whats-new-in-laravel-5-5\/episodes\/13\" target=\"_blank\">Laracast<\/a>&#39;lere bakın)<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function create(array $attributes = []){\r\n  return tap($this-&gt;newModelInstance($attributes), function ($instance) {\r\n      $instance-&gt;save();\r\n  });\r\n}<\/code><\/pre>\r\n\r\n<p>Tabii ki, sadece ş&ouml;yle bir şey yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function create(array $attributes = []){\r\n   $instance = $this-&gt;newModelInstance($attributes);\r\n   $instance-&gt;save()\r\n   return $instance;\r\n}<\/code><\/pre>\r\n\r\n<p>Bununla birlikte, tap() işlevi ile birden &ccedil;ok satırı g&uuml;zel tek katmanlara d&ouml;n&uuml;şt&uuml;rerek daha temiz kod yazabilirsiniz. <a href=\"https:\/\/laravel-news.com\/collection-tap\" target=\"_blank\">Laravel News<\/a>&#39;te g&uuml;zel bir&nbsp;okuma vardır.<\/p>\r\n\r\n<hr \/>\r\n<p><span style=\"font-size:20px\">Artisan&#39;ın <code>make:<\/code> komutlarının &ccedil;oğu, s&ouml;ylediğiniz alt dizinlerde dosyalar oluşturur;<\/span><\/p>\r\n\r\n<p>Aşağıdaki dizin (zaten yoksa) <code>\/app\/Models\/<\/code> dizinini oluşturur ve i&ccedil;ine <code>YourModel.php<\/code> adlı boş bir PHP dosyası yerleştirir ve doğru şekilde adlandırılır (<code>\\App\\Models<\/code>):<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan make:model -m Models\/Modelİsmi<\/code><\/pre>\r\n\r\n<p>Yukarıdaki komut da sizin i&ccedil;in bir migration dosyası oluşturur (<code>-m<\/code> se&ccedil;eneği sayesinde).<\/p>\r\n\r\n<p>Artık dosya app&nbsp;<code>\/app\/Models\/Modelİsmi.php<span style=\"font-size:10.8333px\">&nbsp;<\/span><\/code>dosyasında ve migration dizininizdeki migration dosyasında bulunacaktır.<\/p>\r\n\r\n<hr \/>\r\n<p><span style=\"font-size:20px\"><code>logger()<\/code>&nbsp;ve<code>info()<\/code> ile işleri hızla loglama<\/span><\/p>\r\n\r\n<p><code>info(&quot;bazı bilgi mesajlarını kaydet&quot;)<big>&nbsp;<\/big>info(&quot;bazı bilgi mesajlarını kaydet<\/code><code>&quot;)<\/code><big>&nbsp;ve <\/big><code>logger(&quot;hata ayıklama mesajlarını kaydet<\/code><code>&quot;)<\/code>&nbsp;kullanın. Uygulama <code>app(&#39;log&#39;)-&gt;debug($message)<\/code> veya <code>\\Log::debug($message)<\/code>... &#39;dan biraz daha temiz ...<\/p>\r\n\r\n<hr \/>\r\n<p><span style=\"font-size:20px\"><code>$perPage<\/code> gibi model &ouml;zelliklerini ayarlama<\/span><br \/>\r\nEloquent modelleriniz neredeyse kesinlikle şu &ouml;zelliklere sahiptir: <code>$fillable = [&#39;title&#39;, &#39;description&#39;]<\/code>,&nbsp;<code>$casts = [&#39;some_field&#39;=&gt;&#39;array&#39;]<\/code><\/p>\r\n\r\n<p><code>$casts = [&#39;some_property&#39; =&gt; &#39;array&#39;, &#39;size_info&#39;=&gt;&#39;object&#39;]<\/code> hakkında bişey bilmiyorsanız, <a href=\"http:\/\/laravel.com\/docs\/5.7\/eloquent-mutators#attribute-casting\">buradan <\/a>kontrol edin. Bir&ccedil;ok se&ccedil;enek vardır: tamsayı, ger&ccedil;ek, kayan nokta, &ccedil;ift, ondalık, dize, boolean, nesne, dizi, koleksiyon, tarih, datetime ve zaman damgası.<\/p>\r\n\r\n<p><code>$perPage<\/code>: Eloquent&#39;in sayfalandırmasını kullandığınızda sayfa başına (varsayılan) satır sayısını ayarlayın. Elbette, sayfalama &ccedil;ağrısında bunu ge&ccedil;ersiz kılabilirsiniz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected $perPage = 15;<\/code><\/pre>\r\n\r\n<p><code>$incrementing<\/code>: Kimlik satırlarını otomatik olarak arttıran bir tablonuz varsa, aşağıdakini false olarak ayarlamak istersiniz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public $incrementing = true;<\/code><\/pre>\r\n\r\n<p><code>$snakeAttributes<\/code>: Bir modelin ilişkilerinde snake-casing etkinse, Eloquent anahtarları snake case ile d&ouml;nd&uuml;r&uuml;r.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public static $snakeAttributes = true;<\/code><\/pre>\r\n\r\n<hr \/>\r\n<p><span style=\"font-size:20px\">Eloquent Relationships: Modelleri yalnızca has() ile bir ilişki satırı varsa geri d&ouml;nd&uuml;r&uuml;n<\/span><br \/>\r\nİki modeliniz varsa, <code>BlogPost<\/code>&nbsp;ve <code>Comment&nbsp;<\/code>diyelim. Bir OneToMany ilişkisi ile bağlantılıdırlar. T&uuml;m blog yayınlarını yorumlarla birlikte almak istiyorsanız bunu yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$postsWithComments = BlogPost::with(\"comments\")-&gt;get();<\/code><\/pre>\r\n\r\n<p>Ancak bu, 0 yorumu olan blog g&ouml;nderilerini d&ouml;nd&uuml;r&uuml;r. Yalnızca &gt; 0 yorumu olan yayınları almak istiyorsanız, bunu yapabilirsiniz (<code>has()<\/code>):<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$postsWithComments = BlogPost::with(\"comments\")-&gt;has(\"comments\")-&gt;get();<\/code><\/pre>\r\n\r\n<hr \/>\r\n<p><span style=\"font-size:24px\"><code>optional()<\/code><\/span><\/p>\r\n\r\n<p><code>optional()&nbsp;<\/code>herhangi bir değeri kabul eder ve bu y&ouml;ntemdeki &ouml;zelliklere (veya &ccedil;ağrı y&ouml;ntemlerine) erişmenizi sağlar. Null değeri verilmişse, herhangi bir &ouml;zellik veya y&ouml;ntem &ccedil;ağrısı i&ccedil;in null değerini d&ouml;nd&uuml;r&uuml;r. Bu şekilde kullanırsınız:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$a = null;\r\n$b = new Model();\r\n \r\noptional($a)-&gt;doSomething(); \/\/ null\r\noptional($a)-&gt;someProperty; \/\/ null\r\n \r\noptional($b)-&gt;doSomething(); \/\/ Model objesinde doSomething çağırır\r\noptional($b)-&gt;someProperty; \/\/ Model objesinde someProperty değeri<\/code><\/pre>\r\n\r\n<pre>\r\n<code class=\"language-php\">$blogPost = BlogPost::first();\r\necho \"&lt;div class='author_box'&gt;\". optional($blogPost-&gt;author)-&gt;name. \"&lt;\/div&gt;\";<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"2","etiketler":"php,laravel","aktif":"1","sira":"9","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-16 10:14:20"},
    {"id":"12","baslik":"Bilmediğiniz Laravel ipuçları\/püf noktaları-4","url":"bilmediginiz-laravel-ipuclari-puf-noktalari-4","icerik":"<h2>View Composers kullanıyor musunuz?<\/h2>\r\n\r\n<p>View composers, her g&ouml;r&uuml;nt&uuml;leme dosyası oluşturulduğunda verileri bir g&ouml;r&uuml;n&uuml;me bağlar. Ya da başka bir deyişle: Laravel&#39;e, g&ouml;r&uuml;n&uuml;m her oluşturulduğunda bir g&ouml;r&uuml;n&uuml;me bir dizi parametre g&ouml;ndermesini s&ouml;yleyebilirsiniz. Diyelim ki bir <code>alert.error<\/code> g&ouml;r&uuml;n&uuml;m&uuml;n&uuml;z var (<code>resources\/views\/alerts\/error.blade.php<\/code>) ve i&ccedil;inde belirli bir değişken <code>$error_prefix&nbsp;<\/code>istediğinizi varsayalım. Bir servis sağlayıcısının i&ccedil;inde:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">View::composer('dashboard', function (View $view) {\r\n    $view-&gt;with(\r\n        'error_prefix',\r\n        'Bazı şeyler'\r\n    );\r\n});<\/code><\/pre>\r\n\r\n<p>(Ayrıca t&uuml;m bir besteci sınıfını ayarlayabilir ve <code>View::composer(&#39;error_prefix&#39;, ErrorComposer::class)<\/code>&#39;ı &ccedil;alıştırabilirsiniz ve bu <code>ErrorComposer<\/code>&nbsp;i&ccedil;inde bir <code>compose(View $view)<\/code> y&ouml;ntemi vardır)<\/p>\r\n\r\n<hr \/>\r\n<h3>Bir dizi ile &ccedil;alıştığınızdan emin olmak i&ccedil;in <code>array_wrap()<\/code> kullanın<\/h3>\r\n\r\n<p>Bazen bir dizi ile &ccedil;alışmanız gerekir, ancak sağlanan veriler farklı bir veri t&uuml;r&uuml; olabilir - bu durumda diziyi bir diziye sarmak isteyeceksiniz (dizideki tek &ouml;ğe olacaktır). Bunu yapmak basit:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$value = foo();\r\nif (!is_array($value)) {\r\n    $value = [$value];\r\n}\r\nforeach($value as $row) { \/* ... *\/ }<\/code><\/pre>\r\n\r\n<p>Ve yukarıdaki snippet basitleştirilebilir (ve tek bir satıra yazılabilir), ancak Laravel&#39;in yardımcı işlevi <code>array_wrap()<\/code> kullanmak biraz daha temiz;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$value = array_wrap(foo());\r\nforeach($value as $row) { \/* ... *\/ }<\/code><\/pre>\r\n\r\n<pre>\r\n<code class=\"language-php\">$value = array_wrap(['a','b']); \/\/ ['a', 'b']\r\n$value = array_wrap('asdf'); \/\/ ['asdf']<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>Eloquent: &Ccedil;ıktına toArray() (veya toJson()) &ouml;ğesine veri ekleyin<\/h2>\r\n\r\n<p>Bir User modeliniz olduğunu ve 1 kimliğine sahip kullanıcının y&ouml;netici olduğunu bildiğinizi varsayalım. Bir toArray() işlemi yaptığınızda veya JSON&#39;a dışa aktardığınızda, admin olup olmadığını belirtmek i&ccedil;in bir şeyler &ccedil;ıktısı almak isteyebilirsiniz. Biraz kod ile Eloquent&#39;ı bunu otomatik olarak ekleyebilirsiniz. Bunun gibi bir şey yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class User extends Model{\r\n    protected $appends = ['is_admin'];\r\n    public function getIsAdminAttribute(){\r\n        return $this-&gt;attributes['id'] === 1;\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>Not: Bu, veritabanı satırında bu satırın geldiği is_admin s&uuml;tunu olmadığını varsayar. Aksi halde zaten dahil olurdu.&nbsp;Ayrıca &ccedil;alışma zamanında şu şekilde veri eklemeye de karar verebilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">return $user-&gt;append('is_admin')-&gt;toArray();\r\n\/\/ yada\r\nreturn $user-&gt;setAppends(['is_admin'])-&gt;toArray();<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>Dizeleri str_plural() ile &ccedil;oğullaştırma<\/h2>\r\n\r\n<p>Bazen &quot;5 aktif mesaj&quot; (&ccedil;oğul) veya &quot;1 aktif mesaj&quot; (tekil) gibi bir &ccedil;ıktı almanız gerekir. Hızlı if \/ else mantığı yazabilir ve bu şekilde işleyebilirsiniz. Veya <code>str_plural()&nbsp;<\/code>kullanın.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$my_bottles = [1,2,3];\r\necho \"I have \" . count($my_bottles). \" \" . str_plural('bottle', count($my_bottles));\r\n$your_bottles = [1];\r\necho \"You have \" . count($your_bottles). \" \" . str_plural('bottle', count($your_bottles));<\/code><\/pre>\r\n\r\n<p>Yukarıdaki &#39;I have 3 bottles&#39; (&ccedil;oğul!) Ve &#39;You have 1 bottle&#39; (tekil!) &Ccedil;ıktılar.<\/p>\r\n\r\n<p>Bunun tersi bir işlevi de vardır: <code>str_singular()<\/code><\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$singular = str_singular('cars');\/\/ car\r\n$singular = str_singular('children');\/\/ child<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>Ge&ccedil;erli sayfanın her iki tarafında ka&ccedil; bağlantı g&ouml;r&uuml;nt&uuml;leneceğini tanımlamak i&ccedil;in Pagination&#39;ın onEachSide(5) işlevini kullanın<\/h2>\r\n\r\n<p>Eloquent Query Builder&#39;da <code>-&gt;paginate($per_page)<\/code> y&ouml;ntemini kullanırsanız, bazen &#39;current&#39; sayfanın her bir y&uuml;z&uuml;n&uuml; ka&ccedil; bağlantı g&ouml;stereceğini kolayca ayarlayabilmenizi isteyebilirsiniz. Şimdi, onEachSide() y&ouml;ntemini kullanmak ve anlamak &ccedil;ok kolay.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$posts = BlogPost::paginate(15)-&gt;onEachSide(2);<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>Bir ilişkinin sayısını (*) almak i&ccedil;in withCount(&#39;relation_name&#39;) kullanın<\/h2>\r\n\r\n<pre>\r\n<code class=\"language-php\">class BlogPost extends Model {\r\n    function comments() {\r\n       return $this-&gt;hasMany(Comment::class);\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>Ve bir <code>BlogPost<\/code>&nbsp;nesnesi verildiğinde, onunla ka&ccedil; yorum olduğunu &ouml;ğrenebilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$blogPosts = BlogPosts::withCount('comments')-&gt;get();\r\nforeach($blogPosts as $blogPost) {\r\n   echo $blogPost-&gt;comments_count;\r\n}<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>Bir denetleyicinin eylemine bir URL oluşturmak i&ccedil;in action() kullanın<\/h2>\r\n\r\n<p><code>BlogViewController&nbsp;<\/code>adında bir denetleyiciniz olduğunu biliyorsanız, tıklanabilir bir bağlantı almak i&ccedil;in aşağıdakileri y&uuml;r&uuml;tebilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$url =  action('BlogViewController@show', ['id' =&gt; $blogPost-&gt;id]);\r\necho '&lt;a href=\"' . $url . '\"&gt;Tıkla&lt;\/a&gt;';\r\n$url_alternative = action([BlogViewController::class, 'show'], ['id'=&gt;$blogPost-&gt;id]);\r\necho '&lt;a href=\"' . $url_alternative .'\"&gt;Tıkla&lt;\/a&gt;';<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>View::first([...]) var olan bir diziden ilk g&ouml;r&uuml;n&uuml;m&uuml; d&ouml;nd&uuml;rmek i&ccedil;in (ve Blade&#39;in @includeFirst([...]) benzer y&ouml;nergesi)<\/h2>\r\n\r\n<p>Her ikisi de benzer şekilde &ccedil;alışır. <code>[&#39;actions.something_specific&#39;,&#39;actions.default&#39;]<\/code> gibi bir diziniz varsa &ouml;nce bir <code>something_specific<\/code>&nbsp;g&ouml;r&uuml;n&uuml;m&uuml; denemek ve g&ouml;stermek i&ccedil;in aşağıdakileri yapabilirsiniz, ancak yoksa <code>default<\/code>&nbsp; g&ouml;r&uuml;n&uuml;me geri d&ouml;nebilirsiniz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$data = ['message' =&gt; 'something here'];\r\nreturn view()-&gt;first(\r\n    ['actions.something_specific','actions.default'], $data\r\n);<\/code><\/pre>\r\n\r\n<p>Veya aynı şeyi blade dosyasında yapmak i&ccedil;in:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">@includeFirst(['actions.something_specific','actions.default'], $data)<\/code><\/pre>\r\n\r\n<p><code>View::exists(&#39;actions.something_specific&#39;)<\/code>&nbsp;varsa true değerini d&ouml;nd&uuml;r&uuml;p d&ouml;nd&uuml;rmediğini kontrol eder.<\/p>\r\n\r\n<p>Kontrol etmek i&ccedil;in diğer bazı yararlı bı&ccedil;ak direktifleri:<\/p>\r\n\r\n<ul>\r\n\t<li><code>@includeIf(&#39;view_name&#39;, [&#39;some&#39;=&gt;&#39;data&#39;])<\/code>&nbsp;- varsa g&ouml;r&uuml;n&uuml;m&uuml; dahil et<\/li>\r\n\t<li><code>@includeWhen($boolean_value, &#39;view_name&#39;, [&#39;some&#39;=&gt;&#39;data&#39;])<\/code>&nbsp;- ilk parametre ($boolean_value) doğruysa g&ouml;r&uuml;n&uuml;m&uuml; dahil et<\/li>\r\n<\/ul>\r\n\r\n<hr \/>\r\n<h2>Blade dosyasından hizmetleri blade dosyasından enjekte etme<\/h2>\r\n\r\n<p><code>SomeCoolService&nbsp;<\/code>servisiniz olduğunu ve bunun blade i&ccedil;indeki <code>someFunction<\/code>&nbsp;y&ouml;ntemini &ccedil;ağırmak istediğinizi varsayalım. Bir g&ouml;r&uuml;n&uuml;m oluşturucusu kullanarak bu g&ouml;r&uuml;n&uuml;me bir <code>SomeCoolService<\/code>&nbsp;g&ouml;nderebilirsiniz veya blade dosyalarınızın i&ccedil;inden her şeyi yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">@inject('someCoolService', 'App\\Services\\SomeCoolService')\r\n&lt;div&gt;\r\n    Aylık Gelir: {{ $someCoolService-&gt;someFunction() }}.\r\n&lt;\/div&gt;<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>Zincirleme Koleksiyon &ccedil;ağrılarınızda dump() y&ouml;ntemini kullanın<\/h2>\r\n\r\n<p>Bir Koleksiyonu sıralıyorsanız ve filtreliyorsanız, hata ayıklama sırasında b&ouml;yle bir şey yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$collection = collect(['John Doe', 'Jane Doe'])-&gt;filter($some_filtering_func);\r\ndump($collection);\r\n$collection-&gt;map($some_mapping_func);<\/code><\/pre>\r\n\r\n<p>Ancak Collection sınıfında d&ouml;k&uuml;m&uuml;n&uuml; biraz daha temiz hale getirebilecek bir y&ouml;ntem var &quot;<code>dump<\/code>&quot;:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$collection = collect(['John Doe', 'Jane Doe'])\r\n        -&gt;filter($some_filtering_func)\r\n        -&gt;dump($collection) \/\/ &lt;&lt;\r\n        -&gt;map($some_mapping_func);<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>Laravel&nbsp;Dump Server<\/h2>\r\n\r\n<p>Bu ger&ccedil;ekten Laravel&#39;in gizli veya gizli bir &ouml;zelliği değil. Ancak, olduk&ccedil;a yenidir, bu y&uuml;zden onu kullanmayan bazı geliştiriciler olabilir.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan dump-server<\/code><\/pre>\r\n\r\n<p>Kodunuz bir <code>dump(...)<\/code> veya <code>dd(...)<\/code> &ccedil;ağrısıyla her karşılaştığında, istekte g&ouml;r&uuml;nt&uuml;lenmez ancak terminalinizde (<code>php artisan dump-server<\/code> komutunun &ccedil;alıştığı yerde) g&ouml;r&uuml;n&uuml;r. Bu, API&#39;lar ve webhooks ile hata ayıklama yaparken b&uuml;y&uuml;k bir zaman tasarrufu sağlayabilir. Sadece &ccedil;alıştığını unutmayın ve <code>dd()<\/code> &ccedil;ağrıları neden boş bir sayfa g&ouml;steriyor karıştı!<\/p>\r\n\r\n<hr \/>\r\n<h2>Blade&#39;deki &ouml;zel if ifadeleri<\/h2>\r\n\r\n<p>AppServiceProvider&#39;ın boot y&ouml;ntemine aşağıdakileri ekleyebilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Blade::if('env', function ($environment) {\r\n    return app()-&gt;environment($environment);\r\n});<\/code><\/pre>\r\n\r\n<p>Daha sonra blade dosyalarınızın i&ccedil;inde <code>@env(&#39;production&#39;)<\/code> ... <code>@elseenv(&#39;testing&#39;)<\/code> ... <code>@endenv<\/code> kullanabilirsiniz. &#39;env&#39; kelimesini dilediğiniz gibi değiştirin!<\/p>\r\n\r\n<hr \/>\r\n<h2>İsteklerdeki diğer bazı yararlı işlevler<\/h2>\r\n\r\n<p>İşte ana Request sınıfında bilmediğiniz bazı y&ouml;ntemlere hızlı bir genel bakış. Bazıları olduk&ccedil;a yaygındır, &ccedil;oğu sadece y&ouml;ntem adından ne yaptıkları a&ccedil;ıktır. Dahil etmediğim bir&ccedil;ok kişi var, bu y&uuml;zden Request sınıfına kendiniz g&ouml;z atmanızı tavsiye ederim.<\/p>\r\n\r\n<h3>Request::create()<\/h3>\r\n\r\n<p>Request::create(), bir istek oluşturmanız gerektiğinde yararlıdır. Nasıl ayarlayacağınız aşağıda a&ccedil;ıklanmıştır:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$created = Request::create(\r\n   '\/forum\/thread\/123', \/\/ url\r\n   'POST', \/\/method\r\n   ['reply_body' =&gt; 'Some reply to a thread'], \/\/ attributes\r\n   [ \/* cookies *\/ ],\r\n   [ \/* files *\/ ],\r\n   [ \/* server *\/ ],\r\n   null \/* content *\/\r\n);<\/code><\/pre>\r\n\r\n<h3>Request::method()<\/h3>\r\n\r\n<p><code>Request::method()<\/code> (<code>Request::getMethod()&nbsp;<\/code>i&ccedil;in diğer ad, y&ouml;ntemin b&uuml;y&uuml;k harfli bir dizesini d&ouml;nd&uuml;r&uuml;r (&#39;GET&#39;, &#39;POST&#39;, &#39;PUT&#39; vb.) HTTP istekleri s&ouml;z konusu olduğunda tarayıcılardaki sınırlamalar nedeniyle (yalnızca GET \/ POST yapabilme), Laravel DELETE, PATCH (vb.) isteklerini &#39;taklit eder&#39;. &#39;Ger&ccedil;ek&#39; isteği (GET veya POST) bulmak istiyorsanız <code>getRealMethod()<\/code> kullanabilirsiniz.<\/p>\r\n\r\n<h3>Request::fullUrl()<\/h3>\r\n\r\n<p><code>Request::fullUrl():<span style=\"font-size:11px\"><big> <\/big><\/span><\/code>t&uuml;m url&#39;yi d&ouml;nd&uuml;r&uuml;r (&#39;http:\/\/yoursite\/segment1\/seg2&#39;)<\/p>\r\n\r\n<h3>Request::segment()<\/h3>\r\n\r\n<p><code>Request::segments()&nbsp;<\/code>istek yolu i&ccedil;in t&uuml;m segmentlerin bir dizisini d&ouml;nd&uuml;r&uuml;r. &Uuml;&ccedil;&uuml;nc&uuml; segmenti almak i&ccedil;in <code>Request::segment(3,&#39;some-optional-default&#39;)&nbsp;<\/code>kullanabilirsiniz (veya yoksa varsayılanı da kullanabilirsiniz)<\/p>\r\n\r\n<h3>Request::path()<\/h3>\r\n\r\n<p><code>Request::path()<\/code>&nbsp;yolu d&ouml;nd&uuml;r&uuml;r (<small><code>blog\/laravel-features-you-may-not-know-about<\/code><\/small>)<\/p>\r\n\r\n<h3>Request::ajax()<\/h3>\r\n\r\n<p><code>Request::ajax()<\/code>&nbsp;and&nbsp;<code>Request::isXmlHttpRequest()<\/code>:&nbsp;İstek bir XMLHttpRequest ise bunların her ikisi de true değerini d&ouml;nd&uuml;r&uuml;r.<\/p>\r\n\r\n<h3>Request::hasPreviousSession()<\/h3>\r\n\r\n<p><code>Request::hasPreviousSession()&nbsp;<\/code>isteğin &ouml;nceki isteklerden birinde başlatılan bir Oturum i&ccedil;erip i&ccedil;ermediğini g&ouml;steren bir boolean değeri d&ouml;nd&uuml;r&uuml;r.<\/p>\r\n\r\n<h3>Request::getClientIp()<\/h3>\r\n\r\n<p><code>Request::getClientIp()&nbsp;<\/code>kendisi bir IP adresi dizisi d&ouml;nd&uuml;ren <code>Request::getClientIps()<\/code> &ouml;ğesinin ilk IP&#39;sini d&ouml;nd&uuml;r&uuml;r. <code>getclientIps()<\/code> y&ouml;nteminden ilk IP &#39;en g&uuml;venilir&#39; IP&#39;dir. Bir istek bir t&uuml;r proxy &uuml;zerinden gelmedik&ccedil;e, <code>getclientIps()<\/code> i&ccedil;inde muhtemelen yalnızca bir IP&#39;niz olur<\/p>\r\n\r\n<h3>Request::getUserInfo()<\/h3>\r\n\r\n<p><code>Request::getUserInfo()<\/code>&nbsp;işlevinin Laravel&#39;in kimliği doğrulanmış kullanıcısıyla ilgisi yoktur. Bu Symfony Request sınıfının bir par&ccedil;asıdır ve&nbsp;<code>$_SERVER[&#39;PHP_AUTH_USER&#39;] . &#39;:&#39; . $_SERVER[&#39;PHP_AUTH_PW&#39;] d&ouml;nd&uuml;r&uuml;r ve<\/code>&nbsp;bu değerleri Temel HTTP Kimlik Doğrulaması&#39;ndan alır. <a href=\"https:\/\/www.php.net\/manual\/en\/features.http-auth.php\" target=\"_blank\">bakın<\/a>.<\/p>","kategori_id":"2","etiketler":"php,laravel","aktif":"1","sira":"9","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-16 11:06:07"},
    {"id":"13","baslik":"Array Destructuring","url":"array-destructuring","icerik":"<h2>Array Destructuring Nedir<\/h2>\r\n\r\n<p>Array Destructuring, PHP 7.1 (Aralık 2016&#39;da) ile tanıtılan yeni bir &ouml;zelliktir. Biraz daha temiz kod &uuml;retmeye yardımcı olur.&nbsp;<code>list()<\/code> kullanımının yerini alıyor.<\/p>\r\n\r\n<h3>normal değişkenlerden değer atama<\/h3>\r\n\r\n<p>PHP&#39;de şu diziye sahip olduğumuzu varsayalım: ara&ccedil;, renk ve marka olmak &uuml;zere 3 değere sahip alt diziler i&ccedil;eren bir dizi.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$araclar = [\r\n     ['araba', 'kırmızı', 'Volvo'],\r\n     ['motor', 'siyah', 'Yamaha'],\r\n     ['araba', 'kırmızı', 'Ford'],\r\n];<\/code><\/pre>\r\n\r\n<p>Her birini yinelemek istiyorsanız, b&ouml;yle bir şey yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">foreach ($araclar as $arac) {\r\n     $tip = $arac[0];\r\n     $renk = $arac[1];\r\n     $marka = $arac[2];\r\n     echo \"renk: $renk, tip:$tip, marka:$marka \\n\";\r\n}<\/code><\/pre>\r\n\r\n<p>Ve d&uuml;r&uuml;st olmak gerekirse, bu kodda kesinlikle yanlış bir şey yok. Ancak, Array Destructuring ile daha temiz kod yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">foreach ($araclar as $arac) {\r\n    [$tip,$renk,$marka] = $arac;\r\n     echo \"renk:$renk, tip:$tip, marka:$marka \\n\";\r\n}<\/code><\/pre>\r\n\r\n<p>Bu, normal dizi s&ouml;zdizimine benzeyen &ccedil;ok basit bir s&ouml;zdizimidir. Bu tam olarak aynı &ccedil;ıktıyı &uuml;retecektir (bu nedenle <code>$renk<\/code> ilk dizi i&ccedil;in &#39;kırmızı&#39; olacaktır).<\/p>\r\n\r\n<h2>PHP&#39;de bir diziyi yok ederken bir dizideki ilk&nbsp;&ouml;ğenin yoksayılması<\/h2>\r\n\r\n<p>Peki sadece rengi ve markayı &ouml;nemserseniz? (yani her dizideki ilk &ouml;ğeyi yoksaymak istersiniz - <code>$arac[0]<\/code>)? Kullanılmayan bir değişken oluşturmaya gerek yoktur. Bunu sadece yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">foreach ($araclar as $arac) {\r\n    [,$renk,$marka] = $arac;\r\n    echo \"renk:$renk, marka:$marka \\n\";\r\n}<\/code><\/pre>\r\n\r\n<h2>array destructuring ile list() işlevini kullanma arasındaki fark nedir?<\/h2>\r\n\r\n<p>list() (PHP4&#39;ten beri var olan) kullanarak aşağıdakine benzer bir şey de yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">foreach ($araclar as $arac) {\r\n     list($tip,$renk,$marka) = $arac;\r\n     echo \"renk:$renk, tip:$ip, marka:$marka \\n\";\r\n}<\/code><\/pre>\r\n\r\n<p>Bu, aynı &ccedil;ıktıyı &uuml;retecektir. Bu &ouml;rneklerde, yeni yol daha g&uuml;zel g&ouml;r&uuml;nmesi ve daha az dağınık olması dışında, ger&ccedil;ekten hi&ccedil;bir fark yoktur. l<code>ist()<\/code> ile bunu yapmanın bu yeni yolu arasında ger&ccedil;ek bir fark yoktur.<\/p>\r\n\r\n<h3>PHP 7.1&#39;de list()&#39;deki bazı değişiklikler hakkında kısa bir not<\/h3>\r\n\r\n<p>PHP 7.1&#39;de <code>list()<\/code> i&ccedil;in bazı değişiklikler olduğunu ve bu gibi ayarlamak istediğiniz değişkenleri belirtebileceğinizi belirtmek gerekir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$car = ['renk' =&gt; 'Kırmızı','marka' =&gt; 'BMW',];\r\nlist('marka' =&gt; $isim) = $car;\r\nvar_dump($isim); \/\/ string(3) \"BMW\"<\/code><\/pre>\r\n\r\n<p>Bu s&ouml;zdizimini ilk g&ouml;rd&uuml;ğ&uuml;mde bunun bir hata olacağından emindim. <code>list()<\/code> satırı ile ilgili her şey yanlış g&ouml;r&uuml;n&uuml;yor. Ancak 7.1&#39;de gayet iyi &ccedil;alışıyor. <code>$company_name<\/code>, dizinin &#39;marka&#39; &ouml;ğesine eşittir.<\/p>","kategori_id":"1","etiketler":"php,Array Destructuring,php7","aktif":"1","sira":"27","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"14","baslik":"Repository Design Pattern","url":"repository-design-pattern","icerik":"<p>Repository Pattern&#39;i&nbsp;&ccedil;ok yaygın olarak kullanılır. Diyelim ki b&ouml;yle bir komut dosyanız var;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$blog_posts_in_category = Posts::where(\"category_id\",$category_id)\r\n               -&gt;orderBy(\"id\",\"desc\")\r\n               -&gt;where(\"is_published\",true)\r\n              -&gt;get();\r\nvar_dump($blog_posts_in_category);<\/code><\/pre>\r\n\r\n<p>Bu k&ouml;t&uuml; bir kod değil ancak yerine;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$postsRepo = new PostsRepo;\r\n$blog_posts_in_category = $postsRepo-&gt;postsInCategory($category_id);\r\nvar_dump($blog_posts_in_category);<\/code><\/pre>\r\n\r\n<p>kullanılması&nbsp;daha temiz ve başka bir yerde kullanmak daha kolay. <code>PostsRepo <\/code>sınıfı ş&ouml;yle g&ouml;r&uuml;necektir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class PostsRepo {\r\n   function postsInCategory($category_id) {\r\n        return  Posts::where(\"category_id\",$category_id)\r\n                      -&gt;orderBy(\"id\",\"desc\")\r\n                      -&gt;where(\"is_published\",true)\r\n                      -&gt;get();\r\n   }\r\n}<\/code><\/pre>\r\n\r\n<p>Bunun birka&ccedil; avantajı vardır:<\/p>\r\n\r\n<ul>\r\n\t<li>Orijinal sınıf &ccedil;ok daha temiz ve kolay okunur.<\/li>\r\n\t<li>Controller &ccedil;ok daha basit - repository&#39;de ne olduğu hakkında hi&ccedil;bir fikri yok.<\/li>\r\n\t<li>Kopyalama \/ yapıştırma olmadan aynı kod par&ccedil;asını tekrar kullanabilirsiniz. PostsRepo nesnesindeki <code>postsInCategory()<\/code> y&ouml;ntemini &ccedil;ağırmanız yeterlidir.<\/li>\r\n\t<li>Eğer okursanız, t&uuml;m kod tabanınız boyunca repo uygulamasının değiştirilmesinin daha kolay ve test i&ccedil;in daha kolay olduğunu g&ouml;receksiniz.<\/li>\r\n<\/ul>\r\n\r\n<h2>Laravel Uygulamalarında Repository Pattern Kullanma<\/h2>\r\n\r\n<p>Laravel gibi bir &ccedil;er&ccedil;eveyi kullanmanın en b&uuml;y&uuml;k avantajı, &ccedil;ekirdek sistemde bu kadar &ccedil;ok &ouml;zelliğe sahip olmanızdır. Bunlardan biri, sınıf ipucu ile otomatik olarak sınıf enjekte edebiliyor.&nbsp;Yukarıdaki kodda bazı değişiklikler yapalım. Başlamak i&ccedil;in, depo i&ccedil;in bir aray&uuml;z yapalım.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">interface PostsRepoInterface {\r\n  function postsInCategory();\r\n}<\/code><\/pre>\r\n\r\n<p>Ve PostsRepo sınıfının implement edin.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class PostsRepo implements PostsRepoInterface {\r\n       function postsInCategory($category_id) {\r\n       return  Posts::where(\"category_id\",$category_id)\r\n                      -&gt;orderBy(\"id\",\"desc\")\r\n                      -&gt;where(\"is_published\",true)\r\n                      -&gt;get();\r\n   }\r\n}<\/code><\/pre>\r\n\r\n<p>Daha sonra kontrol&ouml;rlerimizde (&ouml;rneğin, bir <code>ViewPostsController<\/code>) Laravel&#39;in, aray&uuml;ze işaret eden bir param gerektirerek PostsRepo&#39;ya otomatik olarak enjekte etmesini sağlayabilirsiniz. (Laravel&#39;e aray&uuml;z belirtildiğinde hangi sınıfı kullanacağımızı s&ouml;ylemeliyiz).<\/p>\r\n\r\n<h3>PostsRepoInterface&#39;i PostsRepo&#39;ya Bağlama<\/h3>\r\n\r\n<p>AppServiceProvider&#39;da (<code>app\/Providers\/AppServiceProvider.php<\/code>) aray&uuml;z&uuml; şu şekilde PostsRepo&#39;ya bağlamanız gerekir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">App::bind(PostsRepoInterface::class, PostsRepo::class)<\/code><\/pre>\r\n\r\n<p>Şimdi controller&#39;da (<code>ViewPostsController<\/code>) arabirimi ipucu yazabilirsiniz ve Laravel yeni bir PostsRepo nesnesi oluşturacaktır<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Class ViewPostsController extends Controller {\r\n   protected $postsRepo;\r\n   public function __construct(PostsRepoInterface $postsRepo) {\r\n       $this-&gt;postsRepo = $postsRepo;\r\n  }\r\n   public function viewCategory($category_id) {\r\n       $blog_posts_in_category = $this-&gt;postsRepo-&gt;postsInCategory($category_id);\r\n       var_dump($blog_posts_in_category);\r\n   }\r\n}<\/code><\/pre>\r\n\r\n<p>Artık <code>App::bind()<\/code> kodunu değiştirerek, kodunuzun her yerinde farklı bir repo kullanabilirsiniz. Bu kodun ilk s&uuml;r&uuml;m&uuml; (yukarıdaki ilk &ouml;rnek) Eloquent&#39;s where()-&gt;orderBy()-&gt;get() y&ouml;ntemini kullanmıştır. <code>PostsRepo<\/code>&nbsp; sınıfı da bunu kullanır. Ancak başka bir kaynağa değiştirmek istediğinizi daha sonra yeni bir sınıflar <code>PostsFilesRepo&nbsp;<\/code>yapabilir, <code>PostsRepoInterface&nbsp;<\/code>uygulamasını uygulayabilir ve ardından <code>App::bind()<\/code> &ouml;ğesini <code>App::bind(PostsRepoInterface::class, PostsFlatFileRepo::class)<\/code> olarak değiştirebilirsiniz. Artık Laravel, <code>PostsFlatFileRepo<\/code>&#39;yu kontrol&ouml;r&uuml;n&uuml;ze enjekte edecektir (ve controllerda hi&ccedil;bir değişiklik yapılmasına gerek yoktur).<\/p>\r\n\r\n<p>Bu aynı zamanda bir şeyleri kolayca test edebileceğiniz anlamına gelir. Daha &ouml;nce (statik olarak <code>BlogPosts::where()...<\/code>) test etmek biraz zor olurdu. Şimdi PostsRepo ile alay edebilir, otomatik olarak kontrol&ouml;r&uuml;n&uuml;ze enjekte edebilir ve testi daha iyi kontrol edebilirsiniz.<\/p>\r\n\r\n<p>Dikkat edilmesi gerekenler:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>PostsRepo&#39;daki her (public) y&ouml;ntemin de aray&uuml;zde olduğundan emin olun<\/strong>. Sonra PostsRepo&#39;yu PostsRepoInterface&#39;dan implement eden başka bir şeyle değiştirebilir ve &ccedil;ağrılacak t&uuml;m y&ouml;ntemlerin kapsanacağını bilirsiniz. Bir y&ouml;ntem (<code>PostsInCategory()<\/code> gibi) eklemeyi unuttuysanız, PHP size hemen bir hata g&ouml;nderir.<\/li>\r\n\t<li>Bir deponun farklı uygulamalarına sahip olursanız, ortak kodu paylaşmak i&ccedil;in soyut sınıfları kullanmayı d&uuml;ş&uuml;nebilirsiniz.<\/li>\r\n<\/ul>","kategori_id":"4","etiketler":"php,Design Patterns,Repository Design Pattern","aktif":"1","sira":"22","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"15","baslik":"Strategy Design Pattern","url":"strategy-design-pattern","icerik":"<p>Strateji tasarım deseni, yaygın olarak kullanılan bir başka tasarım desenidir.&nbsp;Bir g&ouml;revi ger&ccedil;ekleştirmenin birden fazla yolu (farklı uygulamalar) olabileceği zaman kullanılır.<\/p>\r\n\r\n<h2>&ouml;rnek<\/h2>\r\n\r\n<p>&Ouml;rneğin kaydetmeniz gereken dosyalarınız veya verileriniz varsa bunları bir veritabanına, yerel dosya sistemine kaydetme veya Amazon S3 gibi bir 3. taraf bulut depolama sağlayıcısına y&uuml;kleme se&ccedil;eneğiniz olabilir.&nbsp;B&ouml;yle bir if\/elseif\/else işlevi varsa, her &ouml;ğenin nerede saklanacağına karar vermenize izin veren uzun soluklu bir yazı yazabilirsiniz:<\/p>\r\n\r\n<p>Ama b&ouml;yle bir şey sakın yazmayın! Bu sadece ne yapabileceğinizi g&ouml;stermek i&ccedil;in;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">function save_data($input, $whereTo='db'){\r\n    if ($whereTo == 'db') {\r\n        var_dump(__FUNCTION__ . \" Saving '$input' to database\");\r\n    }elseif ($whereTo == 'filesystem') {\r\n        var_dump(__FUNCTION__ . \" Saving '$input' to local filesystem\");\r\n    }elseif ($whereTo == 'amazons3') {\r\n        var_dump(__FUNCTION__ . \" Saving '$input' to amazon s3\");\r\n    }else {\r\n        throw new \\Exception;\r\n    }\r\n}\r\n$data_to_save = \"foo\";\r\nsave_data($data_to_save,'db');<\/code><\/pre>\r\n\r\n<p>&Ccedil;ıktı&nbsp;<code>string(34) &quot;save_data Saving &#39;foo&#39; to database&quot;<\/code>&nbsp;olacaktır ancak kod ger&ccedil;ekten k&ouml;t&uuml;. Bu &ccedil;ok basitleştirilmiş bir &ouml;rnektir. Ger&ccedil;ekte, b&ouml;yle bir işlev i&ccedil;in b&uuml;y&uuml;k dağınık kod par&ccedil;aları olurdu. <code>Strategy Design Pattern<\/code> modelini kullanmak &ccedil;ok daha iyidir. İşte nasıl g&ouml;r&uuml;neceği:<\/p>\r\n\r\n<h3>Bir aray&uuml;z tanımlayın<\/h3>\r\n\r\n<p>Bir g&ouml;revi yapmanın yolu kendi sınıfı olacaktır (<code>DBSaver&nbsp;<\/code>i&ccedil;in bir sınıf, bir <code>LocalFileSaver<\/code> i&ccedil;in bir sınıf, <code>AmazonS3Saver<\/code> i&ccedil;in bir sınıf). Bu g&ouml;revlerin her birinde bir <code>save($input)<\/code> y&ouml;ntemi bulunmalıdır. Yani bir aray&uuml;z olmalı:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">interface Saver{\r\n    public function save($input);\r\n}<\/code><\/pre>\r\n\r\n<p>Bu tek bir y&ouml;ntemle &ccedil;ok basit bir aray&uuml;z. Ger&ccedil;ek d&uuml;nyada, biraz daha karmaşık bir şeye sahip olabilirsiniz.<\/p>\r\n\r\n<h3>Şimdi bu g&ouml;revi yerine getirmenin farklı yolları i&ccedil;in 3 &ouml;rnek sınıfa ihtiyacımız var<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">class DBSaver implements Saver{\r\n    public function save($input){\r\n        var_dump(__METHOD__ . \" Saving '$input' to DB table\");\r\n    }\r\n}\r\nclass LocalFileSaver implements Saver{\r\n    public function save($input){\r\n        var_dump(__METHOD__ . \" Saving '$input' to local filesystem\");\r\n    }\r\n}\r\nclass AmazonS3Saver implements Saver{\r\n    public function save($input){\r\n        var_dump(__METHOD__ . \" Saving '$input' to amazon s3 (cloud) storage\");\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<h3>Ve şimdi bir dosyayı kaydedelim<\/h3>\r\n\r\n<p>Belki bu veriler bir kullanıcı tarafından g&ouml;nderildi ve nereye kaydedileceğini se&ccedil;ebilirler. (Burada bunun i&ccedil;in bir sınıf oluşturmak yerine, işleri daha hızlı a&ccedil;ıklamak i&ccedil;in bir işlev kullanıyorum)<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user_submitted_data = \"foo\"; \/\/ kaydedilecek data\r\n$user_submitted_where_to_save_to = 'local';  \/\/ kaydedilecek yer\r\n$savers = [\r\n    'db'=&gt;DBSaver::class,\r\n    'local'=&gt;LocalFileSaver::class,\r\n    's3'=&gt;AmazonS3Saver::class,\r\n];\r\n$saver_object = new $savers[$user_submitted_where_to_save_to]; \/\/ örnek $savers['local'] ki LocalFileSaver() ile aynı\r\nsave($user_submitted_data, $saver_object);\r\nfunction save($data, Saver $saver){\r\n    return $saver-&gt;save($data);\r\n}<\/code><\/pre>\r\n\r\n<p>Sondaki fonksiyon bu basit &ouml;rnekte gerekli değildir.<\/p>\r\n\r\n<h3>Strateji modeli hakkında bazı notlar<\/h3>\r\n\r\n<ul>\r\n\t<li>Burada sadece aray&uuml;zler kullandım. Ancak soyut sınıfları da kullanabilirsiniz.<\/li>\r\n<\/ul>\r\n\r\n<h3>Strateji modelinin ger&ccedil;ek yaşam &ouml;rnekleri<\/h3>\r\n\r\n<p>Laravel kullanıyorsanız, muhtemelen <code>config\/logging.php<\/code> gibi yapılandırma se&ccedil;eneklerine alışırsınız:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">'default' =&gt; env('LOG_CHANNEL', 'stack'),<\/code><\/pre>\r\n\r\n<p>&#39;<code>Stack<\/code>&#39;, &#39;<code>stderr<\/code>&#39;, &#39;<code>single<\/code>&#39; gibi &ccedil;eşitli se&ccedil;eneklere ayarlayabilirsiniz, bunların her biri farklı bir g&uuml;nl&uuml;k kaydı y&uuml;kler ve bu strateji modelini kullanır.<\/p>\r\n\r\n<blockquote>\r\n<p>Tasarım deseni t&uuml;r&uuml;: Davranışsal tasarım deseni<\/p>\r\n<\/blockquote>","kategori_id":"4","etiketler":"php,Design Patterns,Strategy Design Pattern","aktif":"1","sira":"17","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"16","baslik":"Composite Design Pattern","url":"composite-design-pattern","icerik":"<p><code>composite design pattern<\/code>, &ouml;ğeleriniz ve ayrıca &ouml;ğe gruplarınız olduğunda kullanırsınız ve bunları aynı şekilde kullanmak istersiniz.<\/p>\r\n\r\n<p>&Ouml;rneğin, Bir <code>MenuItem<\/code>&nbsp;ve bir <code>MenuItemGroup<\/code>&nbsp;gibi bir arabirim varsa <code>MenuItem<\/code>&nbsp;ve <code>MenuItemGroup<\/code>&nbsp;bu arabirimi uygular.<\/p>\r\n\r\n<p>Yukarıdaki &ouml;rnekte, bir nesneniz olabilir ve bunun gibi basit bir şey yapabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$items [\r\n   new MenuItem(\"home\"),\r\n   new MenuItemGroup(['about us','services','contact us']),\r\n   new MenuItem(\"login\"),\r\n];\r\nforeach($items as $item) {\r\n  echo \"&lt;li&gt;\" . $item-&gt;render() . \"&lt;\/li&gt;\\n\";\r\n}<\/code><\/pre>\r\n\r\n<p>Tek men&uuml; &ouml;ğeleri i&ccedil;in, tek bir normal bağlantı &ccedil;ıkacağı a&ccedil;ıktır. Ancak <code>render()<\/code>&nbsp;fonksiyonu Men&uuml; &Ouml;ğesi Grubundaki &ouml;ğesinin alt men&uuml; &ouml;ğelerini bulmak i&ccedil;in kullanılır.<\/p>\r\n\r\n<p>Composite Design Pattern kullanmanın avantajları, kodunuzun (yukarıdaki foreach d&ouml;ng&uuml;s&uuml; gibi) bir nesnenin ne t&uuml;r olduğunu kontrol etmek zorunda olmamasıdır, &ccedil;&uuml;nk&uuml; aray&uuml;z&uuml; uyguladığını bilir ve tek tek &ouml;ğeler veya &ouml;ğe grupları i&ccedil;in aynı y&ouml;ntemleri &ccedil;ağırabilirsiniz ve beklendiği gibi &ccedil;alışacaktır.<\/p>\r\n\r\n<blockquote>\r\n<p>Tasarım deseni tipi: Yapısal tasarım deseni<\/p>\r\n<\/blockquote>","kategori_id":"4","etiketler":"php,Design Patterns,Composite Design Pattern","aktif":"1","sira":"23","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"17","baslik":"Singleton Design Pattern","url":"singleton-design-pattern","icerik":"<p>Uygulama geliştirirken en pop&uuml;ler tasarım desenlerinden biri tek nesne tasarım desenidir. Singleton tasarım deseni, hazırlayacağımız sınıftan sadece bir &ouml;rneğinin oluşturulmasını sağlar. Bu sayede nesnenin kopyalanmasını yada yeni bir tane oluşturmasını engeller ve nesneye ihtiya&ccedil; duyulduğunda o nesnenin daha &ouml;nceden oluşturulan &ouml;rneği &ccedil;ağırır.<\/p>\r\n\r\n<h2>Ne zaman bir singleton kullanılır<\/h2>\r\n\r\n<p>Singleton i&ccedil;in ideal kullanım, uygulamanızda belirli bir sınıfın yalnızca bir &ouml;rneğine ihtiya&ccedil; duyduğunuz zamandır. K&uuml;&ccedil;&uuml;k ve orta &ouml;l&ccedil;ekli uygulamalarda bunun en yaygın kullanımı, muhtemelen bir veritabanı bağlantısı oluşturmaktır. B&ouml;yle bir uygulamada, iki ayrı veritabanına bağlanmanız &ccedil;ok nadir olur. Aynı veritabanına birden fazla bağlantı a&ccedil;manın m&uuml;mk&uuml;n olmadığından da emin olmak istersiniz, &ccedil;&uuml;nk&uuml; bu verimsiz olacaktır.<\/p>\r\n\r\n<h2>Kurallar<\/h2>\r\n\r\n<ol>\r\n\t<li>Bir singleton yalnızca bir kez başlatılması gerektiğinden, birden fazla somutlaştırmayı &ouml;nlemek zorundasınız.<\/li>\r\n\t<li>Başlatma, kendi &ouml;rneğini oluşturmak i&ccedil;in kullanabileceğiniz genel bir statik y&ouml;ntem (genellikle <code>getInstance()<\/code> veya <code>singleton()<\/code> olarak adlandırılır) oluşturularak yapılmalıdır.<\/li>\r\n\t<li>Bir &ouml;rnek kendiliğinden oluşturulduğunda, bu &ouml;rneğin statik bir &ouml;znitelik i&ccedil;inde depolanması gerekir.<\/li>\r\n\t<li>Statik y&ouml;nteme ikinci &ccedil;ağrısında, kendisine yeniden bir &ouml;rnek oluşturmak yerine, ilk kez oluşturduğu nesneyi d&ouml;nd&uuml;r&uuml;r. Bu şekilde sınıf yalnızca bir kez başlatılabilir.<\/li>\r\n\t<li>Son olarak Singleton&#39;un bir &ouml;rneğinin PHP clone anahtar s&ouml;zc&uuml;ğ&uuml; kullanılarak klonlanmasını &ouml;nlemek i&ccedil;in Singleton private bir <code>_clone()<\/code> y&ouml;ntemine sahip olmalıdır.<\/li>\r\n<\/ol>\r\n\r\n<h2>Dezavantajları<\/h2>\r\n\r\n<ol>\r\n\t<li>Tipik olarak, <code>singleton<\/code>&nbsp;global durumda kullanılır, yani diğer sınıflar i&ccedil;inde &ccedil;ağrılırlar (&ouml;rneğin, <tt>ClassName::getInstance()<\/tt> aracılığıyla), bu sisteminize bağımlılıklar ekler.<\/li>\r\n\t<li>Tektonların test edilmesi son derece zordur &ccedil;&uuml;nk&uuml; statik y&ouml;ntemler saplanamaz ve sınıf &ouml;rneğini başlatmak ve almak i&ccedil;in statik bir y&ouml;ntem kullanılır.<\/li>\r\n\t<li>Singletons, kendi yaşam d&ouml;ng&uuml;lerini kontrol ederek tek sorumluluk prensibini ihlal eder, yani kendilerini yaratırlar.<\/li>\r\n<\/ol>\r\n\r\n<p>Veritabanı bağlantılarında, port bağlantılarında yada dosya işlemleri gibi tek bir nesneye ihtiya&ccedil; duyduğumuz zamanlarda kullanırız.<\/p>\r\n\r\n<h3>PDO veritabanı bağlantısı&nbsp;i&ccedil;in Tek Nesne Tasarım Kalıbı(Deseni) kullanımı:<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">if(!isset($db)) {\r\n  $instance = Connection::getInstance();\r\n  $db = $instance-&gt;getConnection();\r\n}\r\n\/* Örnek*\/\r\nclass User{\r\n  public function getUserList(){\r\n    global $db;\r\n    $query = $db-&gt;query(\"SELECT * FROM users\", PDO::FETCH_ASSOC);\r\n    if ( $query-&gt;rowCount() ){\r\n       return $query;\r\n    }\r\n  } \r\n}<\/code><\/pre>\r\n\r\n<p>PDO veritabanı bağlantısı<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/**\r\n* @pattern: Singleton Design Pattern\r\n *\/\r\nclass Connection{\r\n  private $connection;\r\n  public static $instance;\r\n  private $dbhost = 'project-db-host';\r\n  private $dbname = 'project-db-name';\r\n  private $dbuser  = 'project-db-user';\r\n  private $dbpass  = 'project-db-pass';\r\n  private function __construct(){\r\n    $this-&gt;connection = new PDO('mysql:host='.$this-&gt;dbhost.';dbname='.$this-&gt;dbname, $this-&gt;dbuser, $this-&gt;dbpass);\r\n  }\r\n  public static function getInstance(){\r\n    \/\/ instance tanımlı mı bakalım, değilse oluşturalım\r\n    if(!self::$instance) {\r\n        self::$instance = new self();\r\n    }\r\n    return self::$instance;\r\n  }\r\n  \/\/ dışarıdan kopyalanmasını engelledik\r\n  private function __clone() { }\r\n  \/\/ unserialize edilmesini engelledik\r\n  private function __wakeup() { }\r\n  \/\/ PDO bağlantısını döndürelim\r\n  public function getConnection(){\r\n      return $this-&gt;connection;\r\n  }\r\n}<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"4","etiketler":"php,PHP Design Patterns,Singleton Design Pattern","aktif":"1","sira":"18","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"18","baslik":"Multitons Design Pattern","url":"multitons-design-pattern","icerik":"<p>Bir multiton neredeyse bir singleton ile hemen hemen aynıdır, k&uuml;&ccedil;&uuml;k bir fark, bir multitonun kendi &ccedil;oklu &ouml;rneklerini depolayabilmesidir. Kendisinin yalnızca bir &ouml;rneğini depolayabilen tek singleton&#39;un aksine.<\/p>\r\n\r\n<h2>Ne zaman kullanılır?<\/h2>\r\n\r\n<p>Bir multiton i&ccedil;in ideal kullanım, belirli bir sınıfın birden &ccedil;ok &ouml;rneğini oluşturmanız gerektiğinde ve her &ouml;rneğe referans depolamak istediğiniz zamandır. Bu, yalnızca s&ouml;z konusu sınıfın az bir kısmını oluştururken ve kodunuzun farklı b&ouml;l&uuml;mlerindeki farklı &ouml;rneklere erişmek istediğinizde kullanışlıdır. Yalnızca en iyi ger&ccedil;ek d&uuml;nya kullanım &ouml;rneği olduğu i&ccedil;in bir veritabanı &ouml;rneği kullanacağım. 5-10&#39;dan daha fazla bir multiton &ouml;rneği oluşturmaya başlarsanız, muhtemelen bir multiton kullanmamalısınız ve nesneleri bir bağımlılık enjeksiyon kabında (DIC) depolamalısınız. Multitons yalnızca k&uuml;&ccedil;&uuml;k bir nesne koleksiyonu oluşturmak i&ccedil;indir.<\/p>\r\n\r\n<h2>Kurallar<\/h2>\r\n\r\n<ol>\r\n\t<li>Tıpkı bir singleton gibi, multitonların da &ouml;zel <code>__construct()<\/code> y&ouml;ntemi olmalıdır. &Ouml;rnekler statik bir <code>getInstance()<\/code> y&ouml;ntemi kullanılarak oluşturulmalıdır.<\/li>\r\n\t<li>Oluşturulan multiton her &ouml;rneği statik bir <code>$instances<\/code> &ouml;zniteliğinde saklanmalıdır.<\/li>\r\n\t<li><code>getInstance()<\/code> y&ouml;ntemi &ccedil;ağrıldığında, tek arg&uuml;man olarak bir değer iletilmelidir,&nbsp;bu değer,&nbsp;<code>$instances<\/code> &ouml;rneğini saklarken anahtar olarak kullanılmalıdır.<\/li>\r\n\t<li>Varolan bir &ouml;rneği almak i&ccedil;in, almak istediğiniz &ouml;rneğin adı yeni bir &ouml;rnek oluşturmak yerine &ouml;nceden başlatılmış &ouml;rneği d&ouml;nd&uuml;recek <code>getInstance()<\/code> y&ouml;ntemine iletilmelidir.<\/li>\r\n<\/ol>\r\n\r\n<h2>Dezavantajları<\/h2>\r\n\r\n<ol>\r\n\t<li>Global olarak &ccedil;ağrıldığından multitonlar&nbsp;kodunuza bağımlılıklar ekler.<\/li>\r\n\t<li>Statik y&ouml;ntemler ve nitelikler kullandıkları i&ccedil;in test edilmesi zordur.<\/li>\r\n<\/ol>\r\n\r\n<h2>&Ouml;rnek<\/h2>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Database {\r\n    \/**\r\n     * getInstance() methodu için depolama için kullanılır\r\n     *\/ \r\n    private static $instances = array();\r\n    \/**\r\n     * Yapıcı Metod, Sadece bu sınıfın içinden çağrılabilir\r\n     *\/\r\n    private function __construct() { }\r\n    \/**\r\n     * Sağlanan anahtarla bir tane yoksa yeni bir örnek oluşturun.\r\n     * Bir örnek oluşturulduktan sonra veya zaten oluşturulduysa, geri dönderir.\r\n     * @param $key Örneğin get\/set edilmesi için gereken anahtar\r\n     * @return self\r\n     *\/\r\n    public static function getInstance($key) {\r\n        \/\/ Bu anahtarla zaten bir örnek olup olmadığını kontrol eder\r\n        if(!array_key_exists($key, self::$instances)) {\r\n            \/\/ Örnek henüz mevcut değil, bu yüzden oluşturun\r\n            self::$instances[$key] = new self();\r\n        }\r\n        \/\/ Bu sınıfa ait doğru örneği döndürür\r\n        return self::$instances[$key];\r\n    }\r\n    \/**\r\n     * private klon fonksiyonu, Bu sınıfın hiçbir örneğinin olmadığından emin olur\r\n     * Clone anahtar sözcüğü kullanılarak klonlanabilir\r\n     *\/\r\n    private function __clone() { }\r\n}\r\n\/\/ Ana veritabanına ilk örneği oluşturma\r\n$master = Database::getInstance('master');\r\nvar_dump($master); \/\/ object(Database)#1 (0) { }\r\n\r\n\/\/ logger veritabanı için bu sınıfın ikinci örneğini oluşturma\r\n$logger = Database::getInstance('logger');\r\nvar_dump($logger); \/\/ object(Database)#2 (0) { }\r\n\r\n\/\/ Mevcut 'master' örneği multitondan alma\r\n$masterDupe = Database::getInstance('master');\r\nvar_dump($masterDupe); \/\/ object(Database)#1 (0) { }\r\n\r\n\/\/ Veritabanı nesneleri yeni anahtar sözcükle başlatılamaz, bu durumda ölümcül hatalara neden olur\r\n\/\/ Fatal error: Call to private Database::__construct() from invalid context\r\n$dbFatalError = new Database();\r\n\r\n\/\/ Veritabanı nesneleri klonlanamaz, bu durumda ölümcül hataya neden olur\r\n\/\/ PHP Fatal error:  Call to private Database::__clone()\r\n$dbCloneError = clone $masterDupe;<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"4","etiketler":"php,PHP Design Patterns,Multitons Design Pattern","aktif":"1","sira":"24","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"19","baslik":"Factory Design Pattern","url":"factory-design-pattern","icerik":"<p>Factory Design Pattern<\/p>","kategori_id":"4","etiketler":"php,PHP Design Patterns,Factory Design Pattern","aktif":"1","sira":"19","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"20","baslik":"Spring Framework Tarihi","url":"spring-framework-tarihi","icerik":"<p>Spring Framework tarihini anlamak i&ccedil;in Spring&#39;in doğduğu d&ouml;nemi d&uuml;ş&uuml;nmelisiniz. 90&#39;ların sonlarıydı ve .COM balonu ve Y2K ger&ccedil;ekleşiyordu.<\/p>\r\n\r\n<p>Sun&#39;daki bilgisayar bilimi &#39;uzmanları&#39; .COM şirketlerinin bilgi işlem ihtiya&ccedil;larını karşılamak i&ccedil;in J2EE&#39;yi yayınladı. Bu anabilgisayar&#39;ın &ccedil;ağıydı. B&uuml;y&uuml;k .COM web sitelerinin taleplerini karşılayacak kadar b&uuml;y&uuml;k bilgisayarlar inşa edemezdiniz - bir anabilgisayar bile y&uuml;k&uuml; kaldıramazdı.<\/p>\r\n\r\n<p>&Ouml;l&ccedil;eklendiremediğiniz i&ccedil;in &ouml;l&ccedil;eklendirmeniz gerekiyordu. Unutmayın, bu &#39;<code>cloud<\/code>&#39; &ouml;ncesi bilgi işlem. Kağıt &uuml;zerinde J2EE harika g&ouml;r&uuml;n&uuml;yordu. n-katmanlı bilişim en iyi şekilde. Sun, IBM ve Weblogic gibi şirketler J2EE&#39;yi &ouml;l&ccedil;eklenebilir kurumsal uygulamalar oluşturmanın &ldquo;THE&rdquo; yolu olarak tanıttılar. (veee, J2EE uygulama sunucuları i&ccedil;in milyonlarca dolar değerinde lisans satmanın harika bir yoluydu!)<\/p>\r\n\r\n<p>&Uuml;retimde J2EE ile yaşamak kağıt &uuml;zerinde olması gerektiği gibi &ccedil;alışmadı. Kırılgan ve bakımı karmaşıktı. Ticari uygulama sunucularının satın alınması pahalı ve destek s&ouml;zleşmeleri satın almak pahalıydı. A&ccedil;ık kaynak alternatifleri o sırada bebeklik d&ouml;nemindeydi.<\/p>\r\n\r\n<p>Pazar bozulmaya hazırdı. Spring Framework&nbsp;girdi. Spring, J2EE&#39;ye ilk uygun alternatifti. Spring hafifti, &ccedil;alıştırmak i&ccedil;in ağır bir ticari uygulama sunucusuna gerek yoktu. Spring ile kodlama basitti. Spring&#39;i yapılandırmak basitti. Spring&#39;in kullanım kolaylığı nedeniyle, &ccedil;er&ccedil;eve kurumsal uygulama geliştirme i&ccedil;in hızlı bir şekilde benimsenmiştir.<\/p>\r\n\r\n<p>Spring pazara geldiğinde, A&ccedil;ık kaynak yazılımı kuruluşta &ccedil;ekişmeye yeni başlamıştı. A&ccedil;ık Kaynak, topluluk projeleri ticari yazılım şirketleriyle nasıl rekabet edebilir?<\/p>\r\n\r\n<p>Hepimiz bunun son on yılda nasıl oynandığını biliyoruz. A&ccedil;ık Kaynak yazılımı kuruluşta gelişiyor ve Spring, Enterprise sınıfı Java geliştirme i&ccedil;in kullanılan 1 numaralı frameworkt&uuml;r.<\/p>","kategori_id":"6","etiketler":"spring boot,java","aktif":"1","sira":"25","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"21","baslik":"Spring Core Nedir?","url":"spring-core-nedir","icerik":"<p><code>Spring Framework<\/code>&nbsp;b&uuml;y&uuml;k bir projedir. Spring Framework etiketi altında aslında yaklaşık 20 farklı Spring projesi vardır. Spring MVC, Spring Security, Spring Integration, vb. Yani, &#39;Spring Core&#39; ne olduğu hakkında kafa karıştırmak kolay olurdu.<\/p>\r\n\r\n<p>Resmi Spring Core belgeleri, bu resmi i&ccedil;erir:<\/p>\r\n\r\n<p><img alt=\"\" src=\"\/upload\/files\/springCore.png\" \/><\/p>\r\n\r\n<p><code>Spring Core<\/code>&nbsp;tipik olarak Core container&nbsp;işlevselliğini ifade etmek i&ccedil;in kullanılır. Beans, Core, Context ve SpEL.<\/p>\r\n\r\n<p>Yaklaşık 30 Spring Framework projesi olsa da, hepsi bu temel konteynere bağlıdır. Bu, Spring Framework&#39;&uuml;n başlangıcından beri var olan bu temel işlevselliktir. <code>Spring Context<\/code>&#39;e sahip olan core container, Tersine &Ccedil;evirme yoluyla bizim i&ccedil;in bağımlılık enjeksiyonunu y&ouml;netir, diğer t&uuml;m Spring projeleri tarafından kullanılır.<\/p>","kategori_id":"6","etiketler":"java,Spring Core,spring boot","aktif":"1","sira":"20","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"22","baslik":"ExpressJS ile Rest API (local variable)","url":"expressjs-ile-rest-api-(local-variable)","icerik":"<pre>\r\n<code class=\"language-javascript\">const express = require(\"express\");\r\nconst app = express();\r\napp.use(express.json())\r\nconst kullanicilar = [{\r\n                        \"id\": 1,\r\n                        \"isim\": \"Lorem Ipsum\",\r\n                        \"email\": \"lorem@ipsum.com\",\r\n                        \"adres\": \"LA, USA\",\r\n                        \"tarih\": \"1570706637487\"\r\n                    }];\r\napp.get(\"\/\", (req, res) =&gt; {\r\n    res.status(200).send(kullanicilar);\r\n});\r\napp.post(\"\/create\", (req, res) =&gt; {\r\n    const kullanici = req.body;\r\n    if (kullanici.isim || kullanici.email || kullanici.adres) {\r\n        kullanicilar.push({id: kullanicilar.length + 1, ...kullanici, tarih: Date.now().toString() });\r\n        res.status(200).json({ mesaj: \"Kullanıcı Oluşturuldu\" });\r\n    }else{\r\n        res.status(401).json({ mesaj: \"Geçersiz İşlem\" });\r\n    }\r\n});\r\napp.put(\"\/update\/:id\", (req, res) =&gt; {\r\n    const kullanici_id = req.params.id;\r\n    const kullanici_update = req.body;\r\n    for (let kullanici of kullanicilar) {\r\n        if (kullanici.id == kullanici_id) {\r\n            if (kullanici_update.isim != null || undefined) kullanici.isim = kullanici_update.isim;\r\n            if (kullanici_update.email != null || undefined) kullanici.email = kullanici_update.email;\r\n            if (kullanici_update.adres != null || undefined) kullanici.adres = kullanici_update.adres;\r\n            return res.status(200).json({ mesaj: \"Kullanıcı Güncellendi\", Kullanıcı: kullanici });\r\n        }\r\n    }\r\n    res.status(404).json({ mesaj: \"Geçersiz Kullanıcı\" });\r\n});\r\napp.delete(\"\/delete\/:id\", (req, res) =&gt; {\r\n    const kullanici_id = req.params.id;\r\n    for (let kullanici of kullanicilar) {\r\n        if (kullanici.id == kullanici_id) {\r\n            kullanicilar.splice(kullanicilar.indexOf(kullanici), 1);\r\n            return res.status(200).json({mesaj: \"Kullanıcı Silindi\"});\r\n        }\r\n    }\r\n    res.status(404).json({ mesaj: \"Geçersiz Kullanıcı\" });\r\n});\r\napp.listen(3456, () =&gt; { console.log(\"http:\/\/localhost:3456\"); });\r\n\/*\r\nGET http:\/\/localhost:3456\/\r\n###\r\nPOST http:\/\/localhost:3456\/create\r\nContent-Type: application\/json\r\n{\r\n    \"isim\": \"Anıl Şenocak\",\r\n    \"email\": \"anil@senocak.com\"\r\n}\r\n###\r\nPUT http:\/\/localhost:3456\/update\/2\r\nContent-Type: application\/json\r\n{\r\n    \"isim\": \"Anıl Şenocak2\",\r\n    \"email\": \"anil@senocak.com2\"\r\n}\r\n###\r\nDELETE http:\/\/localhost:3456\/delete\/2\r\n*\/<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"3","etiketler":"nodejs,js,express","aktif":"1","sira":"26","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"23","baslik":"ExpressJS ile Rest API (MongoDB)","url":"expressjs-ile-rest-api-(mongodb)","icerik":"<pre>\r\n<code class=\"language-javascript\">const express = require(\"express\")\r\nconst mongoose = require(\"mongoose\")\r\nconst app = express()\r\nmongoose.connect(\"mongodb:\/\/localhost\/rest\", { useNewUrlParser: true, useUnifiedTopology: true })\r\nconst db = mongoose.connection\r\ndb.on(\"error\", (error)=&gt; { console.log(\"Error:\"+ error); })\r\ndb.once(\"open\", ()=&gt; { console.log(\"Connection ok\"); })\r\napp.use(express.json())\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    name: { type: String, required: true },\r\n    email:{ type: String, required: true },\r\n    date:{ type: String, required: true, default: Date.now }\r\n})\r\nconst User = mongoose.model(\"User\", userSchema);\r\nasync function getUser(req, res, next) {\r\n    let user;\r\n    try {\r\n        user = await User.findById(req.params.id)\r\n        if (user == null) {\r\n            return res.status(404).json({ message: \"User not found\"})\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).json({ message: error})\r\n    }\r\n    res.user = user\r\n    next()\r\n}\r\n\r\napp.get(\"\/\", async (req, res)=&gt;{\r\n    try {\r\n        const user = await User.find();\r\n        res.json(user)\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n})\r\napp.post(\"\/create\", async (req, res)=&gt;{\r\n    const user = new User({\r\n        name: req.body.name,\r\n        email: req.body.email\r\n    })\r\n    try {\r\n        const newUser = await user.save()\r\n        res.status(201).json(newUser);\r\n    } catch (error) {\r\n        res.status(400).json({ message: error.message });\r\n    }\r\n})\r\napp.get(\"\/read\/:id\", getUser, (req, res)=&gt;{\r\n    res.send(res.user);\r\n})\r\napp.patch(\"\/update\/:id\", getUser, async (req, res)=&gt;{ \r\n    if (req.body.name != null) {\r\n        res.user.name = req.body.name\r\n    }\r\n    if (req.body.email != null) {\r\n        res.user.email = req.body.email\r\n    }\r\n    try {\r\n        const updated = await res.user.save()\r\n        res.json({ message: \"User is updated\" });\r\n    } catch (error) {\r\n        res.status(400).json({ message: error.message });\r\n    }\r\n})\r\napp.delete(\"\/delete\/:id\", getUser, async (req, res)=&gt;{ \r\n    try {\r\n        await res.user.remove()\r\n        res.json({ message: \"User is deleted\" });\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n})  \r\napp.listen(3456, () =&gt; { console.log(\"http:\/\/localhost:3456\"); });\r\n\r\n\/*\r\nGET http:\/\/localhost:3456\/\r\n###\r\nPOST http:\/\/localhost:3456\/create\r\nContent-Type: application\/json\r\n{\r\n    \"name\": \"Anıl Şenocak\",\r\n    \"email\": \"anil@senocak.com\"\r\n}\r\n### \r\nGET http:\/\/localhost:3456\/read\/5da5a38573d89c8f3ce6636b\r\n###\r\nDELETE  http:\/\/localhost:3456\/delete\/5da5a38573d89c8f3ce6636b\r\n###\r\nPATCH http:\/\/localhost:3456\/update\/5da5a38573d89c8f3ce6636b\r\nContent-Type: application\/json\r\n{\r\n    \"name\": \"Anıl Şenocak2\",\r\n    \"email\": \"anil@senocak.com\"\r\n}\r\n*\/<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"3","etiketler":"nodejs,js,express","aktif":"1","sira":"21","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"24","baslik":"ExpressJS ile Rest API (Mysql)","url":"expressjs-ile-rest-api-(mysql)","icerik":"<pre>\r\n<code class=\"language-javascript\">var express = require('express');\r\nvar app = express();\r\nvar mysql      = require('mysql'); \r\n\r\nvar connection = mysql.createConnection({\r\n    host     : 'localhost',\r\n    user     : 'root',\r\n    password : '',\r\n    database : 'nodejsmysqlrest'\r\n});\r\nconnection.connect(function(err) {\r\n  if (err) throw err\r\n  console.log('Mysql Bağlandı')\r\n})\r\n\r\napp.use(express.json())\r\n\r\napp.get('\/', function (req, res) {\r\n   connection.query('select * from tablo', function (error, results, fields) {\r\n\t  if (error) throw error; \r\n      res.status(200).send(results); \r\n\t});\r\n});\r\n\r\napp.post('\/create', function (req, res) {\r\n    const kullanici = req.body;\r\n    if (kullanici.isim &amp;&amp; kullanici.email) {\r\n        connection.query('INSERT INTO tablo (isim, email) values (?, ?)', [req.body.isim,req.body.email], function (error, results, fields) {\r\n            if (error) throw error; \r\n            res.status(200).json({ mesaj: \"Kullanıcı Oluşturuldu\" });\r\n          });\r\n    }else{\r\n        res.status(401).json({ mesaj: \"Geçersiz İşlem\" });\r\n    }    \r\n });\r\n \r\n app.get('\/read\/:id', function (req, res) { \r\n    connection.query('select * from tablo where id=?', [req.params.id], function (error, results, fields) {\r\n        if (error) throw error;\r\n        if (results.length&gt;0) {\r\n            res.status(200).send(results); \r\n        }else{\r\n            res.status(401).json({ mesaj: \"Kullanıcı Bulunamadı\" });\r\n        }\r\n     });\r\n });\r\n \r\n app.put('\/update\/:id', function (req, res) {\r\n    connection.query('UPDATE tablo SET isim=?,email=? where id=?', [req.body.isim,req.body.email, req.params.id], function (error, results, fields) {\r\n        if (error) throw error; \r\n        res.status(200).json({ mesaj: \"Kullanıcı Güncellendi\" });\r\n    }); \r\n });\r\n \r\n app.delete('\/delete\/:id', function (req, res) {\r\n    connection.query('DELETE FROM tablo WHERE id=?', [req.params.id], function (error, results, fields) {\r\n       if (error) throw error;\r\n       return res.status(200).json({mesaj: \"Kullanıcı Silindi\"});\r\n     });\r\n });\r\n\r\nvar server = app.listen(3456,  \"127.0.0.1\", function () {\r\n    var host = server.address().address\r\n    var port = server.address().port\r\n    console.log(\"Example app listening at http:\/\/%s:%s\", host, port)\r\n});\r\n\r\n\/**\r\nCREATE TABLE `tablo` (\r\n  `id` int(11) NOT NULL,\r\n  `isim` varchar(255) CHARACTER SET utf8 NOT NULL,\r\n  `email` varchar(255) CHARACTER SET utf8 NOT NULL\r\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\r\n*\/\r\n\r\n\/*\r\nGET http:\/\/localhost:3456\/\r\n###\r\nPOST http:\/\/localhost:3456\/create\r\nContent-Type: application\/json\r\n{\r\n    \"isim\": \"Anıl Şenocak\",\r\n    \"email\": \"anil@senocak.com\"\r\n}\r\n###\r\nGET http:\/\/localhost:3456\/read\/4\r\n###\r\nPUT http:\/\/localhost:3456\/update\/4\r\nContent-Type: application\/json\r\n{\r\n    \"isim\": \"Anıl Şenocak2\",\r\n    \"email\": \"anil@senocak.com2\"\r\n}\r\n###\r\nDELETE http:\/\/localhost:3456\/delete\/4\r\n*\/<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"3","etiketler":"nodejs,js,express","aktif":"1","sira":"16","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"25","baslik":"Fastify ile Rest API (local variable)","url":"fastify-ile-rest-api-(local-variable)","icerik":"<pre>\r\n<code class=\"language-javascript\">const fastify = require('fastify')()\r\nconst kullanicilar = [{\r\n    \"id\": 1,\r\n    \"isim\": \"Lorem Ipsum\",\r\n    \"email\": \"lorem@ipsum.com\",\r\n    \"tarih\": \"1570706637487\"\r\n}];\r\nfastify.get('\/', function (request, response) { \r\n    response.res.statusCode=201\r\n    response.send(kullanicilar)\r\n})\r\nfastify.post(\"\/create\", function(request, response){\r\n    const kullanici = request.body;\r\n    if (kullanici.isim &amp;&amp; kullanici.email) {\r\n        kullanicilar.push({id: kullanicilar.length + 1, ...kullanici, tarih: Date.now().toString() });\r\n        response.res.statusCode=201\r\n        response.send({ mesaj: \"Kullanıcı Oluşturuldu\" })\r\n    }else{ \r\n        response.res.statusCode=401\r\n        response.send({ mesaj: \"Geçersiz İşlem\" })\r\n    }\r\n});\r\nfastify.get(\"\/read\/:id\", (request, response) =&gt; {\r\n    const kullanici_id = request.params.id;\r\n    const kullanici_update = request.body;\r\n    var bulundu_return\r\n    var bulundu = false\r\n    for (let kullanici of kullanicilar) { \r\n        if (kullanici.id == kullanici_id) {\r\n            bulundu = true\r\n            bulundu_return = kullanici\r\n        }\r\n    }\r\n    if (bulundu == true) {\r\n        response.res.statusCode=200\r\n        response.send(bulundu_return)\r\n    } else {\r\n        response.res.statusCode=401\r\n        response.send({ mesaj: \"Geçersiz İşlem\" })\r\n    }\r\n});\r\nfastify.put('\/update\/:id', function (request, response) {\r\n    const kullanici_id = request.params.id;\r\n    const kullanici_update = request.body; \r\n    var bulundu = false;\r\n    for (let kullanici of kullanicilar) { \r\n        if (kullanici.id == kullanici_id) {\r\n            if (kullanici_update.isim != null || undefined) kullanici.isim = kullanici_update.isim;\r\n            if (kullanici_update.email != null || undefined) kullanici.email = kullanici_update.email;\r\n            bulundu = true\r\n            break\r\n        }\r\n    }\r\n    if (bulundu == true) {\r\n        response.res.statusCode=200\r\n        response.send({ mesaj: \"Kullanıcı Güncellendi\"})\r\n    } else {\r\n        response.res.statusCode=401\r\n        response.send({ mesaj: \"Geçersiz İşlem\" })\r\n    }\r\n})\r\nfastify.delete('\/delete\/:id', function (request, response) {\r\n    const kullanici_id = request.params.id;\r\n    for (let kullanici of kullanicilar) {\r\n        if (kullanici.id == kullanici_id) {\r\n            kullanicilar.splice(kullanicilar.indexOf(kullanici), 1); \r\n            bulundu = true\r\n            break\r\n        }\r\n    } \r\n    if (bulundu == true) {\r\n        response.res.statusCode=200\r\n        response.send({ mesaj: \"Kullanıcı Silindi\"})\r\n    } else {\r\n        response.res.statusCode=401\r\n        response.send({ mesaj: \"Geçersiz İşlem\" })\r\n    }\r\n})\r\nfastify.listen(3456, function (err, address) {\r\n    if (err) {\r\n      console.log(err)\r\n      process.exit(1)\r\n    }\r\n    console.log(`${address}`)\r\n})\r\n\/*\r\nGET http:\/\/127.0.0.1:3456\/\r\n###\r\nPOST http:\/\/127.0.0.1:3456\/create\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl Şenocak\",\r\n    \"email\":\"anil@senocak.com\"\r\n}\r\n###\r\nGET http:\/\/127.0.0.1:3456\/read\/2\r\n###\r\nPUT http:\/\/127.0.0.1:3456\/update\/2\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl Şenocak2\",\r\n    \"email\":\"anil@senocak.com2\"\r\n}\r\n###\r\nDELETE http:\/\/127.0.0.1:3456\/delete\/2\r\n###\r\n*\/<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"3","etiketler":"nodejs,js,fastify","aktif":"1","sira":"15","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"26","baslik":"Flatiron ile Rest API (local variable)","url":"flatiron-ile-rest-api-(local-variable)","icerik":"<pre>\r\n<code class=\"language-javascript\">var flatiron = require('flatiron')\r\nvar app = flatiron.app;\r\napp.use(flatiron.plugins.http);\r\nconst kullanicilar = [{\r\n    \"id\": 1,\r\n    \"isim\": \"Lorem Ipsum\",\r\n    \"email\": \"lorem@ipsum.com\",\r\n    \"tarih\": \"1570706637487\"\r\n}];\r\napp.router.get('\/', function () {\r\n    this.res.writeHead(200, { 'Content-Type': 'text\/plain' }); \r\n    this.res.end(JSON.stringify(kullanicilar))\r\n});\r\napp.router.post('\/create', function () {\r\n    const kullanici = this.req.body;\r\n    if (kullanici.isim || kullanici.email) {\r\n        kullanicilar.push({id: kullanicilar.length + 1, ...kullanici, tarih: Date.now().toString() });\r\n        this.res.writeHead(201); \r\n        this.res.end(JSON.stringify({ mesaj: \"Kullanıcı Oluşturuldu\" }))\r\n    }else{\r\n        this.res.writeHead(404);  \r\n        this.res.end(JSON.stringify({ mesaj: \"Geçersiz İşlem\" }))\r\n    }\r\n});\r\napp.router.put('\/update\/:id', function (id) {\r\n    var bulundu = false\r\n    const kullanici_id = id;\r\n    const kullanici_update = this.req.body;\r\n    for (let kullanici of kullanicilar) { \r\n        if (kullanici.id == kullanici_id) {\r\n            if (kullanici_update.isim != null || undefined) kullanici.isim = kullanici_update.isim;\r\n            if (kullanici_update.email != null || undefined) kullanici.email = kullanici_update.email;\r\n            bulundu = true\r\n            break\r\n        }\r\n    }\r\n    if(bulundu == true){ \r\n        this.res.writeHead(200); \r\n        this.res.end(JSON.stringify({ mesaj: \"Kullanıcı Güncellendi\" }))\r\n    }else{\r\n        this.res.writeHead(404); \r\n        this.res.end(JSON.stringify({ mesaj: \"Geçersiz İşlem\" })) \r\n    }\r\n}); \r\napp.router.delete(\"\/delete\/:id\", function(id){\r\n    var bulundu = false\r\n    const kullanici_id = id;\r\n    for (let kullanici of kullanicilar) {\r\n        if (kullanici.id == kullanici_id) {\r\n            kullanicilar.splice(kullanicilar.indexOf(kullanici), 1);\r\n            bulundu = true\r\n            break\r\n        }\r\n    }\r\n    if(bulundu == true){\r\n        this.res.writeHead(200); \r\n        this.res.end(JSON.stringify({ mesaj: \"Kullanıcı Silindi\" })) \r\n    }else{\r\n        this.res.writeHead(404); \r\n        this.res.end(JSON.stringify({ mesaj: \"Geçersiz İşlem\" })) \r\n    }\r\n});\r\napp.start(\"3456\", \"localhost\", () =&gt; {\r\n    console.log(\"http:\/\/localhost:3456\/\");\r\n});\r\n\/*\r\nGET http:\/\/localhost:3456\/\r\n###\r\nPOST http:\/\/localhost:3456\/create\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl\",\r\n    \"email\": \"anil@senocak.com\"\r\n}\r\n###\r\nPUT http:\/\/localhost:3456\/update\/2\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl2\",\r\n    \"email\": \"anil@senocak.com2\"\r\n}\r\n###\r\nDELETE http:\/\/localhost:3456\/delete\/2\r\n*\/<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"3","etiketler":"nodejs,js,flatiron","aktif":"1","sira":"14","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"27","baslik":"Hapi ile Rest API (local variable)","url":"hapi-ile-rest-api-(local-variable)","icerik":"<pre>\r\n<code class=\"language-javascript\">const Hapi = require(\"@hapi\/hapi\");\r\nconst server = Hapi.server({ host: 'localhost', port: 3456 });\r\nconst kullanicilar = [{\r\n    \"id\": 1,\r\n    \"isim\": \"Lorem Ipsum\",\r\n    \"email\": \"lorem@ipsum.com\",\r\n    \"tarih\": \"1570706637487\"\r\n}];\r\nserver.route({\r\n    method: 'GET',\r\n    path:'\/', \r\n    handler: function (request, res) {\r\n        return res.response({kullanicilar}).code(200);\r\n    }\r\n});\r\nserver.route({\r\n    method: 'POST',\r\n    path:'\/create', \r\n    handler: function (request, res) {\r\n        const kullanici = request.payload;\r\n        if (kullanici.isim || kullanici.email) {\r\n            kullanicilar.push({id: kullanicilar.length + 1, ...kullanici, tarih: Date.now().toString() });\r\n            return res.response({mesaj:\"Kullanıcı Oluşturuldu\"}).code(201);\r\n        }else{\r\n            return res.response({mesaj:\"Geçersiz İşlem\"}).code(401); \r\n        }\r\n    }\r\n}); \r\nserver.route({\r\n    method: 'GET',\r\n    path:'\/read\/{id}', \r\n    handler: function (request, res) {  \r\n        for (let kullanici of kullanicilar) { \r\n            if (kullanici.id == request.params.id) {\r\n                return res.response({kullanici}).code(200); \r\n            }\r\n        }\r\n        return res.response({mesaj:\"Geçersiz İşlem\"}).code(404); \r\n    }\r\n});\r\nserver.route({\r\n    method: 'PUT',\r\n    path:'\/update\/{id}', \r\n    handler: function (request, res) {   \r\n        const kullanici_id = request.params.id;\r\n        const kullanici_update = request.payload;\r\n        for (let kullanici of kullanicilar) { \r\n            if (kullanici.id == kullanici_id) {\r\n                if (kullanici_update.isim != null || undefined) kullanici.isim = kullanici_update.isim;\r\n                if (kullanici_update.email != null || undefined) kullanici.email = kullanici_update.email;\r\n                return res.response({ mesaj: \"Kullanıcı Güncellendi\", Kullanıcı: kullanici }).code(200);\r\n            }\r\n        }\r\n        return res.response({mesaj:\"Geçersiz İşlem\"}).code(404); \r\n    }\r\n});\r\nserver.route({\r\n    method: 'DELETE',\r\n    path:'\/delete\/{id}', \r\n    handler: function (request, res){\r\n        const kullanici_id = request.params.id;\r\n        const kullanici_update = request.payload;\r\n        for (let kullanici of kullanicilar) { \r\n            if (kullanici.id == kullanici_id) {\r\n                kullanicilar.splice(kullanicilar.indexOf(kullanici), 1);\r\n                return res.response({ mesaj: \"Kullanıcı Silindi\"}).code(200);\r\n            }\r\n        }\r\n        return res.response({mesaj:\"Geçersiz İşlem\"}).code(404); \r\n    }\r\n});\r\ntry {\r\n    server.start();\r\n    console.log('http:\/\/localhost:3456');\r\n}\r\ncatch (err) {\r\n    console.log(err);\r\n    process.exit(1);\r\n}\r\n\/\/https:\/\/medium.com\/@mcakir\/hapi-js-ile-rest-api-olu%C5%9Fturmak-51e95e047e56\r\n\r\n\/*\r\nGET http:\/\/localhost:3456\/\r\n###\r\nPOST http:\/\/localhost:3456\/create\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl\",\r\n    \"email\": \"anil@senocak.com\"\r\n}\r\n###\r\nPUT http:\/\/localhost:3456\/update\/2\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl2\",\r\n    \"email\": \"anil@senocak.com2\"\r\n}\r\n###\r\nDELETE http:\/\/localhost:3456\/delete\/2\r\n###\r\nGET http:\/\/localhost:3456\/read\/2\r\n*\/<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"3","etiketler":"nodejs,js,hapi","aktif":"1","sira":"13","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"28","baslik":"Koa ile Rest API (local variable)","url":"koa-ile-rest-api-(local-variable)","icerik":"<pre>\r\n<code class=\"language-javascript\">const Koa = require('koa');\r\nconst Router = require('koa-router');\r\nvar koaBody = require('koa-body')();\r\nconst app = new Koa();\r\nconst router = new Router();\r\nconst kullanicilar = [{\r\n    \"id\": 1,\r\n    \"isim\": \"Lorem Ipsum\",\r\n    \"email\": \"lorem@ipsum.com\",\r\n    \"tarih\": \"1570706637487\"\r\n}];\r\nrouter.get('\/', (ctx, next) =&gt; {\r\n    \/\/ctx.response.type = 'application\/json';\r\n    ctx.response.status = 200; \r\n    ctx.body = kullanicilar;\r\n});\r\nrouter.post('\/create', koaBody,  (ctx, next) =&gt; {\r\n    \/\/ctx.body = JSON.stringify(ctx.request.body)\r\n    const kullanici = ctx.request.body;\r\n    if (kullanici.isim &amp;&amp; kullanici.email) {\r\n        kullanicilar.push({id: kullanicilar.length + 1, ...kullanici, tarih: Date.now().toString() });\r\n        ctx.response.status = 200; \r\n        ctx.body = { mesaj: \"Kullanıcı Oluşturuldu\"};\r\n    }else{\r\n        ctx.response.status = 500;  \r\n        ctx.body = { mesaj: \"Geçersiz İşlem\"};\r\n    } \r\n});\r\nrouter.put('\/update\/:id', koaBody, (ctx, next) =&gt; { \r\n    const kullanici_id = ctx.params.id;  \r\n    const kullanici_update = ctx.request.body;\r\n    var bulundu = false;\r\n    for (let kullanici of kullanicilar) { \r\n        if (kullanici.id == kullanici_id) {\r\n            bulundu = true;\r\n            if (kullanici_update.isim != null || undefined) kullanici.isim = kullanici_update.isim;\r\n            if (kullanici_update.email != null || undefined) kullanici.email = kullanici_update.email; \r\n            break;\r\n        }\r\n    }\r\n    if (bulundu == true) { \r\n        ctx.response.status = 200;  \r\n        ctx.body = { mesaj: \"Kullanıcı Güncellendi\"};\r\n    }else{ \r\n        ctx.response.status = 500;  \r\n        ctx.body = { mesaj: \"Geçersiz İşlem\"};\r\n    } \r\n});\r\nrouter.delete('\/delete\/:id', koaBody, (ctx, next) =&gt; {\r\n    const kullanici_id = ctx.params.id; \r\n    var bulundu = false; \r\n    for (let kullanici of kullanicilar) {\r\n        if (kullanici.id == kullanici_id) {\r\n            bulundu = true;\r\n            kullanicilar.splice(kullanicilar.indexOf(kullanici), 1);\r\n        }\r\n    }\r\n    if (bulundu == true) { \r\n        ctx.response.status = 200;  \r\n        ctx.body = { mesaj: \"Kullanıcı Silindi\"};\r\n    }else{ \r\n        ctx.response.status = 500;  \r\n        ctx.body = { mesaj: \"Geçersiz İşlem\"};\r\n    } \r\n});\r\napp.use(router.routes());\r\napp.use(router.allowedMethods()); \r\napp.listen(3456, () =&gt; { console.log(\"http:\/\/localhost:3000\"); }); \r\n\r\n\/*\r\nGET http:\/\/localhost:3456\/\r\n###\r\nPOST http:\/\/localhost:3456\/create\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl\",\r\n    \"email\": \"anil@senocak.com\"\r\n}\r\n###\r\nPUT http:\/\/localhost:3456\/update\/24\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl2\",\r\n    \"email\": \"anil@senocak.com2\"\r\n}\r\n###\r\nDELETE http:\/\/localhost:3456\/delete\/2\r\n*\/<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"3","etiketler":"nodejs,js,koa","aktif":"1","sira":"12","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"29","baslik":"Raw Nodejs ile Rest API (local variable)","url":"raw-nodejs-ile-rest-api-(local-variable)","icerik":"<pre>\r\n<code class=\"language-javascript\">const http = require('http');\r\nconst url = require('url');\r\nconst kullanicilar = [{\r\n    \"id\": 1,\r\n    \"isim\": \"Lorem Ipsum\",\r\n    \"email\": \"lorem@ipsum.com\",\r\n    \"tarih\": \"1570706637487\"\r\n}];\r\nvar server = http.createServer((req, res) =&gt; {\r\n    const reqUrl = url.parse(req.url, true);\r\n    if (reqUrl.pathname == '\/' &amp;&amp; req.method === 'GET') { \r\n        res.end(JSON.stringify(kullanicilar))\r\n    }else if (reqUrl.pathname == '\/create' &amp;&amp; req.method === 'POST') {\r\n        var kullanici = ''\r\n        req.on('data', function(data) {\r\n            kullanici += data\r\n        })\r\n        req.on('end', function() {\r\n            kullanici = JSON.parse(kullanici); \r\n             \r\n            if (kullanici.isim &amp;&amp; kullanici.email) {\r\n                kullanicilar.push({id: kullanicilar.length + 1, ...kullanici, tarih: Date.now().toString() });\r\n                res.writeHead(200)  \r\n                res.end(JSON.stringify({ mesaj: \"Kullanıcı Oluşturuldu\" }))\r\n            }else{\r\n                res.writeHead(401) \r\n                res.end(JSON.stringify({ mesaj: \"Geçersiz İşlem\" }))\r\n            }\r\n        })\r\n    }else if (reqUrl.pathname == '\/update' &amp;&amp; req.method === 'PUT') {\r\n        var kullanici_put = ''\r\n        var bulundu = false\r\n        req.on('data', function(data) {\r\n            kullanici_put += data\r\n        })\r\n        req.on('end', function() {\r\n            kullanici_put = JSON.parse(kullanici_put);\r\n            for (let kullanici of kullanicilar) { \r\n                if (kullanici.id == kullanici_put.id) {\r\n                    if (kullanici_put.isim != null || undefined) kullanici.isim = kullanici_put.isim;\r\n                    if (kullanici_put.email != null || undefined) kullanici.email = kullanici_put.email;\r\n                    bulundu = true\r\n                    break\r\n                }\r\n            }\r\n            if (bulundu == true) {\r\n                res.writeHead(200)  \r\n                res.end(JSON.stringify({ mesaj: \"Kullanıcı Güncelleştirildi.\" }))\r\n            }else{\r\n                res.writeHead(401) \r\n                res.end(JSON.stringify({ mesaj: \"Geçersiz İşlem\" }))\r\n            }\r\n        })\r\n    }else if (reqUrl.pathname == '\/delete' &amp;&amp; req.method === 'DELETE') {        \r\n        var kullanici_put = ''\r\n        var bulundu = false\r\n        req.on('data', function(data) {\r\n            kullanici_put += data\r\n        })\r\n        req.on('end', function() {\r\n            kullanici_put = JSON.parse(kullanici_put);\r\n            for (let kullanici of kullanicilar) { \r\n                if (kullanici.id == kullanici_put.id) {\r\n                    kullanicilar.splice(kullanicilar.indexOf(kullanici), 1);\r\n                    bulundu = true\r\n                    break\r\n                }\r\n            }\r\n            if (bulundu == true) {\r\n                res.writeHead(200)  \r\n                res.end(JSON.stringify({ mesaj: \"Kullanıcı Silindi.\" }))\r\n            }else{\r\n                res.writeHead(401) \r\n                res.end(JSON.stringify({ mesaj: \"Geçersiz İşlem\" }))\r\n            }\r\n        })\r\n    }\r\n});\r\nserver.listen(\"3456\", \"localhost\", () =&gt; {\r\n    console.log(\"http:\/\/localhost:3456\/\");\r\n});\r\n\/*\r\nGET http:\/\/localhost:3456\/\r\n###\r\nPOST http:\/\/localhost:3456\/create\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl\",\r\n    \"email\": \"anil@senocak.com\"\r\n}\r\n###\r\nPUT http:\/\/localhost:3456\/update\r\nContent-Type: application\/json\r\n{\r\n    \"id\":\"2\",\r\n    \"isim\":\"Anıl2\",\r\n    \"email\": \"anil@senocak.com2\"\r\n}\r\n###\r\nDELETE http:\/\/localhost:3456\/delete\r\nContent-Type: application\/json\r\n{\r\n    \"id\":\"2\"\r\n}\r\n*\/<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"3","etiketler":"nodejs,js","aktif":"1","sira":"11","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"30","baslik":"Restify ile Rest API (local variable)","url":"restify-ile-rest-api-(local-variable)","icerik":"<pre>\r\n<code class=\"language-javascript\">const restify = require('restify');\r\nconst restifyPlugins = require('restify-plugins');\r\nconst server = restify.createServer();\r\n\r\nserver.use(restifyPlugins.jsonBodyParser({ mapParams: true }));\r\nserver.use(restifyPlugins.acceptParser(server.acceptable));\r\nserver.use(restifyPlugins.queryParser({ mapParams: true }));\r\nserver.use(restifyPlugins.fullResponse());\r\nconst kullanicilar = [{\r\n    \"id\": 1,\r\n    \"isim\": \"Lorem Ipsum\",\r\n    \"email\": \"lorem@ipsum.com\",\r\n    \"tarih\": \"1570706637487\"\r\n}];\r\nserver.get('\/:id', (req, res, next) =&gt; {\r\n    res.send(200, kullanicilar);\r\n});\r\nserver.post('\/create', (req, res, next) =&gt; {\r\n    const kullanici = req.body;\r\n    if (kullanici.isim &amp;&amp; kullanici.email) {\r\n        kullanicilar.push({id: kullanicilar.length + 1, ...kullanici, tarih: Date.now().toString() });\r\n        res.send(200, { mesaj: \"Kullanıcı Oluşturuldu\" });\r\n    }else{\r\n        res.send(401, { mesaj: \"Geçersiz İşlem\" }); \r\n    }\r\n});\r\nserver.put(\"\/update\/:id\", (req, res) =&gt; {\r\n    const kullanici_id = req.params.id;\r\n    const kullanici_update = req.body;\r\n    var bulundu = false\r\n    for (let kullanici of kullanicilar) { \r\n        if (kullanici.id == kullanici_id) {\r\n            if (kullanici_update.isim != null || undefined) kullanici.isim = kullanici_update.isim;\r\n            if (kullanici_update.email != null || undefined) kullanici.email = kullanici_update.email;\r\n            bulundu = true\r\n        }\r\n    }\r\n    if (bulundu == true) {\r\n        res.send(200, { mesaj: \"Kullanıcı Güncellendi\" });\r\n    } else {\r\n        res.send(401, { mesaj: \"Geçersiz İşlem\" }); \r\n    }\r\n});\r\nserver.del(\"\/delete\/:id\", (req, res) =&gt; {\r\n    var bulundu = false\r\n    const kullanici_id = req.params.id;\r\n    for (let kullanici of kullanicilar) {\r\n        if (kullanici.id == kullanici_id) {\r\n            kullanicilar.splice(kullanicilar.indexOf(kullanici), 1); \r\n            bulundu = true\r\n        }\r\n    } \r\n    if (bulundu == true) {\r\n        res.send(200, { mesaj: \"Kullanıcı Silindi\" });\r\n    } else {\r\n        res.send(401, { mesaj: \"Geçersiz İşlem\" }); \r\n    }\r\n});\r\nserver.listen(3456, () =&gt; {console.log(`http:\/\/localhost:3456`);});\r\n\/*\r\nGET http:\/\/localhost:3456\/\r\n###\r\nPOST http:\/\/localhost:3456\/create\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl\",\r\n    \"email\": \"anil@senocak.com\"\r\n}\r\n###\r\nPUT http:\/\/localhost:3456\/update\/2\r\nContent-Type: application\/json\r\n{\r\n    \"isim\":\"Anıl2\",\r\n    \"email\": \"anil@senocak.com2\"\r\n}\r\n###\r\nDELETE http:\/\/localhost:3456\/delete\/2\r\n*\/<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"3","etiketler":"nodejs,js,restify","aktif":"1","sira":"10","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"31","baslik":"NodeJs Rest API","url":"nodejs-rest-api","icerik":"<ol>\r\n\t<li><a href=\"\/blog\/expressjs-ile-rest-api-(local-variable)\">ExpressJS ile Rest API (local variable)<\/a><\/li>\r\n\t<li><a href=\"\/blog\/expressjs-ile-rest-api-(mysql)\">ExpressJS ile Rest API (Mysql)<\/a><\/li>\r\n\t<li><a href=\"\/blog\/expressjs-ile-rest-api-(mongodb)\">ExpressJS ile Rest API (MongoDB)<\/a><\/li>\r\n\t<li><a href=\"\/blog\/fastify-ile-rest-api-(local-variable)\">Fastify ile Rest API (local variable)<\/a><\/li>\r\n\t<li><a href=\"\/blog\/flatiron-ile-rest-api-(local-variable)\">Flatiron ile Rest API (local variable)<\/a><\/li>\r\n\t<li><a href=\"\/blog\/hapi-ile-rest-api-(local-variable)\">Hapi ile Rest API (local variable)<\/a><\/li>\r\n\t<li><a href=\"\/blog\/koa-ile-rest-api-(local-variable)\">Koa ile Rest API (local variable)<\/a>,<\/li>\r\n\t<li><a href=\"\/blog\/restify-ile-rest-api-(local-variable)\">Restify ile Rest API (local variable)<\/a><\/li>\r\n\t<li><a href=\"\/blog\/raw-nodejs-ile-rest-api-(local-variable)\">Raw Nodejs ile Rest API (local variable)<\/a><\/li>\r\n<\/ol>","kategori_id":"3","etiketler":"nodejs,js,rest,api","aktif":"1","sira":"9","onecikarilan":"1","github_repo":"senocak\/NodeJS-Basic-Rest-API-CRUD","created_at":"2020-01-13 15:04:38","updated_at":"2020-01-13 15:04:38"},
    {"id":"32","baslik":"21 Artisan Make Komutu","url":"21-artisan-make-komutu","icerik":"<pre>\r\n<code class=\"language-coffeescript\">make:channel         Yeni bir channel sınıfı oluşturur\r\nmake:command         Yeni bir Artisan komutu oluşturur\r\nmake:controller      Yeni bir Controller sınıfı oluşturur\r\nmake:event           Yeni bir Event sınıfı oluşturur\r\nmake:exception       Yeni bir özel Exception sınıfı oluşturur\r\nmake:factory         Yeni bir Factory Modeli oluşturur\r\nmake:job             Yeni bir Job sınıfı oluşturur\r\nmake:listener        Yeni bir Event Listener sınıfı oluşturur\r\nmake:mail            Yeni bir Email sınıfı oluşturur\r\nmake:middleware      Yeni bir Middleware sınıfı oluşturur\r\nmake:migration       Yeni bir Migration dosyası oluşturur\r\nmake:model           Yeni bir Eloquent Model sınıfı oluşturur\r\nmake:notification    Yeni bir Notification sınıfı oluşturur\r\nmake:observer        Yeni bir Observer sınıfı oluşturur\r\nmake:policy          Yeni bir Policy sınıfı oluşturur\r\nmake:provider        Yeni bir Service Provider sınıfı oluşturur\r\nmake:request         Yeni bir Form Request sınıfı oluşturur\r\nmake:resource        Yeni bir Resource oluşturur\r\nmake:rule            Yeni bir Validation Rule oluşturur\r\nmake:seeder          Yeni bir Seeder sınıfı oluşturur\r\nmake:test            Yeni bir Test sınıfı oluşturur<\/code><\/pre>\r\n\r\n<p><strong>Not<\/strong>: <em><strong>make:auth<\/strong><\/em> komutu&nbsp;<em><a href=\"https:\/\/laravel-news.com\/running-make-auth-in-laravel-6\" target=\"_blank\">Laravel 6<\/a><\/em>&#39;da kaldırıldığı&nbsp;ve kendi UI paketine eklendi.<br \/>\r\n<br \/>\r\nYukarıdaki liste bize bu komutların parametreleri veya se&ccedil;enekleri hakkında herhangi bir bilgi vermemektedir. Bu y&uuml;zden burada en sık kullanılanlardan başlayarak her birine genel bir bakış yapmak istiyorum. Bunun i&ccedil;in, <strong>\/vendor\/laravel\/framework\/src\/Illuminate<\/strong> klas&ouml;r&uuml; i&ccedil;inde framework&#39;&uuml;n ger&ccedil;ek koduna dalacağız ve her komut i&ccedil;in hangi se&ccedil;eneklere ve belgelenmemiş &ouml;zelliklere sahip olduğumuzu kontrol edeceğiz.<\/p>\r\n\r\n<h1>1. make:controller<\/h1>\r\n\r\n<p>Bu komut <strong>app\/Http\/Controllers<\/strong> klas&ouml;r&uuml;nde yeni bir denetleyici dosyası oluşturur.<br \/>\r\n<strong>&Ouml;rnek kullanım:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan make:controller UserController<\/code><\/pre>\r\n\r\n<p><strong>Parametreler:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--resource<\/code><\/pre>\r\n\r\n<p>Denetleyici kullanılabilir kaynak işlemlerinin her biri i&ccedil;in bir y&ouml;ntem i&ccedil;erir. index(), create(), store(), show(), edit(), update(), destroy()<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--api<\/code><\/pre>\r\n\r\n<p>Yukarıdaki <strong>&ndash;resource<\/strong>&#39;a benzer, ancak yalnızca 5 y&ouml;ntem oluşturur: index(), store(), show(), update(), destroy(). &Ccedil;&uuml;nk&uuml; API i&ccedil;in form create\/edit gerekli değildir.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--invokable<\/code><\/pre>\r\n\r\n<p>Bir <strong>__invoke()<\/strong> y&ouml;ntemiyle denetleyici oluşturur. &Ccedil;alıştırılabilir denetleyiciler hakkında daha fazla bilgiyi <a href=\"http:\/\/laraveldaily.com\/invokable-controllers-with-one-specific-action\/\">buradan <\/a>edinebilirsiniz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--model=Photo<\/code><\/pre>\r\n\r\n<p><em>Route model&nbsp;binding <\/em>kullanıyorsanız ve kaynak denetleyicisinin y&ouml;ntemlerinin bir model &ouml;rneği yazmak istemesini istiyorsanız.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--parent=Photo<\/code><\/pre>\r\n\r\n<p>Resmi olarak belgesiz parametre, kodda &ldquo;<em>Generate a nested resource controller class<\/em>&rdquo; der, ancak benim i&ccedil;in d&uuml;zg&uuml;n bir Denetleyici oluşturamadı. Yani muhtemelen devam ediyor.<\/p>\r\n\r\n<hr \/>\r\n<h2>2. make:model<\/h2>\r\n\r\n<p>Yeni bir Eloquent model sınıfı oluşturun.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan make:model Photo<\/code><\/pre>\r\n\r\n<p><strong>Parametreler:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--migration yada -m<\/code><\/pre>\r\n\r\n<p>Model i&ccedil;in yeni bir migration dosyası oluşturun.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--controller yada -c<\/code><\/pre>\r\n\r\n<p>Model i&ccedil;in yeni bir controller oluşturun.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--resource yada -r<\/code><\/pre>\r\n\r\n<p>Oluşturulan denetleyicinin bir kaynak denetleyicisi olup olmadığını g&ouml;sterir.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan make:model Project --migration --controller --resource<\/code><\/pre>\r\n\r\n<p>Veya daha da kısa:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan make:model Project -mcr<\/code><\/pre>\r\n\r\n<p>Ama&nbsp;<strong>make:model<\/strong>&nbsp;i&ccedil;in hepsi bu kadar değil:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--factory veya -f<\/code><\/pre>\r\n\r\n<p>Model i&ccedil;in yeni bir factory oluşturun.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--all yada -a<\/code><\/pre>\r\n\r\n<p>Yukarıdakilerin t&uuml;m&uuml;n&uuml; oluşturun: model i&ccedil;in bir migration, factory ve resource. Ve hepsi bu kadar da değil<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--force<\/code><\/pre>\r\n\r\n<p>Model zaten mevcut olsa bile sınıfı oluşturur<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--pivot<\/code><\/pre>\r\n\r\n<p>Oluşturulan modelin &ouml;zel bir ara tablo modeli olup olmadığını g&ouml;sterir.<\/p>\r\n\r\n<hr \/>\r\n<h1>3. make:migration<\/h1>\r\n\r\n<p>Yeni bir migration dosyası oluşturun.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">php artisan make:migration create_projects_table<\/code><\/pre>\r\n\r\n<pre>\r\n<code class=\"language-bash\">--create=Table \/\/Yaratılacak tablo\r\n--table=Table \/\/ Migration olacak tablo\r\n--path=Path \/\/ Migration dosyasının oluşacağı yer\r\n--realpath \/\/ Migration dosyasının mutlak yol olduğunu belirtin\r\n--fullpath \/\/ Migration dosyasını olduğu yerin çıktısı<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>4. make:seeder<\/h1>\r\n\r\n<p>Yeni bir database seeder sınıfı oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-apache\">php artisan make:seeder BooksTableSeeder<\/code><\/pre>\r\n\r\n<p><strong>Parametre<\/strong>: yok.<\/p>\r\n\r\n<hr \/>\r\n<h1>5. make:request<\/h1>\r\n\r\n<p>Yeni bir form request sınıfını <strong>app\/Http\/Requests<\/strong>&nbsp;altına oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:request StoreBlogPost<\/code><\/pre>\r\n\r\n<p><strong>Parametre<\/strong>: yok.<\/p>\r\n\r\n<hr \/>\r\n<h1>6. make:middleware<\/h1>\r\n\r\n<p>Yeni bir middleware sınıfı oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:middleware CheckAge<\/code><\/pre>\r\n\r\n<p><strong>Parametre<\/strong>: yok.<\/p>\r\n\r\n<hr \/>\r\n<h1>7. make:policy<\/h1>\r\n\r\n<p>Yeni bir Policy sınıfı oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:policy PostPolicy<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--model=Photo<\/code><\/pre>\r\n\r\n<p>Policy&#39;nin uygulandığı model.<\/p>\r\n\r\n<hr \/>\r\n<h1>8. make:command<\/h1>\r\n\r\n<p>Yeni bir Artisan komutu oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:command SendEmails<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--command=Command<\/code><\/pre>\r\n\r\n<p>Assign edilmiş terminal komutu.<\/p>\r\n\r\n<hr \/>\r\n<h1>9. make:event<\/h1>\r\n\r\n<p>Yeni bir Event sınıfı oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:event OrderShipped<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong>&nbsp;yok.<\/p>\r\n\r\n<hr \/>\r\n<h1>10. make:job<\/h1>\r\n\r\n<p>Yeni bir Job sınıfı oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:job SendReminderEmail<\/code><\/pre>\r\n\r\n<p><strong>Parameters:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--sync<\/code><\/pre>\r\n\r\n<p>Indicates that job should be synchronous.<\/p>\r\n\r\n<hr \/>\r\n<h1>11. make:listener<\/h1>\r\n\r\n<p>Yeni bir olay dinleyici sınıfı oluşturun.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:listener SendShipmentNotification <\/code><\/pre>\r\n\r\n<p>Parametreler:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--event=Event \/\/ Dinlenen olay sınıfı.\r\n--queued \/\/ Olay dinleyicisinin sıraya alınması gerektiğini belirtir.<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>12. make:mail<\/h1>\r\n\r\n<p>Yeni bir e-posta sınıfı oluşturun.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:mail OrderShipped<\/code><\/pre>\r\n\r\n<p>Parametreler:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--markdown \/\/ E-posta için yeni bir Markdown şablonu oluşturun.\r\n--force \/\/ E-posta gönderilse bile sınıfı oluşturun.<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>13. make:notification<\/h1>\r\n\r\n<p>Yeni bir bildirim sınıfı oluşturun.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:notification InvoicePaid<\/code><\/pre>\r\n\r\n<p>Parametreler:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--markdown \/\/ Bildirim için yeni bir Markdown şablonu oluşturun.\r\n--force \/\/ Bildirim zaten mevcut olsa bile sınıfı oluşturun.<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>14. make:provider<\/h1>\r\n\r\n<p>Yeni bir Service Provider sınıfı oluşurur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:provider DuskServiceProvider<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong>&nbsp;yok.<\/p>\r\n\r\n<hr \/>\r\n<h1>15. make:test<\/h1>\r\n\r\n<p>Yeni bir test sınıfı oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:test UserTest<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--unit \/\/ Unit test oluşturun<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>16. make:channel<\/h1>\r\n\r\n<p>Broadcasting i&ccedil;in yeni bir sınıf oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:channel OrderChannel<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong>&nbsp;yok.<\/p>\r\n\r\n<hr \/>\r\n<h1>17. make:exception<\/h1>\r\n\r\n<p>Yeni bir &ouml;zel Exception sınıfı oluşturur<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:exception UserNotFoundException<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--render \/\/ Boş render metodu ile Exception oluştur\r\n--report \/\/ Boş rapor metodu ile Exception oluştur<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>18. make:factory<\/h1>\r\n\r\n<p>Yeni bir model factory oluşturun<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:factory PostFactory --model=Post<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--model=Post \/\/ Model ismi<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>19. make:observer<\/h1>\r\n\r\n<p>Yeni bir Observer sınıfı oluşturur<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:observer PostObserver --model=Post<\/code><\/pre>\r\n\r\n<p><strong>Parameters:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--model=Post \/\/ Uygulanan model<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>20. make:rule<\/h1>\r\n\r\n<p>Yeni bir Validation Rule oluşturur<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:rule Uppercase<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong>&nbsp;yok.<\/p>\r\n\r\n<hr \/>\r\n<h1>21. make:resource<\/h1>\r\n\r\n<p>Yeni bir Resource oluşturur<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:resource PostResource<\/code><\/pre>\r\n\r\n<p><strong>Parametre:<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">--collection=Post \/\/ individual Resource sınıfı yerine ResourceCollection oluşturur<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"2","etiketler":"php,artisan,laravel","aktif":"1","sira":"6","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 15:04:38","updated_at":"2020-01-16 11:06:07"},
    {"id":"33","baslik":"Laravel Migration'larını MySQL'e Dönüştürme","url":"laravel-migrationlarini-mysqle-donusturme","icerik":"<h2>Tablo Oluşturma<\/h2>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:migration --create=roles name_of_migration<\/code><\/pre>\r\n\r\n<p>yada<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:migration create_roles<\/code><\/pre>\r\n\r\n<h2>Tablo G&uuml;ncelleme<\/h2>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:migration --table=roles name_of_migration<\/code><\/pre>\r\n\r\n<p>yada<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:migration add_name_to_roles<\/code><\/pre>\r\n\r\n<table border=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>PHP<\/th>\r\n\t\t\t<th>Resulting SQL<\/th>\r\n\t\t<\/tr>\r\n\t<\/thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">Schema::create('roles', function (Blueprint $t) {\r\n    $t-&gt;bigIncrements('id');\r\n});<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">Schema::dropIfExists('roles');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">create table `roles` (\r\n    `id` bigint unsigned \r\n    not null\r\n    auto_increment \r\n    primary key\r\n) default character set utf8mb4 \r\ncollate 'utf8mb4_unicode_ci'<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">Schema::rename($from, $to);<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">Schema::rename($to, $from);<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">RENAME TABLE `$from` TO `$to`<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Modifiers<\/h2>\r\n\r\n<table border=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Item<\/th>\r\n\t\t\t<th>Resulting SQL<\/th>\r\n\t\t<\/tr>\r\n\t<\/thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;boolean('active')-&gt;after('id');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `active` tinyint(1) not null after `id`<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;boolean('active')-&gt;default('1');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `active` tinyint(1) not null default '1'<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;boolean('active')-&gt;nullable();<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `active` tinyint(1) null<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;boolean('active')-&gt;nullable(false);<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `active` tinyint(1) not null<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Columns<\/h2>\r\n\r\n<table border=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>PHP<\/th>\r\n\t\t\t<th>Resulting SQL<\/th>\r\n\t\t<\/tr>\r\n\t<\/thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;timestamps();<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropTimestamps();<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `created_at` timestamp null, \r\n    add `updated_at` timestamp null<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;softDeletes();<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropSoftDeletes();<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `deleted_at` timestamp null<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;bigIncrements('columnName');<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropColumn('columnName');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `columnName` \r\n    bigint unsigned \r\n    not null \r\n    auto_increment \r\n    primary key<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;string('columnName');<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropColumn('columnName');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `columnName` varchar(255) not null<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;integer('columnName');<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropColumn('columnName');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `columnName` int not null<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table\r\n    -&gt;timestamp('columnName')\r\n    -&gt;default(DB::raw('CURRENT_TIMESTAMP'));<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropColumn('columnName');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `columnName` \r\n    timestamp \r\n    not null \r\n    default CURRENT_TIMESTAMP<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;unsignedBigInteger('columnName');<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropColumn('columnName');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add `columnName` bigint unsigned not null<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Indexes and Relationships<\/h2>\r\n\r\n<table border=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>PHP<\/th>\r\n\t\t\t<th>Resulting SQL<\/th>\r\n\t\t<\/tr>\r\n\t<\/thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table\r\n    -&gt;foreign('user_id')\r\n    -&gt;references('id')\r\n    -&gt;on('users');<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropForeign('roles_user_id_foreign');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add constraint \r\n    `roles_user_id_foreign` \r\n    foreign key (`user_id`) \r\n    references `users` (`id`)<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table\r\n    -&gt;string('name', 50)\r\n    -&gt;change();<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>&nbsp;<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;renameColumn('from', 'to');<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>&nbsp;<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;index(['user_id', 'role_id']);<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropIndex(['user_id', 'role_id']);<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `userroles` \r\n    add index `roles_user_id_role_id_index`\r\n    (`user_id`, `role_id`)<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Up:<\/strong>\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;unique(['user_id', 'role_id']);<\/code><\/pre>\r\n\t\t\t<strong>Down:<\/strong>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">$table-&gt;dropUnique(['user_id', 'role_id']);<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code class=\"language-sql\">alter table `roles`\r\n    add unique \r\n    `roles_user_id_role_id_unique`\r\n    (`user_id`, `role_id`)<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p><a href=\"\/upload\/files\/Laravel_Migration_to_Mysql_Cheat.pdf\"><input name=\"Pdf Halini İndir\" type=\"button\" value=\"Pdf Halini İndir\" \/><\/a><\/p>","kategori_id":"2","etiketler":"php,laravel,mysql","aktif":"1","sira":"5","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 18:12:26","updated_at":"2020-01-16 11:06:07"},
    {"id":"34","baslik":"Laravel Register için Özelleştirebileceğiniz 8 Şey","url":"laravel-register-icin-ozellestirebileceginiz-8-sey","icerik":"<h1>1. Kayıt İşlemini Devre&nbsp;Dışı Bırakma<\/h1>\r\n\r\n<p>Uygulamanızda &ouml;nceden kayıtlı kullanıcılar varsa veya bunlar y&ouml;netici tarafından oluşturulmuşsa kayıt işlemine ne olur? <strong>Laravel 5.7<\/strong>&#39;den beri, t&uuml;m yapmanız gereken <strong>routes\/web.php<\/strong> dosyasına bir parametre eklemektir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Auth::routes(['register' =&gt; false]);<\/code><\/pre>\r\n\r\n<p>Ardından sağ &uuml;st k&ouml;şedeki <strong>Register&nbsp;<\/strong>bağlantısını g&ouml;rmezsiniz ve route&nbsp;<strong>\/register<\/strong> 404 sayfası g&ouml;sterilir.<\/p>\r\n\r\n<hr \/>\r\n<h1>2. E-posta Doğrulamasını Etkinleştir<\/h1>\r\n\r\n<p>Laravel 5.7&#39;nin diğer bir yeni &ouml;zelliği de veritabanı alanı <strong>users.email_verified_at<\/strong> ile e-posta doğrulamasıdır. Varsayılan olarak devre dışıdır, ancak gerekli t&uuml;m alanlar ve rotalar oluşturulur, sadece gizlenirmiştir. Bu işlevi etkinleştirmek i&ccedil;in <strong>routes\/web.php<\/strong> dosyasına bir parametre iletmeniz yeterlidir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Auth::routes(['verify' =&gt; true]);<\/code><\/pre>\r\n\r\n<p>Ayrıca, kullanıcıların doğrulama bağlantılarını tıkladıktan sonra g&ouml;rmesi i&ccedil;in gerekli g&ouml;r&uuml;n&uuml;mleri oluşturacak şekilde <strong>php&nbsp;artisan&nbsp;make:auth<\/strong>&nbsp;komutunu &ccedil;alıştırdığınızdan emin olun. Son olarak, yalnızca doğrulanmış kullanıcılar tarafından kullanılabilecek bazı rotalara ihtiyacınız varsa, doğrulanmış Middleware kullanın:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Route::get('profile', function () {\r\n    \/\/ Sadece doğrulanmış üyeler girebilir\r\n})-&gt;middleware('verified');<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>3. Parola Sıfırla&#39;yı devre dışı bırak<\/h1>\r\n\r\n<p>Varsayılan olarak, <strong>php&nbsp;artisan&nbsp;make:auth<\/strong> komutu Bootstrap giriş\/kayıt sayfalarını ve unutulmuş şifreyi sıfırlamak i&ccedil;in bir tane oluşturur. Ancak bu &ouml;zelliği devre dışı bırakmak ve şifreleri kurtarmak i&ccedil;in başka bir mekanizmaya sahip olmak istiyorsanız, <strong>routes\/web.php<\/strong> dosyasına;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Auth::routes(['reset' =&gt; false]);<\/code><\/pre>\r\n\r\n<p><strong>Uyarı<\/strong>: Bunu, kayıt ve doğrulama ile ilgili &ouml;nceki ipu&ccedil;larıyla birleştirebilir ve <strong>routes\/web.php<\/strong>;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Auth::routes([\r\n  'register' =&gt; false,\r\n  'verify' =&gt; true,\r\n  'reset' =&gt; false\r\n]);<\/code><\/pre>\r\n\r\n<p>Ger&ccedil;ek routes, <strong>vendor\/laravel\/framework\/src\/Illuminate\/Routing\/Router.php<\/strong> dosyasında listelenir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function auth(array $options = []){\r\n    \/\/ Authentication Routes...\r\n    $this-&gt;get('login', 'Auth\\LoginController@showLoginForm')-&gt;name('login');\r\n    $this-&gt;post('login', 'Auth\\LoginController@login');\r\n    $this-&gt;post('logout', 'Auth\\LoginController@logout')-&gt;name('logout');\r\n    \/\/ Registration Routes...\r\n    if ($options['register'] ?? true) {\r\n        $this-&gt;get('register', 'Auth\\RegisterController@showRegistrationForm')-&gt;name('register');\r\n        $this-&gt;post('register', 'Auth\\RegisterController@register');\r\n    }\r\n    \/\/ Password Reset Routes...\r\n    if ($options['reset'] ?? true) {\r\n        $this-&gt;resetPassword();\r\n    }\r\n    \/\/ Email Verification Routes...\r\n    if ($options['verify'] ?? false) {\r\n        $this-&gt;emailVerification();\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>4. Kayıt Sonrası Y&ouml;nlendirme<\/h1>\r\n\r\n<p>Varsayılan olarak, yeni kayıtlı kullanıcılar <strong>\/home&nbsp;<\/strong>URL&#39;ye y&ouml;nlendirilir. Belki değiştirmek istersiniz, <strong>app\/Http\/Controllers\/Auth\/RegisterController.php<\/strong><\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class RegisterController extends Controller{\r\n    protected $redirectTo = '\/home';<\/code><\/pre>\r\n\r\n<p>Sadece bu parametreyi değiştirin, hepsi bu. Ancak tek bir statik URL&#39;den daha karmaşık mantığınız varsa ne olur? &Ouml;rneğin, yeni kullanıcının rol&uuml;ne bağlı olarak farklı URL&#39;lere y&ouml;nlendirilirmek istersiniz. Daha sonra aynı sınıf <strong>RegisterController<\/strong>&#39;da, <strong>redirectTo()<\/strong> adıyla ayrı bir y&ouml;ntem oluşturabilirsiniz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected function redirectTo(){\r\n    if (auth()-&gt;user()-&gt;role_id == 1) {\r\n        return '\/admin';\r\n    }\r\n    return '\/home';\r\n}<\/code><\/pre>\r\n\r\n<p>Metot mevcut olsa bile, override ile&nbsp;<strong>$redirectTo<\/strong> &ouml;zellik değerini ge&ccedil;ersiz kılar.<\/p>\r\n\r\n<hr \/>\r\n<h1>5. Alan Doğrulama Kurallarını Değiştir<\/h1>\r\n\r\n<p>Varsayılan Yetkilendirmenin d&ouml;rt alanı vardır:<\/p>\r\n\r\n<ul>\r\n\t<li>name<\/li>\r\n\t<li>email<\/li>\r\n\t<li>password<\/li>\r\n\t<li>confirm password<\/li>\r\n<\/ul>\r\n\r\n<p>T&uuml;m alanlar zorunludur ve bu doğrulama kuralları <strong>app\/Http\/Controllers\/Auth\/RegisterController.php<\/strong>&#39;de belirtilmiştir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected function validator(array $data){\r\n    return Validator::make($data, [\r\n        'name' =&gt; ['required', 'string', 'max:255'],\r\n        'email' =&gt; ['required', 'string', 'email', 'max:255', 'unique:users'],\r\n        'password' =&gt; ['required', 'string', 'min:6', 'confirmed'],\r\n    ]);\r\n}<\/code><\/pre>\r\n\r\n<p>Dolayısıyla, en az 6 sembolden daha karmaşık şifre gereksinimleri eklemek gibi bunlardan herhangi birini değiştirmek istiyorsanız, bu <strong>validator()<\/strong> y&ouml;ntemini d&uuml;zenleyin.<\/p>\r\n\r\n<hr \/>\r\n<h1>6. Kayıttan Sonra Otomatik Girişi Devre Dışı Bırak<\/h1>\r\n\r\n<p>Değiştirmek isteyebileceğiniz bir diğer varsayılan davranış, kayıt formundan hemen sonra otomatik oturum a&ccedil;madır. Kullanıcılarınızı ayrı bir &#39;success&#39; sayfasına y&ouml;nlendirmek ve daha sonra manuel olarak oturum a&ccedil;malarını bekleyebilirsiniz. Bunu yapmak i&ccedil;in, <strong>RegistersUsers&nbsp;<\/strong>&ouml;zelliğinin&nbsp;<strong>register()<\/strong> y&ouml;ntemini ge&ccedil;ersiz kılmanız gerekir. Yukarıda anlattığım controller olan <strong>RegisterController<\/strong>, bu &ouml;nemli &ouml;zelliği kullanır:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class RegisterController extends Controller{\r\n    use RegistersUsers;\r\n    \/\/ Controller'a ait diğer kodlar<\/code><\/pre>\r\n\r\n<p>Bu &ouml;zellik, kayıt işleminin t&uuml;m &ldquo;kirli işlerini&rdquo; ger&ccedil;ekleştirir. <strong>vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Auth\/RegistersUsers.php<\/strong> konumunda bulunan &ccedil;ekirdek framework&#39;&uuml;n bir par&ccedil;asıdır:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">trait RegistersUsers{\r\n    public function register(Request $request){\r\n        $this-&gt;validator($request-&gt;all())-&gt;validate();\r\n        event(new Registered($user = $this-&gt;create($request-&gt;all())));\r\n        $this-&gt;guard()-&gt;login($user);\r\n        return $this-&gt;registered($request, $user) ?: redirect($this-&gt;redirectPath());\r\n    }\r\n    \/\/ ... Diğer metotlar\r\n}<\/code><\/pre>\r\n\r\n<p>Otomatik girişi devre dışı bırakmak i&ccedil;in bu belirli satırı silmeniz gerekir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$this-&gt;guard()-&gt;login($user);<\/code><\/pre>\r\n\r\n<p>Ancak doğrudan Laravel &ccedil;ekirdeğini veya i&ccedil;inde <strong>\/vendor<\/strong>&#39;&uuml;n herhangi bir b&ouml;l&uuml;m&uuml;n&uuml; d&uuml;zenleyemezsiniz. Yapabileceğiniz şey aynı y&ouml;ntemi ge&ccedil;ersiz kılmak ve bunu <strong>RegisterController<\/strong>&#39;ınıza koymaktır, ş&ouml;yle:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class RegisterController extends Controller{\r\n    \/\/ Diğer Metotlar\r\n    public function register(Request $request){\r\n        $this-&gt;validator($request-&gt;all())-&gt;validate();\r\n        event(new Registered($user = $this-&gt;create($request-&gt;all())));\r\n        return $this-&gt;registered($request, $user)?: redirect($this-&gt;redirectPath());\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>Son olarak, &ouml;nceki ipucunda g&ouml;sterildiği gibi <strong>redirectTo<\/strong>&nbsp;parametresine veya y&ouml;ntemine dikkat edin, b&ouml;ylece kayıtlı kullanıcınız doğru bir sayfaya gelecektir.<\/p>\r\n\r\n<hr \/>\r\n<h1>7. Kayıt Formuna Daha Fazla Alan Ekleme<\/h1>\r\n\r\n<p>Bunun en tipik &ouml;rneği, varsayılan <strong>ad&#39;<\/strong>a ek olarak bir <strong>soyadı <\/strong>alanı eklemektir. Burada yapmanız gereken birka&ccedil; adım vardır:<\/p>\r\n\r\n<h2><strong>Adım 1. Veritabanına alan ekleyin.<\/strong><\/h2>\r\n\r\n<p>Choose to edit existing default migration file, or create a new one with&nbsp;<code>php&nbsp;artisan&nbsp;make:migration&nbsp;add_surname_to_users_table<\/code>. Mevcut varsayılan migration dosyasını d&uuml;zenlemeyin veya <code>php&nbsp;artisan&nbsp;make:migration&nbsp;add_soyadi_to_users_tablo<\/code>&nbsp;ile yeni bir tane oluşturmayı se&ccedil;in.<\/p>\r\n\r\n<h2><strong>Adım 2. Kullanıcı modeline doldurulabilir olarak alan ekleyin.<\/strong><\/h2>\r\n\r\n<p>Varsayılan olarak, <code><strong>app\/User.php<\/strong><\/code>&#39;de şunlar bulunur:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected $fillable = [\r\n    'name', 'email', 'password',\r\n];<\/code><\/pre>\r\n\r\n<p>Bu y&uuml;zden bu diziye yeni &#39;<strong>soyadınızı<\/strong>&#39; eklemeniz gerekiyor.<\/p>\r\n\r\n<h2><strong>Adım 3. Alanı, Formu View&#39;e ekleyin.<\/strong><\/h2>\r\n\r\n<p><code><strong>resources\/views\/auth\/register.blade.php<\/strong><\/code> dosyasını d&uuml;zenlemeniz ve başka bir alan eklemeniz, muhtemelen ad alanı i&ccedil;in t&uuml;m kodu kopyalayıp yapıştırmanız ve bazı b&ouml;l&uuml;mlerini değiştirmeniz gerekir.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-html\">&lt;div class=\"form-group row\"&gt;\r\n    &lt;label for=\"name\" class=\"col-md-4 col-form-label text-md-right\"&gt;{{ __('Name') }}&lt;\/label&gt;\r\n    &lt;div class=\"col-md-6\"&gt;\r\n        &lt;input id=\"name\" type=\"text\" class=\"form-control{{ $errors-&gt;has('name') ? ' is-invalid' : '' }}\" name=\"name\" value=\"{{ old('name') }}\" required autofocus&gt;\r\n        @if ($errors-&gt;has('name'))\r\n            &lt;span class=\"invalid-feedback\" role=\"alert\"&gt;\r\n                &lt;strong&gt;{{ $errors-&gt;first('name') }}&lt;\/strong&gt;\r\n            &lt;\/span&gt;\r\n        @endif\r\n    &lt;\/div&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\r\n\r\n<h4><strong>Adım 4. create() y&ouml;ntemini değiştirin.<\/strong><\/h4>\r\n\r\n<h4>Varsayılan metodun&nbsp;<strong>RegisterController<\/strong>&#39;da nasıl g&ouml;r&uuml;nd&uuml;ğ&uuml; aşağıda a&ccedil;ıklanmıştır:<\/h4>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected function create(array $data){\r\n    return User::create([\r\n        'name' =&gt; $data['name'],\r\n        'email' =&gt; $data['email'],\r\n        'password' =&gt; Hash::make($data['password']),\r\n    ]);\r\n}<\/code><\/pre>\r\n\r\n<p>Sadece soyadı ile ilgili başka bir satır eklemeniz gerekiyor;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected function create(array $data){\r\n    return User::create([\r\n        'name' =&gt; $data['name'],\r\n        'soyadi' =&gt; $data['soyadi'],\r\n        'email' =&gt; $data['email'],\r\n        'password' =&gt; Hash::make($data['password']),\r\n    ]);\r\n}<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h1>8. E-posta yerine Kullanıcı Adı ile giriş yapın<\/h1>\r\n\r\n<p>Varsayılan olarak, <code><strong>email<\/strong>&nbsp;<\/code>kullanıcı i&ccedil;in en &ouml;nemli alandır, <code><strong>unique<\/strong>&nbsp;<\/code>bir tanımlayıcı olarak kullanılır ve kimlik bilgilerinin bir par&ccedil;asıdır. Ancak, sizin durumunuzda, e-posta yalnızca bilgi ama&ccedil;lı bir alansa ve ger&ccedil;ek giriş kimlik bilgisi, <code><strong>kullanıcı adı<\/strong><\/code> gibi başka bir alansa ne olur? &Ouml;ncelikle, bu alanı &ouml;nceki tartışıldığı gibi <code><strong>database\/model\/views<\/strong><\/code> eklemeye dikkat edin. Ardından, <code><strong>app\/Http\/Controllers\/Auth\/LoginController<\/strong><\/code>&#39;a, &ouml;zellikle bir &ouml;zelliğe g&ouml;z atmanız gerekir:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class LoginController extends Controller{\r\n    use AuthenticatesUsers;\r\n    \/\/ Diğer kodlar<\/code><\/pre>\r\n\r\n<p>Bu <strong>\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Auth\/AuthenticatesUsers.php<\/strong> &ouml;zelliğinin i&ccedil;ine girerseniz, bir y&ouml;ntem g&ouml;r&uuml;rs&uuml;n&uuml;z:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function username(){\r\n    return 'email';\r\n}<\/code><\/pre>\r\n\r\n<p>Bakın, bu sadece bir işlev tarafından d&ouml;nd&uuml;r&uuml;len sabit bir alandır. Ve sonra aynı &ouml;zellikte ger&ccedil;ek doğrulama ve kimlik doğrulamasında kullanılır:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected function validateLogin(Request $request){\r\n    $request-&gt;validate([\r\n        $this-&gt;username() =&gt; 'required|string',\r\n        'password' =&gt; 'required|string',\r\n    ]);\r\n}<\/code><\/pre>\r\n\r\n<p>Yapmanız gereken tek şey, bu y&ouml;ntemi daha &ouml;nce bu makalede <strong>redirectTo<\/strong>&nbsp;parametresiyle yaptığımız gibi <strong>LoginController<\/strong>&#39;ınıza ge&ccedil;ersiz kılmaktır.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class LoginController extends Controller{\r\n    use AuthenticatesUsers;\r\n    \/\/ Diğer kodlar\r\n    public function username(){\r\n        return 'username';\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>","kategori_id":"2","etiketler":"php,laravel","aktif":"1","sira":"4","onecikarilan":"0","github_repo":null,"created_at":"2020-01-13 18:53:50","updated_at":"2020-01-16 11:06:07"},
    {"id":"35","baslik":"Laravel Seeding işlemi için 6 ipucu","url":"laravel-seeding-islemi-icin-6-ipucu","icerik":"<h2>1. updateOrCreate() ile yenilemeden ka&ccedil;ının<\/h2>\r\n\r\n<p>Aşağıdaki kodun birden fazla &ccedil;alışacağını hayal edin<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function run(){\r\n    $items = [            \r\n        ['id' =&gt; 1, 'title' =&gt; 'Admin'],\r\n        ['id' =&gt; 2, 'title' =&gt; 'Normal kullanıcı'],\r\n    ];\r\n    foreach ($items as $item) {\r\n        Role::create($item);\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>İkinci denemede kod hata verecek &ccedil;&uuml;nk&uuml; ID&#39;ler &ccedil;akışacak. ID&#39;leri spesifik olarak vermezseniz, tablonuzda &ccedil;ok fazla kayıt olacaktır. Bundan ka&ccedil;ınmak i&ccedil;in;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">foreach ($items as $item) {\r\n    Role::updateOrCreate(['id' =&gt; $item['id']], $item);\r\n}<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>2. Sadece 1 Seeder Sınıfını &Ccedil;alıştırın<\/h2>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan db:seed<\/code><\/pre>\r\n\r\n<p>Bu yukarıdaki komut&nbsp;<strong>DatabaseSeeder.php<\/strong> altındaki herşeyi &ccedil;alıştıracaktır. Bundan ka&ccedil;ınmak i&ccedil;in tek bir seeder dosyasını &ccedil;alıştırabilirsiniz;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan db:seed --class=UsersTableSeeder<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>3. Seeder Sınıfını Migration&#39;dan Koşturun<\/h2>\r\n\r\n<p>Seeding işlemi i&ccedil;in bize bir tablo lazım ve migration dosyaları tablodaki s&uuml;tunların tiplerini ve &ouml;zellikleri tutar. Ancak&nbsp;production&#39;da,&nbsp;<code>php artisan db:seed<\/code>&nbsp; komutunu &ccedil;alıştırmamalıyız. Bu komut migration dosyamızda hangi seeder dosyamızın &ccedil;alışacağını g&ouml;sterir<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function up(){\r\n    Schema::create('themes', function (Blueprint $table) {\r\n        $table-&gt;increments('id');\r\n        $table-&gt;text('name');\r\n    });\r\n    Artisan::call('db:seed', [\r\n        '--class' =&gt; ThemesTableSeeder::class\r\n    ]);\r\n}\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>4. İlişkiler ile Seeder Factory: Parent&rsquo;s Factory<\/h2>\r\n\r\n<p>Eğer database&#39;e seeding işlemini Factory kullanarak yapıyorsanız, Modeller arası ilişkiyi nasıl oluşturuyorsunuz? &Ouml;rnek 10 şirket ile 10 kişi arasındaki kim hangi şirkette ilişkisini nasıl yaparsınız?&nbsp;<strong>database\/factories\/CompanyFactory.php<\/strong> i&ccedil;indeki &ouml;rnek kod;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$factory-&gt;define(App\\Contact::class, function (Faker\\Generator $faker) {\r\n    return [\r\n        'company_id' =&gt; factory('App\\Company')-&gt;create()-&gt;id,\r\n        'first_name' =&gt; $faker-&gt;firstName(),\r\n        'last_name' =&gt; $faker-&gt;lastName,\r\n        'phone1' =&gt; $faker-&gt;phoneNumber,\r\n        'phone2' =&gt; $faker-&gt;phoneNumber,\r\n        'email' =&gt; $faker-&gt;email,\r\n        'skype' =&gt; $faker-&gt;word,\r\n        'address' =&gt; $faker-&gt;address,\r\n    ];\r\n});<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>5. Local ve Production i&ccedil;in DatabaseSeeder<\/h2>\r\n\r\n<p>Bazen bazı verilerinizin sadece localde olması gereklidir. Yada farklı environment i&ccedil;in farklı seeder dosyası da &ccedil;alıştırabilirsiniz. Aşağıdaki basit if\/else ile farklı&nbsp;environment i&ccedil;in farklı seeder işlemi yapabilirsiniz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class DatabaseSeeder extends Seeder{\r\n    public function run(){\r\n        if (app()-&gt;environment() == 'production') {\r\n            $this-&gt;call(ThemesTableSeeder::class);\r\n            $this-&gt;call(LanguagesTableSeeder::class);\r\n        } else {\r\n            $this-&gt;call(UsersTableSeeder::class);\r\n            $this-&gt;call(ModulesTableSeeder::class);\r\n            $this-&gt;call(ThemesTableSeeder::class);\r\n            $this-&gt;call(LanguagesTableSeeder::class);\r\n        }\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h2>6. iSeed K&uuml;t&uuml;phanesi<\/h2>\r\n\r\n<p>Son ipucu ise&nbsp;<a href=\"https:\/\/github.com\/orangehill\/iseed\" rel=\"noreferrer noopener\" target=\"_blank\">iSeed Generator<\/a>&nbsp;k&uuml;t&uuml;phanesi.<\/p>","kategori_id":"2","etiketler":"php,laravel,seeder","aktif":"1","sira":"3","onecikarilan":"0","github_repo":"orangehill\/iseed","created_at":"2020-01-16 10:11:07","updated_at":"2020-01-16 11:06:07"},
    {"id":"36","baslik":"Extra Laravel Doğrulama Kuralları","url":"extra-laravel-dogrulama-kurallari","icerik":"<p>Laravel&#39;in 60&#39;dan fazla&nbsp;<a href=\"http:\/\/laravel.com\/docs\/5.8\/validation#available-validation-rules\" target=\"_blank\">validation<\/a> kuralları var. Ancak bunlar farklı paketlerin valdiation kuralları.<\/p>\r\n\r\n<hr \/>\r\n<h2>Alphametric&#39;den 22 Kural<\/h2>\r\n\r\n<p><a href=\"https:\/\/twitter.com\/alphametric_co\" rel=\"noreferrer noopener\" target=\"_blank\">Alphametric<\/a>&#39;in yazdığı bu kuralları&nbsp;<a href=\"https:\/\/github.com\/alphametric\/laravel-validation-rules\" rel=\"noreferrer noopener\" target=\"_blank\">Github repository<\/a>&#39;den ulaşabilirsiniz.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>StrongPassword<\/strong>: Şifrenin g&uuml;&ccedil;l&uuml; olup olmadığını kontrol eder<\/li>\r\n\t<li><strong>TelephoneNumber<\/strong>: Telefon numarası doğru mu<\/li>\r\n\t<li><strong>RecordOwner<\/strong>: Kimliği doğrulanmış kullanıcının kimliğinin belirli bir veritabanı kaydındaki user_id s&uuml;tunuyla eşleşmesini gerektirir. &Ouml;rnek&nbsp;<em>yazar:posts,id<\/em><\/li>\r\n\t<li><strong>MonetaryFigure<\/strong>: Parasal fig&uuml;r e.g $72.33<\/li>\r\n\t<li><strong>DisposableEmail<\/strong>: Tek kullanımlık olmayan e-posta adresi<\/li>\r\n\t<li><strong>DoesNotExist<\/strong>: Belirli bir veritabanı tablosunda\/s&uuml;tununda değer var\/yok<\/li>\r\n\t<li><strong>Decimal<\/strong>: Uygun bi&ccedil;ime sahip ondalık sayı<\/li>\r\n\t<li><strong>EncodedImage<\/strong>: Değeri verilen bir mime t&uuml;r&uuml;n&uuml;n base64 kodlu g&ouml;r&uuml;nt&uuml;s&uuml;d&uuml;r<\/li>\r\n\t<li><strong>LocationCoordinates<\/strong>: Virg&uuml;lle ayrılmış enlem ve boylam koordinatları k&uuml;mesi<\/li>\r\n\t<li><strong>FileExists<\/strong>: Varolan bir dosyanın yolu<\/li>\r\n\t<li><strong>Equals<\/strong>: Değeri verilen başka bir değere eşitmi<\/li>\r\n\t<li><strong>MacAddress<\/strong>: Değeri ge&ccedil;erli bir MAC adresimi<\/li>\r\n\t<li><strong>ISBN<\/strong>: Değeri ge&ccedil;erli bir ISBN-10 veya ISBN-13 numarasımı<\/li>\r\n\t<li><strong>EndsWith<\/strong>: Değer verilen bir dize ile biter mi<\/li>\r\n\t<li><strong>EvenNumber<\/strong>: Değer &ccedil;ift sayıdır (ondalık sayılar ilk &ouml;nce intval kullanılarak d&ouml;n&uuml;şt&uuml;r&uuml;l&uuml;r)<\/li>\r\n\t<li><strong>OddNumber<\/strong>: Değer tek bir sayıdır (ondalık sayılar &ouml;nce aralık kullanılarak d&ouml;n&uuml;şt&uuml;r&uuml;l&uuml;r)<\/li>\r\n\t<li><strong>Lowercase<\/strong>: Değer k&uuml;&ccedil;&uuml;k harfli bir dizedir<\/li>\r\n\t<li><strong>Uppercase<\/strong>: Değer b&uuml;y&uuml;k harfli bir dizedir<\/li>\r\n\t<li><strong>Titlecase<\/strong>: Değer bir titlecase dizesidir<\/li>\r\n\t<li><strong>Domain<\/strong>: Değer bir domain mi&nbsp;(google.com, www.google.com)<\/li>\r\n\t<li><strong>CitizenIdentification<\/strong>: Değer kimliği ABD, İngiltere veya Fransa vatandaş kimlik numarası<\/li>\r\n\t<li><strong>WithoutWhitespace<\/strong>: Değer boşluk karakteri i&ccedil;ermiyor<\/li>\r\n<\/ul>\r\n\r\n<hr \/>\r\n<h2>Scott Robinson&#39;dan 8 Kural<\/h2>\r\n\r\n<p><a href=\"https:\/\/laravel-validation-rules.github.io\/\" rel=\"noreferrer noopener\" target=\"_blank\">laravel-validation-rules.github.io<\/a>&nbsp;sitesinin sahibi&nbsp;<a href=\"https:\/\/github.com\/ssx?tab=repositories\" rel=\"noreferrer noopener\" target=\"_blank\">Scott Robinson<\/a>&#39;dan 8 kural;<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Colour<\/strong>: Şu anda yalnızca hex kodları destekleyen renkleri doğrular.<\/li>\r\n\t<li><strong>Country Codes<\/strong>: 2 ve 3 karakterlik &uuml;lke kodlarını doğrular.<\/li>\r\n\t<li><strong>Credit Card<\/strong>: Bu kural, verilen bir kredi kartı numarasının, son kullanma tarihinin veya cvc&#39;nin ge&ccedil;erli olduğunu doğrular.<\/li>\r\n\t<li><strong>IP<\/strong>: Bir ip adresinin genel veya &ouml;zel olduğunu doğrular. İpv4 ve ipv6&#39;yı destekler.<\/li>\r\n\t<li><strong>Phone<\/strong>:&nbsp;Telefon numarası bi&ccedil;imini doğrular.<\/li>\r\n\t<li><strong>Subdomain<\/strong>: Uygulamanızda g&ouml;nderilen bir alt alan adını doğrular.<\/li>\r\n\t<li><strong>Timezone<\/strong>: Bu kural, belirli bir saat diliminin sistem tarih-saat veritabanında ge&ccedil;erli olduğunu doğrular.<\/li>\r\n\t<li><strong>US State<\/strong>: ABD Eyaletlerini ve Kanada Eyaletlerini doğrular<\/li>\r\n<\/ul>\r\n\r\n<hr \/>\r\n<h2>Spatie&#39;den 5 Kural<\/h2>\r\n\r\n<p><a href=\"https:\/\/spatie.be\/\" rel=\"noreferrer noopener\" target=\"_blank\">Spatie<\/a>&nbsp;takımının <a href=\"http:\/\/github.com\/spatie\/laravel-validation-rules\" target=\"_blank\">Github<\/a>&#39;taki kuralları:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Authorized<\/strong>: kullanıcı, verilen modelin bir &ouml;rneği &uuml;zerinde bir yetenek ger&ccedil;ekleştirme yetkisine sahiptir.<\/li>\r\n\t<li><strong>CountryCode<\/strong>:&nbsp; alanı ge&ccedil;erli bir ISO3166 &uuml;lke kodu mu<\/li>\r\n\t<li><strong>Enum<\/strong>: <a href=\"https:\/\/github.com\/myclabs\/php-enum\" rel=\"noreferrer noopener\" target=\"_blank\">myclabs\/php-enum<\/a>&nbsp;gibi verilen enum sınıfının bir par&ccedil;ası mı<\/li>\r\n\t<li><strong>ModelsExist<\/strong>: giriş dizisindeki t&uuml;m değerler, verilen model sınıfı i&ccedil;in &ouml;znitelik olarak bulunur mu<\/li>\r\n\t<li><strong>Delimited<\/strong>:&nbsp;<em>&lsquo;sebastian@example.com, alex@example.com&rsquo;&nbsp;<\/em>gibi sınırlandırılmış değerler i&ccedil;eriyor mu<\/li>\r\n<\/ul>\r\n\r\n<hr \/>\r\n<h2>Pineco.de&#39;den 5 Kural<\/h2>\r\n\r\n<p>Son olarak, Pineco.de&#39;den <a href=\"https:\/\/twitter.com\/_iamgergo\" rel=\"noreferrer noopener\" target=\"_blank\">Gergő D. Nagy<\/a>, 2017&#39;nin sonlarında bir dizi doğrulama kuralı ve bir deposu olan bir <a href=\"http:\/\/pineco.de\/handy-validation-rules-in-laravel\/\" target=\"_blank\">makale<\/a> yayınladı. O zamandan beri g&uuml;ncellenmedi, bu y&uuml;zden dikkatli kullanın.<\/p>\r\n\r\n<ul>\r\n\t<li>Kullanıcının <strong>şifresini <\/strong>kontrol etme<\/li>\r\n\t<li><strong>Tek <\/strong>ya <strong>&ccedil;ift <\/strong>sayılar<\/li>\r\n\t<li>Değer yalnızca <strong>artırılabilir<\/strong><\/li>\r\n\t<li>Değer<strong> belirli kelimeler <\/strong>i&ccedil;eriyor<\/li>\r\n\t<li>G&uuml;n <strong>hafta i&ccedil;i<\/strong> olmalı<\/li>\r\n<\/ul>","kategori_id":"2","etiketler":"php,laravel,validation","aktif":"1","sira":"1","onecikarilan":"0","github_repo":null,"created_at":"2020-01-16 10:14:16","updated_at":"2020-01-16 11:05:13"},
    {"id":"37","baslik":"Custom Validation Kuralı Oluşturma","url":"custom-validation-kurali-olusturma","icerik":"<p>Bazı nedenlerden &ouml;t&uuml;r&uuml;, sadece şimdi Laravel 5.5&#39;te sunulan ve Request sınıfına benzer şekilde doğrulama kuralınızı yapan artisan komutunda tanıtılan bir &ouml;zelliği g&ouml;relim. Yaz Olimpiyat Oyunları etkinliklerini doldurmak i&ccedil;in bir form &ouml;rneği alalım - yani yıl ve şehir:<\/p>\r\n\r\n<p><img alt=\"\" src=\"\/upload\/files\/olimpiyat.png\" style=\"height:192px; width:400px\" \/><\/p>\r\n\r\n<p>Şimdi sadece Olimpiyat Oyunlarının yılını girebileceğiniz bir doğrulama kuralı oluşturalım:<\/p>\r\n\r\n<ul>\r\n\t<li>Oyunlar 1896&#39;da başladı<\/li>\r\n\t<li>Yıl mevcut yıldan daha b&uuml;y&uuml;k olamaz<\/li>\r\n\t<li>Sayı 4&#39;e b&ouml;l&uuml;nmelidir<\/li>\r\n<\/ul>\r\n\r\n<pre>\r\n<code class=\"language-coffeescript\">php artisan make:rule OlympicYear<\/code><\/pre>\r\n\r\n<p>Laravel&nbsp;<strong>app\/Rules\/OlympicYear.php<\/strong>&nbsp;adında bir dosya oluşturur.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">namespace App\\Rules;\r\nuse Illuminate\\Contracts\\Validation\\Rule;\r\nclass OlympicYear implements Rule{\r\n    \/**\r\n     * Doğrulama başarılı mı değil mi\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     *\/\r\n    public function passes($attribute, $value){\r\n        \/\/\r\n    }\r\n    \/**\r\n     * Get the validation error message\r\n     * @return string\r\n     *\/\r\n    public function message(){\r\n        return 'Doğrulama Hata Mesajı';\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>As I said, it&rsquo;s similar to Requests classes for validation. We fill in the methods.&nbsp;<strong>passes()<\/strong>&nbsp;should return true\/false depending on&nbsp;<strong>$value<\/strong>condition, which is this in our case:<\/p>\r\n\r\n<p>S&ouml;ylediğim gibi validation i&ccedil;in Requests sınıflarına benzer. <strong>passes() <\/strong>metodu&nbsp;<strong>$value<\/strong> koşuluna bağlı olarak true \/ false d&ouml;nd&uuml;rmelidir, bu da bizim durumumuzda:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function passes($attribute, $value){\r\n    return $value &gt;= 1896 &amp;&amp; $value &lt;= date('Y') &amp;&amp; $value % 4 == 0;\r\n}<\/code><\/pre>\r\n\r\n<p>Sonra, şu mesajını ekliyoruz:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function message(){\r\n    return ':attribute Olimpik Oyunların yılında olmalıdır';\r\n}<\/code><\/pre>\r\n\r\n<p>Finally, how we use this class? In controller&#39;s&nbsp;<strong>store()<\/strong>&nbsp;method we have this code:<\/p>\r\n\r\n<p>Son olarak, bu sınıfı nasıl kullanıyoruz? Controller&#39;da&nbsp;<strong>store()<\/strong>&nbsp;y&ouml;nteminde şu kod var:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function store(Request $request){\r\n    $this-&gt;validate($request, ['year' =&gt; new OlympicYear]);\r\n}<\/code><\/pre>\r\n\r\n<p>S&ouml;zdizimine dikkat edin, ikinci parametre bir dizi olmalı ve sonra Kural sınıfımızdan yeni bir nesne oluşturuyoruz.<\/p>\r\n\r\n<p><img alt=\"Laravel validation custom\" src=\"\/upload\/files\/olimpiyat2.png\" style=\"height:225px; width:380px\" \/><\/p>","kategori_id":"1","etiketler":"php,laravel","aktif":"1","sira":"2","onecikarilan":"0","github_repo":null,"created_at":"2020-01-16 11:05:59","updated_at":"2020-01-16 12:16:35"}
]