<?php
use App\Yazi;
use Illuminate\Database\Seeder;
class YazıSeeder extends Seeder{
    public function run(){
        $json = File::get("database/veriler/yazis.json");
        $data = json_decode($json);
        foreach ($data as $obj) {
            Yazi::create(array(
            'id' => $obj->id,
            'baslik' => $obj->baslik,
            'url' => $obj->url,
            'kategori_id' => $obj->kategori_id,
            'etiketler' => $obj->etiketler,
            'aktif' => $obj->aktif,
            'icerik' => $obj->icerik,
            'onecikarilan' => $obj->onecikarilan,
            'github_repo' => $obj->github_repo,
            'sira' => $obj->sira
          ));
        }
    }
}

/*
[
    { "id": "1", "baslik": "Temiz Kod Yazımı", "url": "temiz_kod_yazimi", "kategori_id": "1", "icerik": "<h3><strong>Mantıklı ve anlamlı değişken isimleri kullanın.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$ymdstr = $moment-&gt;format('y-m-d');<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$currentDate = $moment-&gt;format('y-m-d');<\/code><\/pre>\r\n\r\n<h3><strong>Aynı değişken t&uuml;rleri i&ccedil;in aynı kelime hazinesi kullanın.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">getUserInfo();\r\ngetUserData();\r\ngetUserRecord();\r\ngetUserProfile();<\/code><\/pre>\r\n\r\n<ol>\r\n<\/ol>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">getUser();<\/code><\/pre>\r\n\r\n<h3><strong>Aranabilen isimler kullanın.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$result = $serializer-&gt;serialize($data, 448); \/\/ What the heck is 448 for?<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$json = $serializer-&gt;serialize($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);<\/code><\/pre>\r\n\r\n<p>-----<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">if ($user-&gt;access &amp; 4) {\r\n    \/\/ What the heck is 4 for?\r\n}<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class User{\r\n    const ACCESS_READ = 1;\r\n    const ACCESS_CREATE = 2;\r\n    const ACCESS_UPDATE = 4;\r\n    const ACCESS_DELETE = 8;\r\n}\r\nif ($user-&gt;access &amp; User::ACCESS_UPDATE) {\r\n    \/\/ do edit ...\r\n}<\/code><\/pre>\r\n\r\n<h3><strong>Gereksiz i&ccedil;erikleri ekleme.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nclass Car{\r\n    public $carMake;\r\n    public $carModel;\r\n    public $carColor;\r\n\r\n    \/\/...\r\n}\r\n<\/code><\/pre>\r\n\r\n<h4>yerine,<\/h4>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nclass Car{\r\n    public $make;\r\n    public $model;\r\n    public $color;\r\n\r\n    \/\/...\r\n}\r\n<\/code><\/pre>\r\n\r\n<h3><strong>2 veya daha az fonksiyon parametresi kullanın.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nfunction createMenu($title, $body, $buttonText, $cancellable) {\r\n    \/\/ ...\r\n}\r\n<\/code><\/pre>\r\n\r\n<h4>yerine,<\/h4>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nclass MenuConfig{\r\n    public $title;\r\n    public $body;\r\n    public $buttonText;\r\n    public $cancellable = false;\r\n}\r\n\r\n$config = new MenuConfig();\r\n$config-&gt;title = 'Foo';\r\n$config-&gt;body = 'Bar';\r\n$config-&gt;buttonText = 'Baz';\r\n$config-&gt;cancellable = true;\r\n\r\nfunction createMenu(MenuConfig $config) {\r\n    \/\/ ...\r\n}\r\n<\/code><\/pre>\r\n\r\n<h3><strong>Fonksiyonalr tek birşey olmalıdır.<\/strong><\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nfunction emailClients($clients) {\r\n    foreach ($clients as $client) {\r\n        $clientRecord = $db-&gt;find($client);\r\n        if ($clientRecord-&gt;isActive()) {\r\n            email($client);\r\n        }\r\n    }\r\n}\r\n<\/code><\/pre>\r\n\r\n<h4>yerine,<\/h4>\r\n\r\n<pre>\r\n<code class=\"language-php\">function emailClients($clients) {\r\n    $activeClients = activeClients($clients);\r\n    array_walk($activeClients, 'email');\r\n}\r\n\r\nfunction activeClients($clients) {\r\n    return array_filter($clients, 'isClientActive');\r\n}\r\n\r\nfunction isClientActive($client) {\r\n    $clientRecord = $db-&gt;find($client);\r\n    return $clientRecord-&gt;isActive();\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Daha fazla detay ve i&ccedil;erik i&ccedil;in;&nbsp;<a href=\"https:\/\/github.com\/jupeter\/clean-code-php\/blob\/master\/README.md\" target=\"_blank\">clean-code<\/a><\/p>\r\n", "created_at": "2018-09-27 06:33:14", "updated_at": "2019-11-26 13:42:57", "sira": "19", "fixed": "0", "etiketler": "laravel,php,mvc,composer,framework", "aktif": "1" },
    { "id": "2", "baslik": "Laravel Nedir?", "url": "laravel_nedir_", "kategori_id": "2", "icerik": "<p>Laravel, PHP dili ile yazılmış, g&uuml;&ccedil;l&uuml; bir frameworkd&uuml;r. Taylor Otwell &ouml;nderliğinde geliştirmektedir.&nbsp; S&ouml;z dizimi basit ve anlamlıdır. Bu sebeple &ouml;ğrenmesi daha kolaydır. Laravel i&ccedil;inde bir&ccedil;ok yapıyı ve &ouml;zelliği barındırır. Bunun sonucunda basit web uygulamalarında ya da karmaşık web sayfalarında rahatlıkla kullanılabilir. Laravel&rsquo;in sloganı &ldquo;<strong>The PHP Framework For Web Artisans<\/strong>&rdquo; yani &ldquo;Web sanat&ccedil;ılarının PHP Framework&uuml;d&uuml;r.<\/p>\r\n\r\n<p>Laravel, profesyonel ya da amat&ouml;r web geliştiricileri tarafından kullanılabilir. OOP yapısı sebebiyle daha derli toplu, temiz, okunabilir kod yazılmasına olanak sağlar.<\/p>\r\n\r\n<p>Laravel ile geliştirme yapmaya başlamak i&ccedil;in, HTML\/CSS bilgisine ve orta seviye PHP bilgisine ihtiya&ccedil; vardır.&nbsp;<\/p>\r\n\r\n<h3><strong>&Ouml;nemli Bilgiler<\/strong><\/h3>\r\n\r\n<ol>\r\n\t<li>Bağımlılık y&ouml;neticisi (Dependency Manager) olarak&nbsp;<a href=\"https:\/\/tr.wikipedia.org\/wiki\/Composer\" rel=\"nofollow\" target=\"_blank\"><strong>Composer<\/strong><\/a>&nbsp;kullanır.<\/li>\r\n\t<li>İ&ccedil;inde&nbsp;<a href=\"https:\/\/laravel.com\/docs\/5.4\/eloquent\" rel=\"nofollow\" target=\"_blank\"><strong>Eloquent ORM<\/strong><\/a>&nbsp;(Object Relational Mapping)&rsquo;yi barındırır. Bu yapıda veritabanındaki her bir tabloya karşılık gelen bir model sınıfı bulunur. Bu sayede uzun sorgu c&uuml;mleleri yerine &ccedil;ok daha basit şekilde veritabanı sorguları yapmanızı sağlar. Ayrıca farklı veritabanlarından (Mysql, PostgreSql, MongoDB vb.) sorgularınızda değişiklik yapmadan sorgu yapabilme imk&acirc;nı sunar.<\/li>\r\n\t<li>Template engine olarak &ldquo;<a href=\"https:\/\/laravel.com\/docs\/5.4\/blade#introduction\" rel=\"nofollow\" target=\"_blank\"><strong>Blade<\/strong><\/a>&rdquo; kullanmaktadır. MVC(Model, View, Controller) mimarisinde View (V) kısmında denk gelmektedir. Bu yapı sayesinde php ve html kodlarımızı birbirinden ayırma imkanı sağlar.<\/li>\r\n\t<li>Gelişmiş&nbsp;<strong>routing<\/strong>&nbsp;yapısı sayesinde URL yapınızı hızlı ve kolay bir şekilde filtreleyebilir, controllera y&ouml;nlendirebilirsiniz.<\/li>\r\n\t<li>Laravelin i&ccedil;erisinde kimlik doğrulama (<strong>Authentication<\/strong>) yapısı hazır olarak bulunmaktadır. Sadece birka&ccedil; komut yardımıyla <em>login\/logout\/register <\/em>gibi kullanıcı işlemleri uygulamanıza dahil edilebilir.<\/li>\r\n\t<li>Sadece birka&ccedil; satır kod ile verileri otomatik sayfalama (<strong>Pagination<\/strong>) &ouml;zelliği bulunmaktadır.<\/li>\r\n\t<li>Form ve veri girişi kısımlarında b&uuml;t&uuml;nleşik&nbsp;<a href=\"https:\/\/tr.wikipedia.org\/wiki\/XSRF\" rel=\"nofollow\" target=\"_blank\"><strong>CSRF<\/strong><\/a>&nbsp;koruması bulunmaktadır.<\/li>\r\n\t<li>Migration ve seeder yapısıyla veritabanında tablo oluşturma, versiyonlama ve veri girişi işlemleri daha basit şekilde y&ouml;netilebilir.<\/li>\r\n\t<li>Yapısında bir&ccedil;ok &ldquo;<a href=\"https:\/\/symfony.com\/\" rel=\"nofollow\" target=\"_blank\"><strong>symfony framework<\/strong><\/a>&rdquo; bileşenini barındırmaktadır. Ama Laravel &ouml;ğrenmemiz i&ccedil;in bizim symfony framework bilmemize gerek yoktur.<\/li>\r\n<\/ol>\r\n\r\n<h3><strong>Laravel i&ccedil;in sunucu gereklilikleri nelerdir?<\/strong><\/h3>\r\n\r\n<ol>\r\n\t<li>PHP &gt;= 5.6.4<\/li>\r\n\t<li>OpenSSL PHP Extension<\/li>\r\n\t<li>PDO PHP Extension<\/li>\r\n\t<li>Mbstring PHP Extension<\/li>\r\n\t<li>Tokenizer PHP Extension<\/li>\r\n\t<li>XML PHP Extension<\/li>\r\n<\/ol>\r\n\r\n<p>Belirli bir PHP versiyonuna ve belirli mod&uuml;llere ihtiyacımız bulunmaktadır.&nbsp;Peki, biz bu gereklilikleri nasıl sağlayacağız?<\/p>\r\n\r\n<ol>\r\n\t<li>Bunun i&ccedil;in &ldquo;<a href=\"https:\/\/laravel.com\/docs\/5.4\/homestead\" rel=\"noopener nofollow\" target=\"_blank\">Laravel Homestead<\/a>&rdquo; kullanabilirsiniz. Bu hepsi bir arada (all in one) bir &ccedil;&ouml;z&uuml;md&uuml;r.<\/li>\r\n\t<li>PHP&rsquo;yi kendiniz kurabilirsiniz.<\/li>\r\n\t<li>Wamp\/Xammp gibi bir &ccedil;&ouml;z&uuml;m kullanabilirsiniz.<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<hr \/>\r\n<h2><strong>Laravel Eğitim Serisi<\/strong><\/h2>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><a href=\"http:\/\/blog.senocak.tk\/yazi\/laravel_kurulumu\" target=\"_blank\">Laravel Kurulumu<\/a><\/p>\r\n\t<\/li>\r\n\t<li>\r\n\t<p><a href=\"http:\/\/blog.senocak.tk\/yazi\/laravel_uygulama_yapisi\" target=\"_blank\">Laravel Uygulama Yapısı<\/a><\/p>\r\n\t<\/li>\r\n\t<li>\r\n\t<p><a href=\"http:\/\/blog.senocak.tk\/yazi\/laravel_konfigurasyonu\" target=\"_blank\">Laravel Konfig&uuml;rasyonu<\/a><\/p>\r\n\t<\/li>\r\n\t<li>\r\n\t<p><a href=\"http:\/\/blog.senocak.tk\/yazi\/laravel_route_sistemi\" target=\"_blank\">Laravel Route Sistemi<\/a><\/p>\r\n\t<\/li>\r\n\t<li>\r\n\t<p><a href=\"http:\/\/blog.senocak.tk\/yazi\/laravel_controller_yapisi\" target=\"_blank\">Laravel Controller Yapısı<\/a><\/p>\r\n\t<\/li>\r\n\t<li>\r\n\t<p><a href=\"http:\/\/blog.senocak.tk\/yazi\/laravel_controller_veri_aktarimi\" target=\"_blank\">Laravel Controller Veri Aktarımı<\/a><\/p>\r\n\t<\/li>\r\n\t<li>\r\n\t<p><a href=\"http:\/\/blog.senocak.tk\/yazi\/laravel_blade_templates\" target=\"_blank\">Laravel Blade Templates<\/a><\/p>\r\n\t<\/li>\r\n\t<li>\r\n\t<p><a href=\"http:\/\/blog.senocak.tk\/yazi\/laravel_model_yapisi\" target=\"_blank\">Laravel Model Yapısı<\/a><\/p>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>Ref:&nbsp;<a href=\"https:\/\/www.mobilhanem.com\/laravel-dersleri-laravel-nedir\/\" target=\"_blank\">laravel-dersleri<\/a><\/p>\r\n", "created_at": "2018-09-27 08:16:33", "updated_at": "2019-11-26 13:43:00", "sira": "0", "fixed": "1", "etiketler": "laravel,php,mvc,composer,framework", "aktif": "1" },
    { "id": "3", "baslik": "20 Laravel Eloquent İpuçları", "url": "20-Laravel-Eloquent-İpuclari", "kategori_id": "2", "icerik": "<h3>1. Increments ve Decrements<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$article = Article::find($article_id);\r\n$article-&gt;read_count++;\r\n$article-&gt;save();\r\n<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$article = Article::find($article_id);\r\n$article-&gt;increment('read_count');\r\n<\/code><\/pre>\r\n\r\n<p>veya<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Article::find($article_id)-&gt;increment('read_count');\r\nArticle::find($article_id)-&gt;increment('read_count', 10); \/\/ +10\r\nProduct::find($produce_id)-&gt;decrement('stock'); \/\/ -1\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>2. XorY metodları<\/h3>\r\n\r\n<p>Eloquent iki metodu birleştiren bika&ccedil; metodu var.<\/p>\r\n\r\n<p><strong>&Ouml;rnek 1<\/strong>&nbsp;&ndash;&nbsp;<code>findOrFail()<\/code>:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::find($id);\r\nif (!$user) { abort (404); }\r\n<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::findOrFail($id);\r\n<\/code><\/pre>\r\n\r\n<p><strong>&Ouml;rnek 2<\/strong>&nbsp;&ndash;&nbsp;<code>firstOrCreate()<\/code>:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::where('email', $email)-&gt;first();\r\nif (!$user) {\r\n  User::create([\r\n    'email' =&gt; $email\r\n  ]);\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::firstOrCreate(['email' =&gt; $email]);\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>3. Model boot() metodu<\/h3>\r\n\r\n<p>Eloquent modelinde varsayılan davranışı değiştirmek i&ccedil;in&nbsp;<code>boot()<\/code>&nbsp;metodu vardır.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class User extends Model{\r\n    public static function boot(){\r\n        parent::boot();\r\n        static::updating(function($model){\r\n            \/\/ do some logging\r\n            \/\/ override some property like $model-&gt;something = transform($something);\r\n        });\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p><a href=\"https:\/\/github.com\/webpatser\/laravel-uuid\" target=\"_blank\">UUID field<\/a>&nbsp;alanını oluşturmak istediğimizi d&uuml;ş&uuml;nelim.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public static function boot(){\r\n  parent::boot();\r\n  self::creating(function ($model) {\r\n    $model-&gt;uuid = (string)Uuid::generate();\r\n  });\r\n}<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>4. Koşullu ilişkilendirme ve sıralama<\/h3>\r\n\r\n<p>İlişkiyi oluşturmanın tipik yolu,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function users() {\r\n    return $this-&gt;hasMany('App\\User');    \r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Bu noktada <em>where <\/em>ve <em>orderby <\/em>ifadelerini kullanabiliriz. &Ouml;rnek olarak kullanıcılar i&ccedil;in spesifik ilişki veya email&#39;e g&ouml;re sıralamak istiyorsak,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function approvedUsers() {\r\n    return $this-&gt;hasMany('App\\User')-&gt;where('approved', 1)-&gt;orderBy('email');\r\n}\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>5. Model &ouml;zellikleri: timestamps, appends vb.<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">class User extends Model {\r\n    protected $table = 'users';\r\n    protected $fillable = ['email', 'password']; \/\/ which fields can be filled with User::create()\r\n    protected $dates = ['created_at', 'deleted_at']; \/\/ which fields will be Carbon-ized\r\n    protected $appends = ['field1', 'field2']; \/\/ additional values returned in JSON\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>ve<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected $primaryKey = 'uuid'; \/\/ it doesn't have to be \"id\"\r\npublic $incrementing = false; \/\/ and it doesn't even have to be auto-incrementing!\r\nprotected $perPage = 25; \/\/ Yes, you can override pagination count PER MODEL (default 15)\r\nconst CREATED_AT = 'created_at';\r\nconst UPDATED_AT = 'updated_at'; \/\/ Yes, even those names can be overridden\r\npublic $timestamps = false; \/\/ or even not used at all\r\n<\/code><\/pre>\r\n\r\n<p><a href=\"https:\/\/github.com\/laravel\/framework\/blob\/5.6\/src\/Illuminate\/Database\/Eloquent\/Model.php\">Abstract Model class<\/a>&nbsp;adresinde daha fazlasını bulabilirsiniz.<\/p>\r\n\r\n<hr \/>\r\n<h3>6. &Ccedil;oklu kayıt bulma<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::find(1);\r\n<\/code><\/pre>\r\n\r\n<p><em>find <\/em>komutu i&ccedil;erisine birden fazla id g&ouml;nderebiliyoruz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = User::find([1,2,3]);\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>7. WhereX<\/h3>\r\n\r\n<p>Controller sınıfımızdan view dosyalarımıza bir değer g&ouml;ndermek istediğimiz zaman nasıl <em>with <\/em>komutu yerine <em>withDeger <\/em>komutunu kullanabiliyorsak aynı işlemi <em>where <\/em>i&ccedil;inde kullanabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = User::where('approved', 1)-&gt;get();\r\n<\/code><\/pre>\r\n\r\n<p>yerine<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = User::whereApproved(1)-&gt;get(); \r\n<\/code><\/pre>\r\n\r\n<p>Ayrıca, aynı yapıyı tarih işlemleri i&ccedil;inde yapabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">User::whereDate('created_at', date('Y-m-d'));\r\nUser::whereDay('created_at', date('d'));\r\nUser::whereMonth('created_at', date('m'));\r\nUser::whereYear('created_at', date('Y'));\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>8. Order by ilişkisi<\/h3>\r\n\r\n<p>&Ouml;rnek olarak db de en son g&uuml;ncellenen yazıları en &uuml;ste taşımak istersek bu yapıyı kullanabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function latestPost(){\r\n    return $this-&gt;hasOne(\\App\\Post::class)-&gt;latest();\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Controller dosyamızda,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = Topic::with('latestPost')-&gt;get()-&gt;sortByDesc('latestPost.created_at');\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>9. Eloquent::when() &ndash; no more if-else&rsquo;s<\/h3>\r\n\r\n<p>&Ccedil;oğumuz aşağıdaki gibi &ldquo;if-else&rdquo; sorgusu yazarız.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">if (request('filter_by') == 'likes') {\r\n    $query-&gt;where('likes', '&gt;', request('likes_amount', 0));\r\n}\r\nif (request('filter_by') == 'date') {\r\n    $query-&gt;orderBy('created_at', request('ordering_rule', 'desc'));\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Ama daha iyi bir yapı var;&nbsp;<code>when()<\/code>:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$query = Author::query();\r\n$query-&gt;when(request('filter_by') == 'likes', function ($q) {\r\n    return $q-&gt;where('likes', '&gt;', request('likes_amount', 0));\r\n});\r\n$query-&gt;when(request('filter_by') == 'date', function ($q) {\r\n    return $q-&gt;orderBy('created_at', request('ordering_rule', 'desc'));\r\n});\r\n<\/code><\/pre>\r\n\r\n<p>Daha kısa veya hoş g&ouml;r&uuml;lmeyebilir ama &ccedil;ok daha g&uuml;&ccedil;l&uuml; bir yapıdır.<\/p>\r\n\r\n<pre>\r\n<code>$query = User::query();\r\n$query-&gt;when(request('role', false), function ($q, $role) { \r\n    return $q-&gt;where('role_id', $role);\r\n});\r\n$authors = $query-&gt;get();\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>10. BelongsTo&nbsp;<\/h3>\r\n\r\n<p>&Ouml;rneğin Post ve Author tablomuz ilişkili,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">{{ $post-&gt;author-&gt;name }}\r\n<\/code><\/pre>\r\n\r\n<p>Peki ya Author silindi yada bir şekilde ayarlanmadı. &ldquo;<em>property of non-object<\/em>&rdquo; diye bir hata alırız. Bunu &ouml;n&uuml;ne ge&ccedil;ebiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">{{ $post-&gt;author-&gt;name ?? '' }}\r\n<\/code><\/pre>\r\n\r\n<p>Ama ilişki tanımlama sırasında bunu default olarak yapabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function author(){\r\n    return $this-&gt;belongsTo('App\\Author')-&gt;withDefault();\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Bu &ouml;rnekte, yazar eklenmemiş ise&nbsp;<code>author()<\/code>&nbsp;ilişkisi <code>App\\Author<\/code>&nbsp;modelinden boş gelecektir. B&ouml;ylece, varsayılan olarak author kısmını tanımlayabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function author(){\r\n    return $this-&gt;belongsTo('App\\Author')-&gt;withDefault([\r\n        'name' =&gt; 'Yazar Tanımlanmamış'\r\n    ]);\r\n}\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>11. Order by Mutator<\/h3>\r\n\r\n<p>B&ouml;yle bir kodumuz olduğunu d&uuml;ş&uuml;nelim.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">function getFullNameAttribute(){\r\n  return $this-&gt;attributes['first_name'] . ' ' . $this-&gt;attributes['last_name'];\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Şimdi de <code>full_name e&nbsp;<\/code>g&ouml;re sıralayalım? &Ccedil;alışmayacaktır.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$clients = Client::orderBy('full_name')-&gt;get(); \/\/ doesn't work\r\n<\/code><\/pre>\r\n\r\n<p>&Ccedil;&ouml;z&uuml;m basit, sıralamayı değerler bize d&ouml;nd&uuml;kten sonra yapalım.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$clients = Client::get()-&gt;sortBy('full_name'); \/\/ works!\r\n<\/code><\/pre>\r\n\r\n<p>Note: Fonksiyon ismine dikkat:&nbsp;<strong>orderBy<\/strong>&nbsp;değil&nbsp;<strong>sortBy<\/strong>.<\/p>\r\n\r\n<hr \/>\r\n<h3>12. K&uuml;resel kapsamda varsayılan sıralama<\/h3>\r\n\r\n<p><code>User::all()<\/code>&nbsp;kodunda varsayılan olarak <code>name<\/code>&nbsp;alanına g&ouml;re sıralama yapacaktır. <em><code>boot()<\/code><\/em>&nbsp;metoduna d&ouml;nelim ve;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">protected static function boot(){\r\n    parent::boot();\r\n    \/\/ Order by name ASC\r\n    static::addGlobalScope('order', function (Builder $builder) {\r\n        $builder-&gt;orderBy('name', 'asc');\r\n    });\r\n}\r\n<\/code><\/pre>\r\n\r\n<p><a href=\"https:\/\/laravel.com\/docs\/5.6\/eloquent#query-scopes\" target=\"_blank\">Daha fazlası i&ccedil;in,<\/a>.<\/p>\r\n\r\n<hr \/>\r\n<h3>13. Raw query methods<\/h3>\r\n\r\n<p>Bazen Eloquent&nbsp; durumlarımıza saf sorgular eklememiz gerekli olur şansımıza bunlar i&ccedil;in fonksiyonlar vardır.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/\/ whereRaw\r\n$orders = DB::table('orders')\r\n    -&gt;whereRaw('price &gt; IF(state = \"TX\", ?, 100)', [200])\r\n    -&gt;get();\r\n\r\n\/\/ havingRaw\r\nProduct::groupBy('category_id')-&gt;havingRaw('COUNT(*) &gt; 1')-&gt;get();\r\n\r\n\/\/ orderByRaw\r\nUser::where('created_at', '&gt;', '2016-01-01')\r\n  -&gt;orderByRaw('(updated_at - created_at) desc')\r\n  -&gt;get();\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>14. Replicate: Kopya oluşturma<\/h3>\r\n\r\n<p>Kısaca,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$task = Tasks::find(1);\r\n$newTask = $task-&gt;replicate();\r\n$newTask-&gt;save();\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>15. B&uuml;y&uuml;k tablolar i&ccedil;in chunk() metodu<\/h3>\r\n\r\n<p>K&uuml;&ccedil;&uuml;k par&ccedil;alara b&ouml;lerek &ccedil;alışabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$users = User::all();\r\nforeach ($users as $user) {\r\n    \/\/ ...\r\n<\/code><\/pre>\r\n\r\n<p>yerine,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">User::chunk(100, function ($users) {\r\n    foreach ($users as $user) {\r\n        \/\/ ...\r\n    }\r\n});\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>16. Create additional things when creating a model<\/h3>\r\n\r\n<p>Artisan komutunu biliyoruz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">php artisan make:model Company\r\n<\/code><\/pre>\r\n\r\n<p>Ama, ilişkili alanları oluşturmak i&ccedil;in 3 adet flag olduğunu biliyor muydunuz?<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">php artisan make:model Company -mcr\r\n<\/code><\/pre>\r\n\r\n<ul>\r\n\t<li>-m, <strong>migration<\/strong><\/li>\r\n\t<li>-c, <strong>controller<\/strong><\/li>\r\n\t<li>-r ,<strong>resourceful&nbsp;<\/strong>dosyalarımızı oluşturmaya yarar.<\/li>\r\n<\/ul>\r\n\r\n<hr \/>\r\n<h3>17. G&uuml;ncelleme yaptığımızda updated_at s&uuml;tunu&nbsp;override<\/h3>\r\n\r\n<p><em><code>-&gt;save()<\/code><\/em>&nbsp;metodun parametre alabiliyor.&nbsp;Sonu&ccedil; olarak, ilgili kısmı g&uuml;ncellememesi i&ccedil;in parametre olarak belirtebiliyoruz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$product = Product::find($id);\r\n$product-&gt;updated_at = '2019-01-01 10:00:00';\r\n$product-&gt;save(['timestamps' =&gt; false]);\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>18. update() &ccedil;ıktısı?<\/h3>\r\n\r\n<p>Hi&ccedil; d&uuml;ş&uuml;nd&uuml;n&uuml;z m&uuml; kod ger&ccedil;ekten hangi değerleri g&ouml;nderiyor.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$result = $products-&gt;whereNull('category_id')-&gt;update(['category_id' =&gt; 2]);\r\n<\/code><\/pre>\r\n\r\n<p>Cevap, etkilenen satırlardır. Dolayısıyla, ka&ccedil; satırın etkilendiğini kontrol etmeniz gerekiyorsa, başka bir şeyi aramanıza gerek yoktur; update () y&ouml;ntemi bu sayıyı sizin yerinize d&ouml;nd&uuml;r&uuml;r.<\/p>\r\n\r\n<hr \/>\r\n<h3>19. Parantezleri bir Eloquent sorgusuna d&ouml;n&uuml;şt&uuml;r&uuml;n<\/h3>\r\n\r\n<p>SQL sorgunuzda and-or kısımlarını karıştırabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">... WHERE (gender = 'Male' and age &gt;= 18) or (gender = 'Female' and age &gt;= 65)\r\n<\/code><\/pre>\r\n\r\n<p>Yanlış,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$q-&gt;where('gender', 'Male');\r\n$q-&gt;orWhere('age', '&gt;=', 18);\r\n$q-&gt;where('gender', 'Female');\r\n$q-&gt;orWhere('age', '&gt;=', 65);\r\n<\/code><\/pre>\r\n\r\n<p>Karışık olabilir ama doğrusu,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$q-&gt;where(function ($query) {\r\n    $query-&gt;where('gender', 'Male')\r\n        -&gt;where('age', '&gt;=', 18);\r\n})-&gt;orWhere(function($query) {\r\n    $query-&gt;where('gender', 'Female')\r\n        -&gt;where('age', '&gt;=', 65); \r\n})\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<h3>20. &Ccedil;oklu parametreler ile&nbsp;orWhere<\/h3>\r\n\r\n<pre>\r\n<code class=\"language-php\">$q-&gt;where('a', 1);\r\n$q-&gt;orWhere('b', 2);\r\n$q-&gt;orWhere('c', 3);\r\n<\/code><\/pre>\r\n\r\n<p>Bu şekilde de kullanabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$q-&gt;where('a', 1);\r\n$q-&gt;orWhere(['b' =&gt; 2, 'c' =&gt; 3]);\r\n<\/code><\/pre>\r\n\r\n<hr \/>\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>Ref :&nbsp;<a href=\"https:\/\/laravel-news.com\/eloquent-tips-tricks\" target=\"_blank\">laravel-news.com<\/a><\/p>", "created_at": "2018-10-15 08:18:31", "updated_at": "2019-11-26 13:42:57", "sira": "10", "fixed": "0", "etiketler": "", "aktif": "1" },
    { "id": "4", "baslik": "NodeJS Nedir?", "url": "nodejs-nedir", "kategori_id": "3", "icerik": "<p>Yazdığımız uygulamalar y&uuml;ksek ihtimalle &ccedil;ok kullanıcılı uygulamalardır. &Ccedil;oklu kullanıcılı uygulamalar genelde Sunucu(Server)\/İstemci(Client) mantığı ile yazılır. Sunucu yani &ccedil;evrim i&ccedil;i &ccedil;alışan, t&uuml;m verilerin tutulduğu merkezi bir sistem. İstemci yani bu merkezi sisteme bağlı &ccedil;alışan merkezi sisteme veri iletimi yapan, kullanıcıyla etkileşimi sağlayan yan program.<\/p>\r\n\r\n<p><img alt=\"serverside-clientside\" src=\"\/upload\/files\/serverside-clientside%20(1).png\" style=\"height:260px; width:916px\" \/><\/p>\r\n\r\n<p>G&uuml;n&uuml;m&uuml;z modern uygulamalar da bu istemci genelde tarayıcıdır(browser). Tarayıcı &uuml;zerinden kullanılan uygulamalar genelde Web Uygulaması olarak adlandırılır. Kullanıcı uygulamayı kullanmak istediğinde tarayıcıdan sunucuya bir istek g&ouml;nderir, sunucu isteğe g&ouml;re uygulama i&ccedil;erisinde kendi anlayacağı b&ouml;l&uuml;mleri işleyerek kullanıcıya uygun &ccedil;ıktıyı &uuml;retir ve tarayıcıya g&ouml;nderir. Tarayıcı aldığı &ccedil;ıktıyı kendi i&ccedil;erisinde yorumlar ve kullanıcıya uygun &ccedil;ıktıyı &uuml;retir. Sonra kullanıcı gerektiği yerde tekrar sunucuya istek g&ouml;nderir, tekrar cevap gelir&hellip; Genel olarak tarayıcı bazlı Sunucu\/İstemci mimarisi basit anlatımla bu şekilde &ccedil;alışır.<\/p>\r\n\r\n<p>Burada &ouml;nemli bir kısım sunucunun kendi anladığı kısımları yani sunucu tabanlı diller(C#, Java, Php, Python, Ruby&hellip;) ile yazılmış kısımları &ccedil;alıştırması, tarayıcının da kendi anladığı yani tarayıcı dilleri(HTML,Css,Javascript, Dart&hellip; ) ile yazılmış kısımları &ccedil;alıştırmasıdır. Sunucu tarafında &ccedil;alışan koda&nbsp;<strong>Backend<\/strong>, tarayıcı &uuml;zerinde &ccedil;alışan koda&nbsp;<strong>Frontend&nbsp;<\/strong>denir. Web uygulamarı yazarken Backend ve Frontend kodları aynı proje i&ccedil;erisinde kullanırız. Hangi iş mantığı hangi kısımda &ccedil;alışacaksa ona g&ouml;re ya Backend&rsquo;de yada Frontend&rsquo;de yazılır.<\/p>\r\n\r\n<h1>Javascript<\/h1>\r\n\r\n<p>Frontend dillerinden en &ouml;nemlilerinden bir tanesi Javascript&rsquo;tir. Web tarayıcılarının etkin bir şekilde kullanılması i&ccedil;in geliştirilmiştir. Kullanıcıyla etkileşimin artırılması, iş y&uuml;k&uuml;n&uuml;n sunuculardan istemcilere taşınması, daha g&ouml;rsel animasyonlu web siteleri\/ web uygulamaları geliştirilmesi gibi kullanım alanları vardır. 1995 yıllarında &ccedil;ıktı. Java diliyle isim benzerliği dışında hi&ccedil;bir alakası yoktur. Javasvript standartları Ecma International firması tarafından ECMASCRIPT standartlarıyla belirlenir. G&uuml;n&uuml;m&uuml;zde kullanılan ECMASCRIPT standardı 5.1 s&uuml;r&uuml;m&uuml;d&uuml;r. Ve bu standart Javascript 1.8.1 ile desteklenmektedir. Ancak şu aralar ECMASCRIPT 6 standardı &uuml;zerinde &ccedil;alışmalar devam etmektedir.<\/p>\r\n\r\n<p>Javascript prototip bazlı nesne y&ouml;nelimli programlama, fonksiyonel programlama, imparatif programlama paradigmalarını destekler. Genellikle tarayıcılarda kullanılır. Google&rsquo;ın Chrome tarayıcısını ve bu tarayıcı i&ccedil;erisindeki V8 Javascript motorunu geliştirmesiyle Javascript performansında ve gelişimde b&uuml;y&uuml;k y&uuml;kselişler oldu. Bu Javascript motorunun g&uuml;c&uuml; sayesinde daha &ouml;nce yapılamayan bir&ccedil;ok uygulama yapıldı. Ve ilk defa Javascript frontend&rsquo;den &ccedil;ıkarak Backend tarafına ge&ccedil;iş yaptı ve Nodejs doğdu.<\/p>\r\n\r\n<h1>NodeJS<\/h1>\r\n\r\n<p>NodeJs 2009 yılında Joyent firmasında &ccedil;alışan Ryan Dahl tarafından geliştirilen Javascript &Ccedil;alışma Ortamıdır.(Javascript Runtime Enviroment). Joyent firmasının desteği ve V8 motorunun g&uuml;c&uuml; ile Dahl Javascript&rsquo;i Backend kısmına taşıdı.<\/p>\r\n\r\n<blockquote>\r\n<p>&ldquo;Nodejs backend tarafında &ccedil;alışan, javascript tabanlı scriptleri yorumlanabilen ve &ccedil;alıştırabilen, hızlı, &ouml;l&ccedil;eklenebilir &nbsp;network uygulamaları geliştirmeyi sağlayan bir &ccedil;alışma zamanı ortamıdır(runtime enviroment).&rdquo;<\/p>\r\n<\/blockquote>\r\n\r\n<p>Javascript&rsquo;in backend&rsquo;e(server side) taşınması ile developerlar tek dil bilerek hem frontend hem backend kod yazabilir hale geldiler. Frontend de kullanılan javascript k&uuml;t&uuml;phanelerinden bazıları backend tarafında kullanılabilir hale geldi.<\/p>\r\n\r\n<p>Javascript&rsquo;in doğal Non Block mimarisi sayesinde backend tarafında &ouml;l&ccedil;eklenebilir uygulamalar daha kolay bir şekilde yazılabilir hale geldi. Nodejs&rsquo;in &ouml;l&ccedil;eklenebilir uygulamalardaki başarısı sayesinde kullanıcı sayısı milyonlarla ifade edilen b&uuml;y&uuml;k siteler nodejs kullanmaya başladı. &Uuml;stelik bunu single thread olarak yapabiliyor.<\/p>\r\n\r\n<blockquote>\r\n<p>&ldquo;&Ouml;l&ccedil;eklenebilirlik, bir uygulamanın aynı anda birden &ccedil;ok kullanıcıya takılmadan cevap verebilir halde olmasıdır.&rdquo;<\/p>\r\n<\/blockquote>\r\n\r\n<p>Peki bunu nasıl başarıyor? Nodejs olay bazlı(event-driven) Non-Blocking yapısını Event loop denilen bir mimariyle sağlıyor. (İlerde detayına gireceğiz.) Bu mimariyle tek bir thread(single thread) ile asenkron &ccedil;alışabilmektedir.<\/p>\r\n\r\n<p>Bunların dışında Nodejs&rsquo;in en b&uuml;y&uuml;k avantajlarından bir taneside mod&uuml;ler yapısı ve bu yapıyı destekleyen paket y&ouml;netim sistemi: npm(nodejs package manager). Nodejs npm ve npm yi destekleyen topluluk sayesinde hemen hemen her işimizi paketler sayesinde halledebiliyoruz. Şuan npm &uuml;zerindeki paket sayısı yaklaşık 250000 civarında. E okadar paket i&ccedil;erisinde mutlaka işimize yarayan bir paket vardır :). Tabi bu kadar paket Nodejs&rsquo;in arkasında &ccedil;ok b&uuml;y&uuml;k bir topluluğun olduğunuda g&ouml;steriyor. Bu kadar b&uuml;y&uuml;k bir topluluğun i&ccedil;erisinde sorunları &ccedil;&ouml;zmekte kolay.<\/p>", "created_at": "2019-11-23 20:03:51", "updated_at": "2019-11-26 13:43:00", "sira": "1", "fixed": "1", "etiketler": "nodejs,node,js", "aktif": "1" },
    { "id": "5", "baslik": "Express.js Nedir?", "url": "expressjs-nedir", "kategori_id": "3", "icerik": "<p><strong>Express.js<\/strong>&nbsp;mod&uuml;l&uuml; \/ paketi,&nbsp;<a href=\"https:\/\/ceaksan.com\/node-js-nedir\/\" target=\"_blank\">Node.js<\/a>&nbsp;tabanlı bir web uygulama sunucu &ccedil;atısıdır. Express.js&rsquo;nin sunduğu sınırsız HTTP yardımcı ara&ccedil;ları ve katmanlar sayesinde sağlam bir API oluşturmak olduk&ccedil;a hızlı ve kolaydır.<\/p>\r\n\r\n<p><strong>Express.js<\/strong>, ayrıca&nbsp;<strong>MEAN<\/strong>&nbsp;yazılım demeti bileşenlerinden biridir.&nbsp;<strong>MEAN<\/strong>&nbsp;(<strong>M<\/strong>ongoDB,&nbsp;<strong>E<\/strong>xpress.js,&nbsp;<strong>A<\/strong>ngular.js ve&nbsp;<strong>N<\/strong>ode.js), web uygulamaları ve dinamik web siteleri geliştirmek i&ccedil;in kullanılan, &uuml;cretsiz ve a&ccedil;ık kaynak kodlu yazılım demetidir. Ayrıca, Express.js MEAN dışında pek &ccedil;ok framework&rsquo;&uuml;n de par&ccedil;asıdır. Liste i&ccedil;in&nbsp;<a href=\"https:\/\/expressjs.com\/tr\/resources\/frameworks.html\" rel=\"noopener noreferrer\" target=\"_blank\">Frameworks built on Express<\/a>&nbsp;başlıklı listeye g&ouml;z atabilirsiniz.<\/p>\r\n\r\n<h1>Express.js Mod&uuml;l&uuml;n&uuml;n Sağladığı Avantajlar<\/h1>\r\n\r\n<ul>\r\n\t<li>Kolay ve hızlı bir şekilde Web uygulamaları geliştirme imkanı sağlar,<\/li>\r\n\t<li><a href=\"https:\/\/pugjs.org\/api\/getting-started.html\" target=\"_blank\">Pug<\/a>,&nbsp;<a href=\"https:\/\/ejs.co\/\" rel=\"noopener noreferrer\" target=\"_blank\">EJS<\/a>,&nbsp;<a href=\"https:\/\/ceaksan.com\/handlebars-nedir\/\" target=\"_blank\">Handlebars<\/a>&nbsp;gibi şablon motorları (template engine) uygulama geliştirme s&uuml;re&ccedil;lerinde kullanılabilir,<\/li>\r\n\t<li>Orta katman (Middleware) mod&uuml;lleri ile kapsamlı uygulamalar geliştirilebilir,<\/li>\r\n\t<li><a href=\"https:\/\/ceaksan.com\/routing-nedir\/\">Route (Y&ouml;nlendirme)<\/a>&nbsp;y&ouml;ntemiyle web istekleri y&ouml;netilebilir,<\/li>\r\n\t<li>MySQL, MongoDB, SQL SERVER gibi veritabanı uygulamaları uygulamalarda kullanılabilir.<\/li>\r\n\t<li>Farklı uygulamalar i&ccedil;in&nbsp;<a href=\"https:\/\/ceaksan.com\/rest-soap-api-nedir\/\">REST API<\/a>&nbsp;oluşturmak m&uuml;mk&uuml;nd&uuml;r,<\/li>\r\n\t<li>Statik dosyaların y&ouml;netimini kolaydır,<\/li>\r\n<\/ul>\r\n\r\n<p>Routing olarak, Express.js &ouml;rnek alınarak geliştirilmiş, basit bir kullanıma sahip&nbsp;<a href=\"https:\/\/visionmedia.github.io\/page.js\/\" rel=\"noopener noreferrer\" target=\"_blank\">Page.js<\/a>&nbsp;de se&ccedil;enek olarak değerlendirilebilir.<\/p>\r\n\r\n<p>Express.js desteği olan metodlar:&nbsp;<code>get, post, put, head, delete, options, trace, copy, lock, mkcol, move, purge, unlock, report, mkactivity, checkout, merge, m-search, notify, subscribe, unsubscribe, patch, search<\/code>.<\/p>\r\n\r\n<h1>Express.js Kullanım &Ouml;rneği<\/h1>\r\n\r\n<pre>\r\n<code class=\"language-bash\">npm init -y<\/code><\/pre>\r\n\r\n<p>Artık&nbsp;<code>express<\/code>&nbsp;mod&uuml;l&uuml;n&uuml; indirebiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">npm install express –-save<\/code><\/pre>\r\n\r\n<p>Aşağıdaki i&ccedil;eriği&nbsp;<code>index.js<\/code>&nbsp;(farkı bir entry point tercih etmemiş isek) olarak kayıt edelim.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-javascript\">const express = require('express')\r\nconst app = express()\r\nconst port = 3000\r\n \r\napp.get('\/', (req, res) =&gt; res.send('Merhaba Dünya!'))\r\n \r\napp.listen(port, () =&gt; console.log(`Example app listening on port ${port}!`))<\/code><\/pre>\r\n\r\n<p>Başlangı&ccedil; aşamasında bu basit &ouml;rnek işimizi g&ouml;recektir. Artık&nbsp;<code>3000<\/code>&nbsp;no&rsquo;lu port &uuml;zerinden&nbsp;<code>\/<\/code>&nbsp;isteğine d&ouml;necek&nbsp;<code>res.send()<\/code>&nbsp;i&ccedil;eriği olan&nbsp;<code>Merhaba D&uuml;nya!<\/code>&nbsp;mesajını g&ouml;r&uuml;nt&uuml;leyebiliriz. Yapmamız gereken node ile entry point&rsquo;i işleme almak.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">node index.js<\/code><\/pre>\r\n\r\n<p>İnternet tarayıcımızın adres satırına&nbsp;<code>localhost:3000<\/code>&nbsp;yazarak &ouml;rneğimizi g&ouml;r&uuml;nt&uuml;leyebiliriz. &Ouml;rneğimizi biraz daha geliştirelim ve&nbsp;<code>res.send()<\/code>&nbsp;yerine&nbsp;<code>res.sendFile()<\/code>&nbsp;ile bir dosya i&ccedil;eriğini cevap olarak g&ouml;nderelim. Son durumda,&nbsp;<code>index.js<\/code>&nbsp;i&ccedil;eriğimiz şu şekilde olacaktır.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-javascript\">const express = require('express')\r\nconst app = express()\r\nconst port = 3000\r\n \r\napp.get('\/', (req, res) =&gt; res.sendFile(__dirname + '\/index.html');\r\n \r\napp.listen(port, () =&gt; console.log(`Example app listening on port ${port}!`))<\/code><\/pre>\r\n\r\n<p>&Ouml;rneğe son olarak statik dosyalarımızı (&ouml;rneğin \/assets klas&ouml;r&uuml;) da dahil edelim.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-javascript\">const express = require('express')\r\nconst app = express()\r\nconst port = 3000\r\n \r\napp.use(express.static(__dirname + '\/assets'));\r\n \r\napp.get('\/', (req, res) =&gt; res.sendFile(__dirname + '\/index.html'));\r\n \r\napp.listen(port, () =&gt; console.log(`Example app listening on port ${port}!`))<\/code><\/pre>\r\n\r\n<p><code>\/assets<\/code>&nbsp;i&ccedil;eriğinde&nbsp;<code>style.css<\/code>&nbsp;adında basit bir stil dosyası oluşturdum. Aşağıda&nbsp;<code>index.html<\/code>&nbsp;ve&nbsp;<code>style.css<\/code>&nbsp;dosya i&ccedil;eriklerini g&ouml;rebilirsiniz.<\/p>", "created_at": "2019-11-23 20:16:54", "updated_at": "2019-11-26 13:43:00", "sira": "2", "fixed": "1", "etiketler": "nodejs,js,node,express,expressjs", "aktif": "1" },
    { "id": "6", "baslik": "Node js vs Php", "url": "node-js-vs-php", "kategori_id": "3", "icerik": "<h1>Node js vs php &ndash; Which One is Better?<\/h1>\r\n\r\n<p>En &ccedil;eşitli ve s&uuml;rekli değişen manzara olarak, web geliştirme kavramı her tarafa yayılmaya ve b&uuml;y&uuml;me başladı.&nbsp;PHP ve Node js bu zamanlarda ve gelecek yıllarda talep arttık&ccedil;a aranan becerilerden sadece ikisi. Her iki teknoloji de karmaşıklık uygulamaları y&ouml;netme potansiyeline sahiptir; farklı konseptler ve mimariler &uuml;zerine inşa edilmişlerdir.<\/p>\r\n\r\n<p>Yeni bir teknolojiyi tanıdığınızda, geliştiricilere y&ouml;nelik en b&uuml;y&uuml;k zorluk, aniden nasıl benimseyeceğinizi ortaya koyuyor. Backend geliştiricileri genellikle Node js ve PHP&#39;yi karıştığı g&ouml;r&uuml;l&uuml;r. Aşağıdaki yazı, uzun soluklu ve olgun bir &ccedil;&ouml;z&uuml;m olarak ortaya &ccedil;ıkan ya da yeni gelenlere denemek i&ccedil;in ortaya &ccedil;ıkan sunucu tarafı gelişimi i&ccedil;in hangisinin en iyisi olduğunu vurgulamaktadır. Backend programlama i&ccedil;in listenin başında yer alan teknolojiler &ccedil;oğu zaman insanları şaşırtıyor. Bu nedenle, avantaj ve sınırlamalara aşina olmalısınız.<\/p>\r\n\r\n<p><img alt=\"Nodejs vs PHP\" src=\"\/upload\/images\/node.js-vs-php.png\" style=\"height:301px; width:801px\" title=\"Nodejs vs PHP\" \/><\/p>\r\n\r\n<h2><strong>PHP<\/strong><\/h2>\r\n\r\n<p>Bu yorumlanmış sunucu tarafı programlama dili, başlangı&ccedil;ta sunucu tarafı uygulamalar yazmak ve veritabanlarına bağlanmak i&ccedil;in&nbsp;<a href=\"https:\/\/www.apache.org\/\" rel=\"noopener noreferrer\" target=\"_blank\">Apache<\/a>&nbsp;veya&nbsp;<a href=\"https:\/\/www.nginx.com\/\" rel=\"noopener noreferrer\" target=\"_blank\">Nginx<\/a>&nbsp;web sunucularına bir mod&uuml;l olarak kuruldu. Declarative yazma stiline sahip programcılar, kodun d&uuml;zenlenmesi ve yapısıyla ilgili herhangi bir sınırlamaya tabi değildir. Avantajları:<\/p>\r\n\r\n<ul>\r\n\t<li>Kolay kod<\/li>\r\n\t<li>Geliştirme ortamına kolay konfig&uuml;rasyon<\/li>\r\n\t<li>Hosting işlemleri i&ccedil;in geniş destek<\/li>\r\n\t<li>G&uuml;&ccedil;l&uuml; kod temeli<\/li>\r\n\t<li>Bir&ccedil;ok framework desteği (WordPress, Joomla, Drupal, Laravel, Symfony,&nbsp;<a href=\"https:\/\/w3lessons.info\/category\/codeigniter\/\" rel=\"noopener noreferrer\" target=\"_blank\">Codeigniter<\/a>).<\/li>\r\n\t<li>&Ccedil;ok b&uuml;y&uuml;k destek ortamı<\/li>\r\n\t<li>Kolay taşınabilirlik (Bir&ccedil;ok platform ve serverlarda &ccedil;alışabilme)<\/li>\r\n\t<li>Kapsamlı bir k&uuml;t&uuml;phane ve SSS k&uuml;t&uuml;phanesi&nbsp;<\/li>\r\n<\/ul>\r\n\r\n<h2><strong>Node Js<\/strong><\/h2>\r\n\r\n<p>Node js&#39;e&nbsp;bir dil demek yerine, sunucu tarafında JavaScript kodunu &ccedil;alıştırmak i&ccedil;in m&uuml;kemmel bir &ccedil;&ouml;z&uuml;m diyebilirsiniz. Bu y&uuml;zden, JavaScript client tarafında da &ccedil;alışabilir. Sonu&ccedil; olarak, Node js,&nbsp;<strong>Microsoft<\/strong>,&nbsp;<strong>Yahoo<\/strong>,&nbsp;<strong>LinkedIn&nbsp;<\/strong>ve&nbsp;<strong>PayPal&nbsp;<\/strong>gibi bir&ccedil;ok b&uuml;y&uuml;k şirket tarafından başarıyla kullanılıyor. Olay odaklı bir programlama paradigması &uuml;zerine kurulu, yazılım oluşumunu hızlandırır. Avantajları:<\/p>\r\n\r\n<ul>\r\n\t<li>Yerleşik sunucu desteği<\/li>\r\n\t<li>&Ouml;ğrenmesi kolay<\/li>\r\n\t<li>Hem backend hem de frontend i&ccedil;in tek bir s&ouml;zdizimi<\/li>\r\n\t<li>B&uuml;y&uuml;k dosyalarla &ccedil;alışmak i&ccedil;in m&uuml;kemmel<\/li>\r\n\t<li>Esneklik<\/li>\r\n<\/ul>\r\n\r\n<h2><strong>Node js ve PHP farkları?<\/strong><\/h2>\r\n\r\n<p>İkiside backend teknolojileri ancak Node.js hem frontend hem de backend u&ccedil;larda tamamen JavaScript teknolojisi yığınına sahip olmak istiyorsanız avantaj sunabilir.<\/p>\r\n\r\n<h2><strong>Ne zaman PHP?<\/strong><\/h2>\r\n\r\n<ul>\r\n\t<li><strong>Merkezi Sunucu&nbsp;<\/strong>- Uygulamaları birden fazla sunucu arasında &ouml;l&ccedil;eklendirmeyi planlamıyorsanız, LAMP yığını kullanılabilir. Ancak, bu proje gereksinimlerine ve b&uuml;y&uuml;mesine bağlı olarak değişebilir.<\/li>\r\n\t<li><strong>Taşınabilirlik&nbsp;<\/strong>- Y&uuml;ksek taşınabilir bir dil olarak, web barındırmanın ucuz maliyetleri ve PHP i&ccedil;in sunucuların uygunluğu&nbsp;ile karşılaştırılamaz. Kesin olarak, PHP Apache, IIS ve kurulu desteklenen bir veritabanı sistemini i&ccedil;eren herhangi bir platformda &ccedil;alışabilir. Bu, uygulamaları taşınabilir ve dağıtımı kolay hale getirir.<\/li>\r\n<\/ul>\r\n\r\n<h2><strong>Ne zaman Node js?<\/strong><\/h2>\r\n\r\n<ul>\r\n\t<li><strong>Aynı Dil<\/strong>&nbsp;- Eğer projeniz MEAN yığını gibi yazılım yığınları i&ccedil;eriyorsa, Node.js dikkate alınmalıdır. Bu, MongoDB, Express.js,&nbsp;<a href=\"https:\/\/w3lessons.info\/angular-4-0-installation-and-setup-in-local-environment\/\" rel=\"noopener noreferrer\" target=\"_blank\">AngularJS<\/a>, dinamik tek sayfa uygulamalarından sunucu tarafı teknolojilerine ve AngularJS, Backbone.js veya&nbsp;<a href=\"https:\/\/w3lessons.info\/difference-between-angularjs-and-reactjs-which-is-best-when-to-use\/\" rel=\"noopener noreferrer\" target=\"_blank\">React.js<\/a>&nbsp;gibi frontend teknolojilerine kadar her şeyi i&ccedil;erir.<\/li>\r\n\t<li><strong>Ger&ccedil;ek Zamanlı Veriler<\/strong>&nbsp;- Ger&ccedil;ek zamanlı veri gerektiren uygulamalar i&ccedil;in uygun olan Node.js, finansal uygulamalar i&ccedil;in şiddetle tavsiye edilir, &ccedil;&uuml;nk&uuml; her şey tam sayı veya değişken olduğundan ve numaralar ve veri tipleri arasında &ccedil;ok fazla bir ayrım yapılmamasından dolayı JavaScript g&uuml;venilir değildir.<\/li>\r\n\t<li><strong>Speed&nbsp;<\/strong>- Nodejs, uygulama hızına gelince PHP&#39;den daha hızlıdır, eğer hız&nbsp;tarayıcı tabanlı &ccedil;ok oyunculu oyun veya sohbet uygulaması gibi uygulamalara ihtiyacı varsa Node.js, PHP&#39;den daha iyi bir se&ccedil;imdir.<\/li>\r\n<\/ul>\r\n\r\n<p><strong>Sonu&ccedil;<\/strong><\/p>\r\n\r\n<p>Node.js ve PHP arasında se&ccedil;im yapmak kesinlikle kolay değildir. Bilmeniz gereken tek şey, oluşturmak &uuml;zere olduğunuz uygulamanın t&uuml;r&uuml;. Kapsamlı bir barındırma desteği olan standart bir &ccedil;&ouml;z&uuml;m arıyorsanız, PHP kullanmak en iyi karardır. &Ouml;te yandan, Node.js, sohbetler, ortak &ccedil;alışma uygulamaları ve SPA&#39;lar (Tek Sayfalı Uygulamalar) gibi RTA&#39;lar (Ger&ccedil;ek Zamanlı Uygulamalar) i&ccedil;in daha iyi bir se&ccedil;enektir.<\/p>", "created_at": "2019-11-25 10:37:42", "updated_at": "2019-11-26 13:42:57", "sira": "7", "fixed": "0", "etiketler": "node,nodejs,js,php", "aktif": "1" },
    { "id": "7", "baslik": "Node.js vs Python", "url": "nodejs-vs-python", "kategori_id": "3", "icerik": "<h2>Node.js Nedir?<\/h2>\r\n\r\n<p>Node.js Google Chrome&#39;un JavaScript motorunda yerleşik sunucu tarafı platformu. Engellenmeyen, olaya dayalı G\/&Ccedil; modelini kullanır. Geliştiricilerin, dağıtılmış aygıtlarda &ccedil;alışan, veri yoğunluğundaki ger&ccedil;ek zamanlı uygulamalar oluşturmalarını sağlar. Uygulamaları JavaScript ile yazılmıştır. OS X, Microsoft Windows ve Linux işletim sistemlerinde &ccedil;alıştırılabilir. Ger&ccedil;ek zamanlı sunucu uygulamalarını &ccedil;alıştırmak i&ccedil;in yaygın olarak kullanılır.<\/p>\r\n\r\n<h2>Python Nedir?<\/h2>\r\n\r\n<p>Python, nesne y&ouml;nelimli, y&uuml;ksek seviye, dinamik ve &ccedil;ok ama&ccedil;lı bir programlama dilidir. Python&#39;un s&ouml;zdizimi ve yorumlanmış doğaya sahip dinamik yazımı, onu komut dosyası yazmak i&ccedil;in ideal bir dil haline getirir. Nesne y&ouml;nelimli programlama, fonksiyonel programlama veya prosed&uuml;rel stiller dahil olmak &uuml;zere &ccedil;oklu programlama modellerini destekler. Dahası, yorumlanmış bir dildir, yani &ccedil;alışma zamanında &ccedil;alışmadan &ouml;nce bilgisayar tarafından okunabilen koda d&ouml;n&uuml;şt&uuml;r&uuml;lemez.<\/p>\r\n\r\n<h2>Node.js &Ouml;zellikleri<\/h2>\r\n\r\n<ul>\r\n\t<li>Olay d&ouml;ng&uuml;s&uuml; olan tek bir dişli model kullanır. Bu t&uuml;r olay mekanizması, sunucunun engelleyici olmayan bir şekilde yanıt vermesine yardımcı olur.<\/li>\r\n\t<li>V8 JavaScript Engine &uuml;zerine kuruludur ve kod &ccedil;alıştırma k&uuml;t&uuml;phanesini en hızlı şekilde yapar.<\/li>\r\n\t<li>Node.js&#39;de uygulamalar verileri veriler&nbsp;halinde &ccedil;ıkardığı i&ccedil;in tamponlama yoktur.<\/li>\r\n<\/ul>\r\n\r\n<h2>Python &Ouml;zellikleri<\/h2>\r\n\r\n<ul>\r\n\t<li>Python yorumlayıcısına d&uuml;ş&uuml;k seviyeli mod&uuml;llerin dahil edilmesini sağlar. Bu mod&uuml;ller programcıların ara&ccedil;larını eklemelerini veya kişiselleştirmelerini sağlar.<\/li>\r\n\t<li>T&uuml;m b&uuml;y&uuml;k ticari veritabanlarına aray&uuml;zler sağlar.<\/li>\r\n\t<li>İşlevsel ve yapılandırılmış programlama y&ouml;ntemlerinin yanı sıra OOP&#39;yi de destekler.<\/li>\r\n\t<li>&Uuml;st d&uuml;zey dinamik veri tipleri sunar ve dinamik tip kontrol&uuml;n&uuml; destekler.<\/li>\r\n\t<li>C, C ++, COM, ActiveX, CORBA ve Java ile kolayca entegre edilebilir.<\/li>\r\n<\/ul>\r\n\r\n<h2>Node.JS Vs. Python<\/h2>\r\n\r\n<table border=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"width:557px\"><strong>Node.JS<\/strong><\/th>\r\n\t\t\t<th scope=\"col\" style=\"width:588px\"><strong>Python<\/strong><\/th>\r\n\t\t<\/tr>\r\n\t<\/thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center; width:557px\">Asenkron programlama i&ccedil;in en uygun y&ouml;ntemdir.<\/td>\r\n\t\t\t<td style=\"text-align:center; width:588px\">Asenkron programlama i&ccedil;in tam olarak en iyi se&ccedil;enek değildir.<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center; width:557px\">Saf JavaScripttir, b&ouml;ylece temelleri geliştiricler i&ccedil;in basittir.<\/td>\r\n\t\t\t<td style=\"text-align:center; width:588px\">En b&uuml;y&uuml;k avantajı, geliştiricilerin daha az kod satırı yazmaları gerektiğidir.<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center; width:557px\">Temiz kodlama standartlarından yoksundur. Bu y&uuml;zden daha b&uuml;y&uuml;k projeler i&ccedil;in tavsiye edilemez.<\/td>\r\n\t\t\t<td style=\"text-align:center; width:588px\">PHP kodu kullanılarak yapılabilecek her şeyi yapabildiği i&ccedil;in b&uuml;y&uuml;k bir proje i&ccedil;in idealdir.<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center; width:557px\">Ger&ccedil;ek zamanlı web uygulamaları&nbsp;i&ccedil;in şu anda mevcut ideal bir platformdur.<\/td>\r\n\t\t\t<td style=\"text-align:center; width:588px\">Ger&ccedil;ek zamanlı web uygulamaları&nbsp;i&ccedil;in şu anda mevcut ideal bir platform değildir.<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center; width:557px\">Daha az miktarda kodlama gerektiren işlevselliği sağlamak i&ccedil;in, k&uuml;&ccedil;&uuml;k projeler i&ccedil;in, en uygun y&ouml;ntemdir.<\/td>\r\n\t\t\t<td style=\"text-align:center; width:588px\">B&uuml;y&uuml;k &ouml;l&ccedil;ekli projeler i&ccedil;in en uygun y&ouml;ntemdir.<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center; width:557px\">Yoğun bellek aktiviteler i&ccedil;in en iyisi.<\/td>\r\n\t\t\t<td style=\"text-align:center; width:588px\">Yoğun bellek aktiviteler i&ccedil;in &ouml;nerilmez.<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center; width:557px\">Web uygulamaları ve web sitesi geliştirme konusundaysa daha iyi bir se&ccedil;imdir.<\/td>\r\n\t\t\t<td style=\"text-align:center; width:588px\">Python, web uygulamaları, backend uygulamalarla entegrasyon, sayısal hesaplamalar, makine &ouml;ğrenmesi ve ağ programlama gibi bir&ccedil;ok şeyi yapmak i&ccedil;in ideal bir platformdur.<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center; width:557px\">JavaScript yorumlayıcısını kullanmaktadır.<\/td>\r\n\t\t\t<td style=\"text-align:center; width:588px\">Yorumlayıcı olarak PyPy kullanır.<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center; width:557px\">Callback destekler. Anlamı, daha hızlı işlem yapmasını sağlayan oevent\/callback &ccedil;ağırmaya dayanır.<\/td>\r\n\t\t\t<td style=\"text-align:center; width:588px\">&Ccedil;ok daha basit hale getiren &uuml;rete&ccedil;leri destekliyor.<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Ne zaman&nbsp;Node js?<\/h2>\r\n\r\n<p>Node.js, Chrome&#39;un JavaScript &ccedil;alışma zamanı &uuml;zerine kurulu bir platform olduğundan &ouml;l&ccedil;eklenebilir ağ uygulamaları oluşturmaya yardımcı olur. Veri yoğun ger&ccedil;ek zamanlı uygulamalar i&ccedil;in geliştirme i&ccedil;in ideal bir se&ccedil;enek haline getiren, olaya dayalı, engelleyici olmayan bir G\/&Ccedil; modeli kullanır.<\/p>\r\n\r\n<p>Node.js daha y&uuml;ksek performans ve hız sunar. Mesajlaşma veya sohbet uygulamaları geliştirmek i&ccedil;in ideal bir &ccedil;&ouml;z&uuml;md&uuml;r. Ayrıca, işlem hızına bağlı ağır y&uuml;k uygulamaları ve e-ticaret siteleri geliştirmek i&ccedil;in kullanışlıdır.<\/p>\r\n\r\n<p><a href=\"https:\/\/www.guru99.com\/images\/1\/111517_1156_NodejsvsPyt2.png\"><img alt=\"\" src=\"\/upload\/images\/111517_1156_NodejsvsPyt2.png\" style=\"height:291px; width:476px\" \/><\/a><\/p>\r\n\r\n<ul>\r\n\t<li>G\/&Ccedil; Bağımlı Uygulamaları<\/li>\r\n\t<li>Veri Akışı Uygulamaları<\/li>\r\n\t<li>Ger&ccedil;ek Zamanlı Yoğun Uygulamalar (DIRT)<\/li>\r\n\t<li>JSON API tabanlı Uygulamalar<\/li>\r\n\t<li>Tek Sayfa Uygulamaları<\/li>\r\n<\/ul>\r\n\r\n<h2>Ne zaman Python?<\/h2>\r\n\r\n<p>Python a&ccedil;ık kaynaklı veri analiz ara&ccedil;ları, web &ccedil;er&ccedil;eveleri ve test ara&ccedil;ları k&uuml;t&uuml;phanesine sahiptir. Bu nedenle, ekosistemi, herhangi bir programlama topluluğunun en b&uuml;y&uuml;ğ&uuml;nden biridir.<\/p>\r\n\r\n<p>Python, topluluk bir&ccedil;ok tanıtım kaynağı sağladığı i&ccedil;in yeni programcılar i&ccedil;in en erişilebilir dildir. Dil &uuml;niversitelerde de &ouml;ğretilir ve Raspberry Pi gibi acemi dostu cihazlarla &ccedil;alışmak i&ccedil;in kullanılır.<\/p>\r\n\r\n<p>Python ayrıca tutarlılık, kararlılık ve kullanım kolaylığı da sunuyor. Bilimsel uygulamalar, b&uuml;y&uuml;k veri &ccedil;&ouml;z&uuml;mleri ve devlet projeleri geliştirmek i&ccedil;in &ccedil;ok tercih edilir.<\/p>\r\n\r\n<p><a href=\"https:\/\/www.guru99.com\/images\/1\/111517_1156_NodejsvsPyt3.png\"><img alt=\"\" src=\"\/upload\/images\/111517_1156_NodejsvsPyt3.png\" style=\"height:280px; width:476px\" \/><\/a><\/p>\r\n\r\n<h2>Conclusion:<\/h2>\r\n\r\n<ul>\r\n\t<li>Node.js is a server-side platform. It is built on Google Chrome&#39;s JavaScript Engine. It offers features like single thread, very fast performance and no buffering.<\/li>\r\n\t<li>Python is an object-oriented, high level, dynamic and multipurpose programming language. It has features like support for major databases, functional and statured programming, etc.<\/li>\r\n\t<li>Node.js can be used for client and server web development.<\/li>\r\n\t<li>Python is best suited for developing scientific and big data solutions.<\/li>\r\n<\/ul>\r\n\r\n<p>With above-given points, we can say that no language is good or bad. In fact, both Node.js and Python will ensure reliable, consistent and effective solutions by implementing the correct method and using the right approach.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<h2>Sonu&ccedil;:<\/h2>\r\n\r\n<ul>\r\n\t<li>Node.js bir sunucu tarafı platformudur. Google Chrome&#39;un JavaScript Motoruna dayanmaktadır. Tek iplik, &ccedil;ok hızlı performans ve tamponlama gibi &ouml;zellikler sunar.<\/li>\r\n\t<li>Python, nesne y&ouml;nelimli, y&uuml;ksek seviye, dinamik ve &ccedil;ok ama&ccedil;lı bir programlama dilidir. Başlıca veritabanları i&ccedil;in destek, işlevsel ve yapısal programlama, vb. gibi &ouml;zelliklere sahiptir.<\/li>\r\n\t<li>Node.js, istemci ve sunucu web geliştirme i&ccedil;in kullanılabilir.<\/li>\r\n\t<li>Python, bilimsel ve b&uuml;y&uuml;k veri &ccedil;&ouml;z&uuml;mleri geliştirmek i&ccedil;in en uygun y&ouml;ntemdir.<\/li>\r\n<\/ul>\r\n\r\n<p>Yukarıda verilen bilgilerle, hi&ccedil;bir dilin iyi ya da k&ouml;t&uuml; olmadığını s&ouml;yleyebiliriz. Aslında, hem Node.js hem de Python, doğru y&ouml;ntemi uygulayarak ve doğru yaklaşımı kullanarak g&uuml;venilir, tutarlı ve etkili &ccedil;&ouml;z&uuml;mler sağlayacaktır.<\/p>", "created_at": "2019-11-25 10:47:28", "updated_at": "2019-11-26 13:42:57", "sira": "8", "fixed": "0", "etiketler": "nodejs,js,python", "aktif": "1" },
    { "id": "8", "baslik": "Node.js vs JavaScript", "url": "nodejs-vs-javascript", "kategori_id": "3", "icerik": "<h2>JavaScript vs Node.js: Type<\/h2>\r\n\r\n<p>Javascript pop&uuml;ler bir programlama dilidir ve herhangi bir web tarayıcısında &ccedil;alışır.&nbsp;&Ouml;te yandan, Node.js, JS programlamanın ayrı olarak kullanılabileceği bazı faydalı k&uuml;t&uuml;phanelerin bulunduğu JavaScript i&ccedil;in bir terc&uuml;man ve ortamdır.<\/p>\r\n\r\n<h2>JavaScript vs Node.js: Utility<\/h2>\r\n\r\n<p>Javascript, genellikle web uygulaması i&ccedil;in herhangi bir m&uuml;şteri tarafı etkinliğinde kullanılır; &ouml;rneğin, sayfayı belirli bir aralıkta yenilemek, olası &ouml;zellik doğrulaması veya belirli bir web sayfasını yenilemeden web uygulaması sayfalarında dinamik değişiklikler sağlamak i&ccedil;in kullanılır.<\/p>\r\n\r\n<p>Kabuk komut dosyası oluşturmak veya oluşturmak ya da donanıma &ouml;zel bilgilere erişmek veya backend de herhangi bir işi y&uuml;r&uuml;tmek gibi işletim sisteminin engellenmeyen işlemlerini ger&ccedil;ekleştirmek veya bunlara erişmek i&ccedil;in yazılım &ccedil;&ouml;z&uuml;mleri sunan en iyi BT şirketlerinden bazıları tarafından yaygın olarak kullanılır.<\/p>\r\n\r\n<h2>JavaScript vs Node.js: Running Engine<\/h2>\r\n\r\n<p>JavaScript Core (Safari), Spider Monkey (FireFox), V8 (Google Chrome) gibi herhangi bir motorda &ccedil;alışabilir. Node.js yalnızca &ccedil;oğunlukla Google Chrome tarafından kullanılan bir V8 motorunda &ccedil;alışır ve&nbsp;Node.js k&uuml;t&uuml;phanesinin yardımıyla yazılacak olan JS programı her zaman V8 Motorunda &ccedil;alışacaktır.<\/p>\r\n\r\n<h2><strong>Ek Bilgiler<\/strong><\/h2>\r\n\r\n<ol>\r\n\t<li>JavaScript, &ouml;zellikle belirli bir web uygulaması i&ccedil;in m&uuml;şteri tarafı etkinliği i&ccedil;in kullanılır. Bu etkinliklerden bazıları, işletme doğrulama ya da temel Ajax &ccedil;ağrısı t&uuml;r&uuml;ndeki g&ouml;revlere y&ouml;nelik olarak belirli bir zaman aralığı i&ccedil;erisinde dinamik sayfa g&ouml;r&uuml;nt&uuml;lemesi de olabilir.\r\n\t<ol>\r\n\t\t<li>&Ouml;te yandan, Node.js &ccedil;oğunlukla engelleme yapmayan bir işlem i&ccedil;in herhangi bir işletim sistemini &ccedil;alıştırmak veya erişmek i&ccedil;in kullanılır.<\/li>\r\n\t<\/ol>\r\n\t<\/li>\r\n\t<li>JavaScript programlamanın yazılması doğru ortam, tarayıcı, ile &ccedil;ok kolaydır.\r\n\t<ol>\r\n\t\t<li>Nodejs yalnızca Google&nbsp;Chrome V8 motorunu destekler. Ancak V8 motorunu destekleyip desteklemediği, JavaScript koduyla yazılmış herhangi bir ortamda &ccedil;alışabilir. Bu nedenle, tarayıcıya &ouml;zg&uuml; hi&ccedil;bir kısıtlama yoktur.<\/li>\r\n\t<\/ol>\r\n\t<\/li>\r\n\t<li>JavaScript normalde Java Programlama dili standardını izler. Kaynak kodunu yazmanın farklı yolları olabilir, ancak aynı zamanda Java Programlama dili standartlarına uyduğunu s&ouml;yleyebiliriz.\r\n\t<ol>\r\n\t\t<li>Node.js, C ++ dilinde yazılmıştır ve geliştiricilerin javascript programını herhangi bir tarayıcı ortamında &ccedil;alıştırmalarına yardımcı olan V8 motor tabanını sağlar.<\/li>\r\n\t<\/ol>\r\n\t<\/li>\r\n\t<li>Engellenmeyen herhangi bir g&ouml;reve &ouml;zg&uuml; işletim sistemine erişmek i&ccedil;in JavaScript&#39;in bir&ccedil;ok nesnesi vardır, ancak bunlar işletim sistemine &ouml;zg&uuml;d&uuml;r. &Ouml;rneğin, yalnızca Windows&#39;ta &ccedil;alışan bir ActiveX Denetimi.\r\n\t<ol>\r\n\t\t<li>Node.js&#39;ye birka&ccedil; işletim sistemi &ccedil;alıştırmak i&ccedil;in yardımcı program verilir.<\/li>\r\n\t<\/ol>\r\n\t<\/li>\r\n<\/ol>\r\n\r\n<h2>Sonu&ccedil;;<\/h2>\r\n\r\n<p>Web uygulaması geliştirmeyi d&uuml;ş&uuml;n&uuml;yorsanız, kesinlikle Nodejs ve Javascript&#39;i d&uuml;ş&uuml;nmelisiniz.&nbsp;<\/p>", "created_at": "2019-11-25 12:48:56", "updated_at": "2019-11-26 13:42:57", "sira": "9", "fixed": "0", "etiketler": "nodejs,node,js", "aktif": "1" },
    { "id": "9", "baslik": "Node js vs Java", "url": "node-js-vs-java", "kategori_id": "3", "icerik": "<p>T&uuml;m d&uuml;nyada milyonlarca geliştirici tarafından kullanılan Java, son 22 yıldır en pop&uuml;ler programlama dillerinden biri olarak kalmıştır. Yine de, JavaScript d&uuml;nyadaki en yaygın kullanılan dil&nbsp;unvanına sahiptir ve <a href=\"https:\/\/nodejs.org\/en\/\" rel=\" noopener\" target=\"_blank\">Node.js<\/a> gibi bir &ccedil;alışma zamanı gibi &ccedil;evre ortamlarında da &ccedil;ekişme kazanıyor. Aslında, eBay, LinkedIn, Groupon, Uber ve Netflix gibi end&uuml;stri devleri, web uygulamaları oluşturmak i&ccedil;in diğer &ccedil;&ouml;z&uuml;mler karşısında Node.js&#39;yi se&ccedil;iyor.&nbsp;Peki, geliştirici sahnesindeki bu acemi, Java gibi g&uuml;&ccedil;l&uuml; bir dili nasıl karşılaştırıyor?&nbsp;<\/p>\r\n\r\n<h2><strong>Java vs Node.js: Temeller<\/strong><\/h2>\r\n\r\n<p>Java, İnternet&#39;in dağıtılmış ortamında kullanılmak &uuml;zere tasarlanmış, genel ama&ccedil;lı, nesneye y&ouml;nelik, platformdan bağımsız, taşınabilir ve sağlam bir yorumlanmış programlama dilidir. Java kodu, geliştiricilere &ccedil;ok fazla esneklik sunan herhangi bir Java Sanal Makinesinde &ccedil;alışabilir. Bug&uuml;n Java&#39;yı web ve mobil kurumsal uygulamalarda, akıllı kartlarda, oyunlarda, g&ouml;m&uuml;l&uuml; sistemlerde ve hatta robotlarda bulabilirsiniz.<\/p>\r\n\r\n<p>Node.js, Chrome&#39;un V8 JavaScript motoruna dayanan bir JavaScript &ccedil;alışma zamanıdır, şaşırtıcı performansı ve &ouml;l&ccedil;eklenebilirliği nedeniyle takdir edilir. Node.js Vakfı tarafından yapılan 2017 ankete g&ouml;re, bug&uuml;n Node.js &ouml;ncelikle web uygulamalarında, kurumsal uygulamalarda, B&uuml;y&uuml;k Veri ve analitik &ccedil;&ouml;z&uuml;mlerinde ve g&ouml;m&uuml;l&uuml; sistemlerde kullanılıyor.<\/p>\r\n\r\n<p>Java ve Node.js arasında se&ccedil;im yapıyorsanız, g&ouml;z &ouml;n&uuml;nde bulundurmanız gereken &ouml;nemli avantajlar ve dezavantajlar şunlardır.<\/p>\r\n\r\n<h2><strong>Java: Artıları - Eksileri<\/strong><\/h2>\r\n\r\n<p><strong>Artıları;<\/strong><\/p>\r\n\r\n<ul>\r\n\t<li>20 yılı aşkın m&uuml;hendislik sayesinde sağlam bir temel;<\/li>\r\n\t<li>&Ccedil;ok sayıda k&uuml;t&uuml;phane geliştiricisinin ekosistemi, gelişim hızını artırmak i&ccedil;in kullanabilir;<\/li>\r\n\t<li>&Ccedil;ok sayıda &uuml;nit&nbsp;testi sayesinde m&uuml;kemmel stabilite sunan Java Sanal Makinesi;<\/li>\r\n\t<li>Kalite IDE&#39;leri, olgunlaşan ve konuşlandırmaya hazır, izleme ve hata ayıklama ara&ccedil;larından oluşan bir koleksiyon;<\/li>\r\n\t<li>Sunucular, hata ayıklayıcılar ve kod &ccedil;&ouml;z&uuml;c&uuml;ler (t&uuml;mleşik eklenti ekosistemi) ile entegre olan Eclipse, NetBeans veya IntelliJ gibi kanıtlanmış ara&ccedil;lar;<\/li>\r\n\t<li>En yeni Java &ccedil;er&ccedil;evelerinin bir par&ccedil;ası olan doğru &ccedil;er&ccedil;eve veya iş par&ccedil;acığı modelleriyle, Node.js&rsquo;lerinkiyle eşleşecek şekilde geliştirme hızını artırmak m&uuml;mk&uuml;nd&uuml;r;<\/li>\r\n\t<li>İnanılmaz hesaplama verimliliği;<\/li>\r\n\t<li>M&uuml;kemmel kod bakımı.<\/li>\r\n<\/ul>\r\n\r\n<p><strong>Eksileri;<\/strong><\/p>\r\n\r\n<ul>\r\n\t<li>Yavaş gelişme s&uuml;reci;<\/li>\r\n\t<li>Kod temiz ve anlaşılırsa en iyi şekilde &ccedil;alışır - kilitlenirse, t&uuml;m sunucunun kilitlenmesi riski vardır;<\/li>\r\n\t<li>Ara&ccedil;ları yapılandırmak &ccedil;ok zaman alabilir;<\/li>\r\n\t<li>Java&rsquo;da yazılmış iş mantığınızı tarayıcıya taşımaya karar verirseniz kod taşıma sorunu olabilir (bu durumda kodunuzu JavaScript&rsquo;e yeniden yazmanız gerekir).<\/li>\r\n<\/ul>\r\n\r\n<p><strong>Ne zaman&nbsp;Java?<\/strong><\/p>\r\n\r\n<p>Yoğun CPU veya CPU&#39;ya bağlı uygulamalar Java&#39;dan faydalanacaktır. Aynı şey, geniş bir kod tabanına sahip uygulamalar i&ccedil;in ge&ccedil;erlidir. Java, g&uuml;&ccedil;l&uuml; bir şekilde yazılmış kaynaklar sağladığından, yeniden d&uuml;zenleme ve hata d&uuml;zeltme, bakımı sırasında daha kolay olacaktır. Uygulamanız RDBMS (İlişkisel Veri Tabanı Y&ouml;netim Sistemi) kullanıyorsa, Java harika bir se&ccedil;im olacaktır. Başka bir veritabanına ge&ccedil;tiğinizde yapılandırmayı kolaylaştırmak i&ccedil;in nesne-ilişkisel haritalama i&ccedil;in &ccedil;oklu veritabanı desteği sağlayan ara&ccedil;lar i&ccedil;erir.<\/p>\r\n\r\n<h2><strong>Node.js:&nbsp;Artıları - Eksileri<\/strong><\/h2>\r\n\r\n<p><strong>Artıları;<\/strong><\/p>\r\n\r\n<ul>\r\n\t<li>JavaScript&#39;i zaten bilenler i&ccedil;in yumuşak bir &ouml;ğrenme eğrisi vardır;<\/li>\r\n\t<li>Frameworkler ve k&uuml;t&uuml;phaneler &ccedil;ok fazla iş yaptığından, geliştiriciler JavaScript&#39;te &ccedil;ok daha hızlı yazılımlar oluşturabilir ve Node.js projeleri genellikle &ccedil;ok hızlı bir şekilde derlenir;<\/li>\r\n\t<li>Kutunun dışında reaktif bir stil sunar (Java&#39;da daha karmaşık bir şey);<\/li>\r\n\t<li>Bir kod yeniden kullanım &ouml;zelliği i&ccedil;erir - bu, Node.js&#39;yi geliştiriciler arasında bu kadar pop&uuml;ler kılan, &uuml;retkenliklerini ciddi şekilde artıran etkendir;<\/li>\r\n\t<li>Geliştiricilere sunucu ve istemci tarafında JavaScript kullanma olanağı sağlar - geliştiricilerin yeni bir s&ouml;zdizimi &ouml;ğrenmelerine gerek yoktur.<\/li>\r\n<\/ul>\r\n\r\n<p><strong>Eksileri;<\/strong><\/p>\r\n\r\n<ul>\r\n\t<li>IDE eksikliği - Node.js geliştiricileri, eklentilerle donatılmış metin d&uuml;zenleyicilerine kod yazar; bu harika bir şeydir, ancak Java&rsquo;nın geliştiricilerin işini kolaylaştıran IDE&#39;lerden &ccedil;ok uzaktır;<\/li>\r\n\t<li>JavaScript ekosistemi, Java ekosistemi kadar olgun ve g&uuml;venilir değildir.<\/li>\r\n<\/ul>\r\n\r\n<p><strong>Ne zaman Node.js?<\/strong><\/p>\r\n\r\n<p>Node.js web uygulamaları, mobil uygulamalar, ger&ccedil;ek zamanlı uygulamalar (anlık mesajlaşma, canlı sohbet), &ccedil;evrimi&ccedil;i oyun uygulamaları, e-ticaret işlem yazılımı ve daha fazlası i&ccedil;in idealdir. Netflix veya Uber gibi gelişmiş sistemler i&ccedil;in temel oluşturabilen mikro servis mimarisi ile ilgileniyorsanız idealdir.<\/p>\r\n\r\n<h2><strong>Java mı? Node.js mi?<\/strong><\/h2>\r\n\r\n<p>Teorik olarak, bu se&ccedil;imi yapmaktan ka&ccedil;ınmak m&uuml;mk&uuml;nd&uuml;r. &Ouml;rneğin, Java&#39;da bir uygulama geliştirebilir ve Rhinorun gibi bir motor aracılığıyla JavaScript ile bağlayabilirsiniz.<\/p>\r\n\r\n<p>Ancak, ger&ccedil;ek d&uuml;nyadaki bir senaryoda, web uygulamanız i&ccedil;in Node.js se&ccedil;mek daha mantıklı geliyor.<\/p>\r\n\r\n<p>Web uygulamaları s&ouml;z konusu olduğunda, Java&#39;dan daha hızlı ve daha &ouml;l&ccedil;eklenebilir. Aynı zamanda y&uuml;ksek performans sunar. Node.js&#39;nin sanayi devleri arasında b&uuml;y&uuml;mesi de &ccedil;ok y&ouml;nl&uuml;l&uuml;ğ&uuml;n&uuml; g&ouml;steriyor. Node.js bir uygulama &ccedil;er&ccedil;evesinden &ccedil;ok daha fazlasıdır. Aynı zamanda kurumsal veri yazılımlarında, hızlı uygulama modernizasyon projelerinde ve IoT &ccedil;&ouml;z&uuml;mlerinde de kullanılır.<\/p>", "created_at": "2019-11-25 13:19:00", "updated_at": "2019-11-26 13:42:57", "sira": "5", "fixed": "0", "etiketler": "nodejs,node,java", "aktif": "1" },
    { "id": "10", "baslik": "Node.js vs Golang", "url": "nodejs-vs-golang", "kategori_id": "3", "icerik": "<p>Golang ve Node.js, ikisi de backend programlama i&ccedil;in kullanılan ve giderek b&uuml;y&uuml;yen teknolojilerdir. Golang a&ccedil;ık kaynaklı bir programlama dili olsa da, Node.js a&ccedil;ık kaynaklı bir sunucu framework&uuml;d&uuml;r.<\/p>\r\n\r\n<p>Hem Golang hem de Node.js, &ccedil;eşitli nedenlerle geliştiriciler arasında giderek daha fazla pop&uuml;lerlik kazanıyor. PHP ve Java gibi geleneksel sunucu tarafındaki dillerden ge&ccedil;iş yapmak i&ccedil;in devrim niteliğindeki bir hareket i&ccedil;inde bulunan iki yeni nesil backend geliştirme platformlarıdır.<\/p>\r\n\r\n<h2><strong>Golang \/ Google Go<\/strong><\/h2>\r\n\r\n<p>Go Programlama Dilinin resmi belgelerinde a&ccedil;ıklandığı gibi:<\/p>\r\n\r\n<p>&ldquo;Go, etkileyici, &ouml;zl&uuml;, temiz ve verimli. Eşzamanlılık mekanizmaları, &ccedil;ok &ccedil;ekirdekli ve ağ bağlantılı makinelerden en iyi şekilde yararlanan programları yazmayı kolaylaştırırken, yeni tip sistemi esnek ve mod&uuml;ler program yapımını m&uuml;mk&uuml;n kılmaktadır. Go makine koduna hızlı bir şekilde derler ancak &ccedil;&ouml;p toplama kolaylığı ve &ccedil;alışma s&uuml;resi yansımasının g&uuml;c&uuml; vardır. Dinamik olarak yazılmış, yorumlanmış bir dil gibi g&ouml;r&uuml;nen hızlı, statik olarak yazılmış, derlenmiş bir dildir. &rdquo;<\/p>\r\n\r\n<p>Golang veya Go (yaygın olarak bilindiği gibi), 2007 yılında Google tarafından bir deneme olarak oluşturulmuştur. Derlenmiş dil g&uuml;venliği ve geliştirme &ccedil;alışma hızının temel ilkelerini izleyerek g&uuml;&ccedil;l&uuml; ve pratik olması ama&ccedil;lanmıştır.<\/p>\r\n\r\n<p>İlk piyasaya &ccedil;ıkış tarihinden itibaren 2 yılda halka a&ccedil;ık bir dil olarak kullanıma sunuldu. C ve C ++ dillerinin bir &uuml;r&uuml;n&uuml; olduğu i&ccedil;in Golang, g&uuml;&ccedil;l&uuml; ağ bağlantılı uygulamalar i&ccedil;in kodlamayı &ccedil;ok daha kolay ve verimli hale getirir, web geliştirme alanında evrimi getirir.<\/p>\r\n\r\n<h2><strong>Node.js<\/strong><\/h2>\r\n\r\n<p>Resmi belge Node.js&rsquo;i,<\/p>\r\n\r\n<p>&ldquo;Hızlı ve &ouml;l&ccedil;eklenebilir ağ uygulamaları kolayca oluşturmak i&ccedil;in Chrome&#39;un JavaScript &ccedil;alışma s&uuml;resine dayalı bir platform. Node.js, dağıtılmış cihazlar arasında &ccedil;alışan, veri yoğunluğundaki ger&ccedil;ek zamanlı uygulamalar i&ccedil;in m&uuml;kemmel, hafif ve verimli olmasını sağlayan, olaya dayalı, engelleme yapmayan bir G\/&Ccedil; modeli kullanıyor. &rdquo;<\/p>\r\n\r\n<p>2009&#39;daki kuruluşundan bu yana, Node.js &ouml;l&ccedil;eklenebilir, ağ bağlantılı bir uygulama oluşturmak i&ccedil;in pop&uuml;ler bir platform haline geldi. Windows, Mac OS X, Linux ve Unix gibi &ccedil;eşitli platformlarda desteklenebilen a&ccedil;ık kaynaklı bir sunucu &ccedil;er&ccedil;evesidir.<\/p>\r\n\r\n<p>Node.js, sorunsuz web geliştirme olanağı sağlayan &ccedil;eşitli JavaScript mod&uuml;llerinden oluşan zengin bir k&uuml;t&uuml;phane ile donatılmıştır.<\/p>\r\n\r\n<h1>Node.js vs GO<\/h1>\r\n\r\n<p><strong>1.<\/strong>&nbsp;<strong>Olgunluk<\/strong><\/p>\r\n\r\n<p>Golang ve Node.js ikisi de 2009 yılında ortaya &ccedil;ıktı. Golang nispeten nispeten istikrarlı ve olgundur, oysa Node.js API&#39;lerin s&uuml;rekli değiştiği i&ccedil;in olduk&ccedil;a belirsizdir.<\/p>\r\n\r\n<p><strong>2.<\/strong>&nbsp;<strong>Performans<\/strong><\/p>\r\n\r\n<p>Node.js, JavaScript tabanlı bir yorum dili olduğundan, derlenmiş diğer dillerden biraz daha yavaştır.&nbsp;Oysa Golang hafif ve C &amp; C ++ karakteristiklerini temel alan Node.js&#39;den daha hızlıdır.<\/p>\r\n\r\n<p>Bu nedenle, CPU ve belleğe bağlı g&ouml;revlerin ham performansı a&ccedil;ısından Golang&#39;ın daha iyi bir se&ccedil;enek olduğunu s&ouml;yleyebiliriz. Bununla birlikte, her iki teknoloji de ger&ccedil;ek hayattaki g&ouml;revlerde eşit performans sergilemektedir.<\/p>\r\n\r\n<p><strong>3.<\/strong>&nbsp;<strong>Hata İşleme<\/strong><\/p>\r\n\r\n<p>Golang, a&ccedil;ık bir hata kontrol&uuml;n&uuml; gerektirir, bu da hatanın nedenlerini bulmayı zorlaştırır. Ancak, Golang&#39;da hata işlemenin sonucu tutarlı ve kusursuzdur.<\/p>\r\n\r\n<p>Node.js, sonunda bazı tutarlılık sorunları g&ouml;stermesine rağmen, geliştiriciler arasında zaten pop&uuml;ler olan throw ve catch işleme yaklaşımını uygular.<\/p>\r\n\r\n<p><strong>4.<\/strong>&nbsp;<strong>&Ouml;ğrenme eğrisi<\/strong><\/p>\r\n\r\n<p>Golang tam bir dildir. Bir Web ve Mobil uygulama geliştiricisinin bunu baştan &ouml;ğrenmesi ve belirli s&uuml;re&ccedil;ler, kurallar, aray&uuml;zler, işaret&ccedil;iler ve diğer programlama kavramları hakkında bilgi sahibi olması gerekir.<\/p>\r\n\r\n<p>Diğer taraftan, JavaScript, en yaygın kullanılan kodlama dillerinden biridir. Bu nedenle, geliştirici JavaScript&#39;i biliyorsa, &ouml;ğrenmesi ve Node.js&#39;ye ge&ccedil;işi kolaydır. Ve değilse, dev JavaScript topluluğu tarafından sağlanan binlerce eğitim materyali vardır.<\/p>\r\n\r\n<p>Bu nedenle, Node.js &ouml;ğrenme eğrisi Golang&#39;dan &ccedil;ok daha basittir.<\/p>\r\n\r\n<h2><strong>Node.js mi?&nbsp; Golang mı?<\/strong><\/h2>\r\n\r\n<p>Her şey projenin b&uuml;y&uuml;kl&uuml;ğ&uuml;ne ve gelişiminin t&uuml;r&uuml;ne bağlı.&nbsp;Node.js&#39;nin Golang&#39;da uygulanması zor &ccedil;eşitli paketler sunduğu g&ouml;z ardı edilemez. Ayrıca, Node.js daha geniş bir topluluğa sahiptir, bu nedenle geliştirici kodu yazarken bir yere sıkışmışsa daha iyi destek ve &ccedil;&ouml;z&uuml;mler sunar.<\/p>\r\n\r\n<p>Fortune 500 şirketlerinin% 98&#39;inin NASA, PayPal, LinkedIn, Netflix ve Walmart gibi bazı global organizasyonlarla d&uuml;zenli olarak Node.js kullandığını bilmelisiniz.<\/p>", "created_at": "2019-11-25 13:26:39", "updated_at": "2019-11-26 13:42:57", "sira": "6", "fixed": "0", "etiketler": "nodejs,js,node,go,golang", "aktif": "1" },
    { "id": "11", "baslik": "ExpressJS vs Flask", "url": "expressjs-vs-flask", "kategori_id": "3", "icerik": "<h2><strong>Flask Nedir?<\/strong><\/h2>\r\n\r\n<p>Flask, 2010 yılında resmen a&ccedil;ık kaynaklı bir web geliştirme &ccedil;er&ccedil;evesi olarak başlatılan bir <a href=\"https:\/\/www.python.org\/\">Python<\/a>&nbsp;web mikro &ccedil;alışmasıdır. Flask, geliştiricilerin bir blogdan ticari bir web sitesine kadar istedikleri her şeyi oluşturmalarını sağlamak i&ccedil;in tasarlanmıştır. Flask&#39;a başlamak i&ccedil;in <a href=\"http:\/\/flask.pocoo.org\/\" target=\"_blank\">buraya <\/a>tıklayın.<\/p>\r\n\r\n<h2><strong>Express Nedir?<\/strong><\/h2>\r\n\r\n<p>Express, web uygulamaları oluşturmak i&ccedil;in gereken temel kaynakları ve ara&ccedil;ları sağlayan minimal ve esnek bir Node.js web &ccedil;er&ccedil;evesidir. Express kullanarak, kolayca bakım yapılabilir, okunabilir ve esnek web sunucuları oluşturabilirsiniz. Express ile başlamak i&ccedil;in <a href=\"http:\/\/expressjs.com\/\" target=\"_blank\">burayı <\/a>tıklayın.<\/p>\r\n\r\n<h2><strong>Flask&#39;ın Avantajları<\/strong><\/h2>\r\n\r\n<ul>\r\n\t<li><strong>Python framework: <\/strong>Python, diğer pop&uuml;ler dillere kıyasla &ouml;ğrenmesi daha kolay bir dil olarak kabul edilir, bu nedenle Flask daha iyi bir başlangı&ccedil; ​​se&ccedil;eneği olabilir.<\/li>\r\n\t<li><strong>M&uuml;kemmel belgeler:<\/strong> Resmi <a href=\"http:\/\/flask.pocoo.org\/docs\/1.0\/\" target=\"_blank\">belgeler<\/a>&nbsp;olduk&ccedil;a ayrıntılıdır ve iyi yazılmış &ouml;rnekler ve a&ccedil;ık &ouml;ğreticilerle birlikte bir&ccedil;ok ayrıntı sunar.<\/li>\r\n\t<li><strong>Bir s&uuml;r&uuml; kaynaklar:<\/strong> Flask, Python&rsquo;un en pop&uuml;ler web &ccedil;er&ccedil;evelerinden biridir ve uygulamalarınıza ekleyebileceğiniz bir&ccedil;ok &ouml;ğretici ve k&uuml;t&uuml;phane mevcuttur.<\/li>\r\n\t<li><strong>Minimalist:<\/strong> Flask az bağımlılığa sahip hafif bir &ccedil;er&ccedil;evedir. Flask&#39;ı y&uuml;klemek sadece bir ka&ccedil; Python satırı gerektiriyor ve mod&uuml;ler olduğundan bağımlılıkları ihtiya&ccedil;larınıza g&ouml;re kısıtlayabilirsiniz.<\/li>\r\n\t<li><strong>Basitlik:<\/strong> Minimalist bir &ccedil;er&ccedil;eve olarak, Flask kurulumdan sonra bir web uygulaması prototipini kolayca ve hızlı bir şekilde oluşturmak i&ccedil;in gerekli ara&ccedil;ları sağlar.<\/li>\r\n\t<li><strong>Kolay Veritabanı Entegrasyonu: <\/strong>SQLAlchemy, SQLite ve MySQL gibi SQL veritabanları ve DynamoDB ve MongoDB gibi NoSQL gibi veritabanı ara&ccedil;larıyla entegrasyon olduk&ccedil;a kolaydır.<\/li>\r\n\t<li><strong>Esneklik:<\/strong> Flask, geliştiricilere web uygulamalarını geliştirmek i&ccedil;in c&ouml;mert esneklik sağlar.<\/li>\r\n<\/ul>\r\n\r\n<h2><strong>Flask&#39;ın Dezavantajları<\/strong><\/h2>\r\n\r\n<p>Flask, asenkron olmayan programlama yapmak i&ccedil;in tasarlanmadığından asenkron değildir. Bu bir sorundur, &ccedil;&uuml;nk&uuml; tek iş par&ccedil;acıklı bir &ccedil;er&ccedil;eve olarak, web sunucusu aynı anda yalnızca bir isteği işleyebilir.<\/p>\r\n\r\n<ul>\r\n\t<li><strong>Her yerde kullanılan yerel ve yerel değişkenleri iş par&ccedil;acığı:<\/strong> Flask ile uygulama oluşturmanın varsayılan yolu yeniden kullanılabilir kod uygulamalarını zorlaştırır.<\/li>\r\n\t<li><strong>B&uuml;y&uuml;k bir projenin kurulması:<\/strong> Flask ile b&uuml;y&uuml;k bir projenin kurulması kolay değildir. Planlar, geliştiricilere yardımcı olmak i&ccedil;in yararlı bir ara&ccedil;tır, ancak bazı ek okumalar gerektirir ve yeni başlayanlar i&ccedil;in biraz zor olabilir.<\/li>\r\n<\/ul>\r\n\r\n<h2><strong>Express&#39;in Avantajları<\/strong><\/h2>\r\n\r\n<ul>\r\n\t<li><strong><a href=\"https:\/\/www.javascript.com\/\">JavaScript<\/a>: <\/strong>JavaScript etkileyici bir dildir ve şu anda en pop&uuml;ler dillerden biridir.<\/li>\r\n\t<li><strong><a href=\"https:\/\/nodejs.org\/en\/\">Node<\/a>&nbsp;framework: <\/strong>Node.js, Chrome&rsquo;un V8 JavaScript motoruna dayanan olduk&ccedil;a hızlı bir &ccedil;er&ccedil;evedir. Tek iş par&ccedil;acıklı, asenkron ve olay odaklı.<\/li>\r\n\t<li><strong>&Ouml;ğrenmesi kolay: <\/strong>Node.js&#39;yi temel olarak anladıktan sonra Express&#39;e ge&ccedil;ebilirsiniz. En kısa s&uuml;rede ekspres uygulamalar yaratacaksınız.<\/li>\r\n\t<li><strong>&Ccedil;ok sayıda eklenti desteği:<\/strong> Express, sayısız &uuml;&ccedil;&uuml;nc&uuml; taraf eklentisini dağıtmak ve y&uuml;klemek i&ccedil;in NPM&#39;den (Node Package Manager) faydalanır ve Express ile istediğinizi elde etmeyi &ccedil;ok kolaylaştırır.<\/li>\r\n\t<li><strong>En b&uuml;y&uuml;k kullanıcı tabanı:<\/strong> Express, bug&uuml;ne kadarki en pop&uuml;ler Node.js &ccedil;er&ccedil;evesidir.<\/li>\r\n\t<li><strong>Minimalist:<\/strong> Express, az bağımlılığa sahip hafif, esnek bir &ccedil;er&ccedil;evedir. Tek bir hat kullanarak Express kurulabilir.<\/li>\r\n\t<li><strong>M&uuml;kemmel y&ouml;nlendirme API&#39;si: <\/strong>Express&rsquo;in son derece g&uuml;&ccedil;l&uuml; y&ouml;nlendirme API&#39;si, geliştiricilerin web uygulamaları i&ccedil;in rota oluşturmasına, rota parametrelerini ve sorgu dizelerini kullanmasına ve bir REST API oluşturmasına olanak sağlar.<\/li>\r\n\t<li><strong>Orta katman yazılımın b&uuml;y&uuml;k ekosistemi:<\/strong> Express, geliştiricilere uygulama d&uuml;zeyinde, y&ouml;nlendirici d&uuml;zeyinde, hata y&ouml;netimi, yerleşik ve &uuml;&ccedil;&uuml;nc&uuml; taraf dahil olmak &uuml;zere &ccedil;eşitli ara katman yazılımları sunar.<\/li>\r\n<\/ul>\r\n\r\n<h2><strong>Express&#39;in&nbsp;Dezavantajları<\/strong><\/h2>\r\n\r\n<p>Express ile ilgili katı bir standart yoktur. Express kendisini minimalist, d&uuml;ş&uuml;n&uuml;lmemiş bir &ccedil;er&ccedil;eve olarak g&ouml;r&uuml;r, geliştiriciye projelerinin nasıl organize edileceğini belirleme &ouml;zg&uuml;rl&uuml;ğ&uuml; verir. Birden fazla k&uuml;t&uuml;phane kullanma esnekliği ve g&uuml;c&uuml; sağlarken ve zevkinize g&ouml;re bir proje organize ederken, &ouml;nerilenleri yapmanın tek bir yolu olmadığı ger&ccedil;eği, &ouml;zellikle de yeni başlıyorsanız, bir tuzak olabilir.<\/p>\r\n\r\n<h2><strong>Sonu&ccedil;<\/strong><\/h2>\r\n\r\n<p>Flask ve Express iki pop&uuml;ler &ccedil;er&ccedil;evedir. En rahat olduğunuz dil hangisini se&ccedil;tiğinizi etkileyebilir, ancak her iki &ccedil;er&ccedil;eveyi de denemenizi &ouml;neririz. Her ikisinden de kazanacak &ccedil;ok şeyin olduğunu garanti ederim.<\/p>", "created_at": "2019-11-26 13:21:48", "updated_at": "2019-11-26 13:43:00", "sira": "3", "fixed": "0", "etiketler": "nodejs,js,express,python,flask", "aktif": "1" },
    { "id": "12", "baslik": "Node JS vs Ruby on Rails", "url": "node-js-vs-ruby-on-rails", "kategori_id": "3", "icerik": "<h2>Node JS ve Ruby on Rails Node Arasındaki Fark<\/h2>\r\n\r\n<p>Node JS, platformlar arası &ccedil;alışan ve tarayıcının dışında &ccedil;alışan <a href=\"https:\/\/www.educba.com\/javascript-interview-questions\/\">JavaScript<\/a>&nbsp;uygulamaları oluşturmak i&ccedil;in kullanılan bir &ccedil;alışma zamanı k&uuml;t&uuml;phanesi ve ortamıdır. &Uuml;cretsizdir ve a&ccedil;ık kaynak kodludur ve sunucu tarafı JS uygulamaları oluşturmak i&ccedil;in kullanılır. Node JS, geliştiricilerin kodlarını sunucu tarafında y&uuml;r&uuml;tmesine izin verir.<\/p>\r\n\r\n<p>Ruby on Rails (Rails), <a href=\"https:\/\/www.educba.com\/ruby-interview-questions\/\">Ruby<\/a> dilinde yazılmış bir sunucu tarafı web uygulama &ccedil;er&ccedil;evesidir. Rails, hızlı uygulama geliştirme yaklaşımına yardımcı olur ve geliştiriciye bir&ccedil;ok yerleşik &ouml;zelliğe yardımcı olur, b&ouml;ylece geliştirici yalnızca uygulama iş mantığına odaklanabilir. A&ccedil;ık kaynaklı Rails &ccedil;er&ccedil;evesi, veritabanı destekli bir web uygulaması geliştirmek i&ccedil;in idealdir.<\/p>\r\n\r\n<h2>Node JS<\/h2>\r\n\r\n<ul>\r\n\t<li>Node&nbsp;JS, &ouml;l&ccedil;eklenebilir ve hafif komut dosyaları yazmak i&ccedil;in daha hızlı bir yol sağlar. Geliştiriciler ger&ccedil;ek zamanlı uygulamalar yazabilir ve aynı zamanda mobil uygulama geliştirmeye y&ouml;nelik kapsam sağlar. Aynı JavaScript kullanımına izin verdiği gibi, hem backend hemde frontend geliştirme i&ccedil;in Node JS&#39;yi kolayca kullanabilir.<\/li>\r\n\t<li>Sunucu tarafı yetenekleri, Node JS&#39;de geniş &ccedil;apta sağlanmıştır, bir geliştirici bilgisayardaki bir HTTP isteğini dinleyebilir ve yanıtlayabilir, trafik ağını dinleyebilir ve aynı zamanda veritabanına doğrudan bir bilgisayardan erişebilir.<\/li>\r\n\t<li>Node&nbsp;JS, &ouml;l&ccedil;eklenebilirliği ele almak i&ccedil;in olay tabanlı bir model kullanır ve kodlamayı basitleştirmeye yardımcı olan JavaScript mod&uuml;lleri i&ccedil;in zengin JavaScript kitaplıklarına izin verir.<\/li>\r\n\t<li>Express JS, Partial JS, vs. gibi Node JS&#39;ye dayanan pek &ccedil;ok &ccedil;er&ccedil;eve vardır. Hızlı ve &ouml;l&ccedil;eklenebilir bir sunucu tarafı uygulaması oluşturma s&ouml;z konusu olduğunda, Node JS a&ccedil;ık bir şekilde kazanır. Temel olarak, Node JS, JavaScript&rsquo;e API&rsquo;leri &uuml;zerinden G\/&Ccedil; cihazlarıyla etkileşime girme ve &ccedil;eşitli dillerde yazılmış diğer dış k&uuml;t&uuml;phanelerle bağlantı kurma yeteneği verir.<\/li>\r\n<\/ul>\r\n\r\n<h2>Ruby on Rails<\/h2>\r\n\r\n<ul>\r\n\t<li>Rails, bir veritabanı, web sayfaları ve web servisleri i&ccedil;in yapı sağlayan MVC (Model-View-Controller) tabanlı bir &ccedil;er&ccedil;evedir. Veri aktarımı amacıyla JSON ve XML gibi web standartları Rails tarafından kolaylaştırılmıştır. CoC (Konfig&uuml;rasyon Konvansiyonu), DRY (kendinizi tekrar etmeyin) ve aktif kayıt modeli gibi Railer tarafından iyi tanıtılan ve desteklenen bazı diğer paradigmalar vardır.<\/li>\r\n\t<li>Rails, geliştiriciyi metaprogramlama gibi daha &uuml;retken kılan bir&ccedil;ok &ouml;zelliğe sahiptir. Başka frameworkler sıfırdan kapsamlı kod &uuml;retir&nbsp;ancak Rails Metaprogramming tekniklerini kullanır. Rails ayrıca kod oluşturma işlevini kullanır, ancak ağır işler i&ccedil;in meta programlamaya bağlıdır. Aktif bir kayıt bir nesneyi veritabanına kaydeder. Rails ayrıca konfig&uuml;rasyonun b&uuml;y&uuml;k bir kısmını gerektirmez, geleneksel yaklaşımı tercih eder.<\/li>\r\n\t<li>2000&#39;lerde ortaya &ccedil;ıkan Rails, kesintisiz veritabanı tabloları oluşturma, hızlı uygulama geliştirme olanağı sağlayan ge&ccedil;işler gibi bir&ccedil;ok yenilik&ccedil;i &ouml;zellik sayesinde web gelişimini b&uuml;y&uuml;k &ouml;l&ccedil;&uuml;de etkiliyor.<\/li>\r\n\t<li>Rails&nbsp;ayrıca, bir web sitesi i&ccedil;in gereken bazı model ve g&ouml;r&uuml;n&uuml;mleri otomatik olarak oluşturabilen iskelet&nbsp;gibi ortak geliştirme g&ouml;revlerini kolaylaştıran ara&ccedil;ları da i&ccedil;erir. Diğer bir ara&ccedil; da Ruby ile birlikte dağıtılan bir Ruby web sunucusu olan WEBrick. Rails ile birlikte, bu ara&ccedil;lar temel bir geliştirme ortamı sağlar. Rails, JavaScript k&uuml;t&uuml;phaneleri i&ccedil;in de geniş bir desteğe sahiptir. Başlangı&ccedil;ta, web hizmetleri i&ccedil;in hafif SOAP kullanıyor ancak daha sonra REST web servisleri ile değiştiriliyor.<\/li>\r\n<\/ul>\r\n\r\n<h2>Karşılaştırma<\/h2>\r\n\r\n<ul>\r\n\t<li>NodeJS, k&uuml;&ccedil;&uuml;k &ouml;l&ccedil;ekli projeler geliştirmek i&ccedil;in idealdir, Rails ise MVC d&uuml;zeninde veritabanı destekli web uygulaması i&ccedil;in uygundur<\/li>\r\n\t<li>NodeJS, JavaScript ile yazılırken, Rails, Ruby&#39;de, MIT lisansı altında yayımlanan, s&ouml;zdizimini anlayan, &ouml;ğrenmesi kolay bir şekilde yazılmıştır.<\/li>\r\n\t<li>NodeJS, G\/&Ccedil; engellemeyen, olaya dayalı uygulama i&ccedil;in en uygun olanıdır, Rails ise metaprogramlama ve veritabanı destekli modern web programlama i&ccedil;in daha uygundur.<\/li>\r\n\t<li>NodeJS&nbsp;olaya dayalı model mimarisinden t&uuml;retilirken, Rails model g&ouml;r&uuml;n&uuml;m denetleyici modelini takip eder.<\/li>\r\n\t<li>NodeJS, HTTP isteğini asenkron olarak işleyen kendi web sunucularını oluşturma yetenekleri sağlarken, Rails WEBrick, Apache, NGINX, Cherokee kullanıyor.<\/li>\r\n\t<li>NodeJS, Github ile birlikte bir&ccedil;ok projeye sahip olan iyi bir topluluğa sahipken, Rails, b&uuml;y&uuml;k bir Github deposuyla birlikte b&uuml;y&uuml;k ve g&uuml;&ccedil;l&uuml; bir geliştirici topluluğuna sahiptir.<\/li>\r\n\t<li>İyi eğitimli JavaScript programcısı NodeJS kavramını verimli bir şekilde &ouml;ğrenebilir, Rails ise tecr&uuml;beli programcılar i&ccedil;in &ouml;nerilen dik bir &ouml;ğrenme eğrisine sahiptir.<\/li>\r\n\t<li>NodeJS, asenkron &ccedil;ağrıya dayanan olaya dayalı bir modele sahipken, Rails ise konfig&uuml;rasyon prensibi &uuml;zerine sahiptir.<\/li>\r\n\t<li>NodeJS&#39;nin sisteme kurulması gereken bazı arşiv dosyalarının y&uuml;klenmesi kolaydır, Rails kurulum işlemi ise NodeJS&#39;den daha uzundur.<\/li>\r\n\t<li>NodeJS, JavaScript kodunu yorumlamak ve y&uuml;r&uuml;tmek i&ccedil;in kullanılan bir terc&uuml;mana sahipken, Rails varsayılan olarak CoffeeScript kullanan yerleşik bir statik derlemeye sahiptir.<\/li>\r\n<\/ul>\r\n\r\n<h3>Node JS vs Ruby on Rails Comparison Table<\/h3>\r\n\r\n<p>Below is the topmost Comparison between Node JS vs Ruby on Rails<\/p>\r\n\r\n<table border=\"1\" style=\"width:98%\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:164px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/td>\r\n\t\t\t<td style=\"width:482px\"><strong>NodeJS<\/strong><\/td>\r\n\t\t\t<td><strong>Rails<\/strong><\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:164px\">Dil<\/td>\r\n\t\t\t<td style=\"width:482px\">C, C++, JavaScript ile yazılmıştır<\/td>\r\n\t\t\t<td>Ruby temellidir<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:164px\">Uygulama<\/td>\r\n\t\t\t<td style=\"width:482px\">Hızlı ve &ouml;l&ccedil;eklenebilir&nbsp;server-side uygulama &ccedil;atısıdır.<\/td>\r\n\t\t\t<td>Veritabanı destekli web uygulaması, meta-programlama<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:164px\">Kullanımı<\/td>\r\n\t\t\t<td style=\"width:482px\">&Ouml;l&ccedil;eklenebilir ve daha hızlı bir uygulama gerektiğinde &ccedil;ok faydalı<\/td>\r\n\t\t\t<td>B&uuml;y&uuml;k &ouml;l&ccedil;ekli uygulamalar i&ccedil;in en uygun<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:164px\">Kapsam<\/td>\r\n\t\t\t<td style=\"width:482px\">Geliştiriciler bunu istemci ve sunucu tarafında kullanabilirler<\/td>\r\n\t\t\t<td>Sunucu tarafında kullanabilirler<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:164px\">Kurulum<\/td>\r\n\t\t\t<td style=\"width:482px\">Bir sistemde arşiv dosyasını y&uuml;klemeniz gerekir<\/td>\r\n\t\t\t<td>RubyInstaller \/ RailsInstaller aracılığıyla Ruby&#39;nin &ouml;nceden derlenmiş bir s&uuml;r&uuml;m&uuml;ne ihtiya&ccedil; vardır.<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:164px\">&Ouml;l&ccedil;eklenebilirlik<\/td>\r\n\t\t\t<td style=\"width:482px\">Son derece &ouml;l&ccedil;eklenebilir<\/td>\r\n\t\t\t<td>NodeJS ile karşılaştırıldığında daha az &ouml;l&ccedil;eklenebilir<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:164px\">Performans<\/td>\r\n\t\t\t<td style=\"width:482px\">Sayfa y&uuml;kleme, site genelinde daha hızlıdır<\/td>\r\n\t\t\t<td>NodeJS ile karşılaştırıldığında daha yavaş<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:164px\">Market<\/td>\r\n\t\t\t<td style=\"width:482px\">B&uuml;y&uuml;k pazar talebi<\/td>\r\n\t\t\t<td>Mevcut piyasa senaryosunda NodeJS kadar pop&uuml;ler değil<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h2>Sonu&ccedil;<\/h2>\r\n\r\n<p>Rails &ccedil;ok pop&uuml;ler bir frameworkt&uuml;r ve d&uuml;nyadaki bir&ccedil;ok geliştirici tarafından sevilir, ancak NodeJS i&ccedil;in iki b&uuml;y&uuml;k avantaj vardır. Birincisi, d&uuml;nya genelindeki geliştiricilerin &ccedil;oğu tarafından bilinen JavaScript&#39;i temel alıyor olması ve ikincisi, mobil uygulamalar, sohbet uygulamaları veya diğer uygulamaları kullanan uygulamalar i&ccedil;in harika bir se&ccedil;im yapan olaya dayalı bir mimariye dayanması.<\/p>\r\n\r\n<p>Aynı zamanda, NodeJS biraz tutarsız olabilir, bunun nedeni API&#39;lerinin sık aralıklarla değişimini s&uuml;rd&uuml;rmesidir. Herhangi bir Express uygulama yapısı son derece esnek ve &uuml;cretsizdir; bu, herhangi bir uygulama i&ccedil;in gevşek bir taraf olabilir. Rails &ccedil;ok katıdır, bu nedenle hatalı kod yazmak zordur, asenkron programlama i&ccedil;in kullanılmayan geliştiriciler, yalnızca olay tabanlı model olan NodeJS&#39;de &ccedil;ok sayıda geri arama ile ilgili bir sorun yaşar.<\/p>\r\n\r\n<p>Her iki Node JS - Ruby on Rails&#39;in kendi avantajları ve dezavantajları vardır, ancak her iki Node JS - Ruby on Rails de harika teknolojilerdir. Bu nedenle, projeyle ilgili her y&ouml;n, bir olaya, t&uuml;m durumlardan daha iyi olduğuna inanmak yerine, duruma g&ouml;re değerlendirilmelidir. Zamanında proje geliştirmenin &ouml;n&uuml;n&uuml; a&ccedil;acak olan, geliştirici kullanım kolaylığı ve becerileridir.<\/p>", "created_at": "2019-11-26 13:42:08", "updated_at": "2019-11-26 13:43:38", "sira": "4", "fixed": "0", "etiketler": "nodejs,js,ruby,rails", "aktif": "1" }
]
*/